
STM32H7_4_ENCODER_FREERTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016380  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  08016620  08016620  00017620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017558  08017558  000191e8  2**0
                  CONTENTS
  4 .ARM          00000008  08017558  08017558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017560  08017560  000191e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017560  08017560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017564  08017564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  24000000  08017568  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  240001e8  08017750  000191e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005258  08017750  00019258  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000191e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294a6  00000000  00000000  00019216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b19  00000000  00000000  000426bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  000471d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000184a  00000000  00000000  000490f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e29e  00000000  00000000  0004a942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c81  00000000  00000000  00088be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001968a8  00000000  00000000  000b1861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00248109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d64  00000000  00000000  0024814c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00251eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016608 	.word	0x08016608

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08016608 	.word	0x08016608

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f000 f9de 	bl	8000f64 <bno055_writeData>
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	203d      	movs	r0, #61	@ 0x3d
 8000bc0:	f000 f9d0 	bl	8000f64 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d103      	bne.n	8000bd2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000bca:	2013      	movs	r0, #19
 8000bcc:	f000 f9be 	bl	8000f4c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000bd0:	e002      	b.n	8000bd8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 f9ba 	bl	8000f4c <bno055_delay>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff ffe3 	bl	8000bb0 <bno055_setOperationMode>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000bf2:	200c      	movs	r0, #12
 8000bf4:	f7ff ffdc 	bl	8000bb0 <bno055_setOperationMode>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000c00:	2120      	movs	r1, #32
 8000c02:	203f      	movs	r0, #63	@ 0x3f
 8000c04:	f000 f9ae 	bl	8000f64 <bno055_writeData>
  bno055_delay(700);
 8000c08:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000c0c:	f000 f99e 	bl	8000f4c <bno055_delay>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  bno055_reset();
 8000c1a:	f7ff ffef 	bl	8000bfc <bno055_reset>

  uint8_t id = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fa87 	bl	800113c <bno055_readData>
  if (id != BNO055_ID) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c32:	d004      	beq.n	8000c3e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <bno055_setup+0x4c>)
 8000c3a:	f010 fdaf 	bl	801179c <iprintf>
  }
  bno055_setPage(0);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ffa8 	bl	8000b94 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	203f      	movs	r0, #63	@ 0x3f
 8000c48:	f000 f98c 	bl	8000f64 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000c4c:	f7ff ffc8 	bl	8000be0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f000 f97b 	bl	8000f4c <bno055_delay>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08016620 	.word	0x08016620

08000c64 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000c64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c68:	b09e      	sub	sp, #120	@ 0x78
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff8e 	bl	8000b94 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d108      	bne.n	8000c92 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000c80:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c88:	2208      	movs	r2, #8
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa56 	bl	800113c <bno055_readData>
 8000c90:	e007      	b.n	8000ca2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000c92:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fa4d 	bl	800113c <bno055_readData>

  double scale = 1;
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b81      	ldr	r3, [pc, #516]	@ (8000eac <bno055_getVector+0x248>)
 8000ca8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cb0:	2b0e      	cmp	r3, #14
 8000cb2:	d108      	bne.n	8000cc6 <bno055_getVector+0x62>
    scale = magScale;
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8000eb0 <bno055_getVector+0x24c>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cc0:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000cc4:	e03a      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d007      	beq.n	8000cde <bno055_getVector+0x7a>
 8000cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cd2:	2b28      	cmp	r3, #40	@ 0x28
 8000cd4:	d003      	beq.n	8000cde <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cdc:	d108      	bne.n	8000cf0 <bno055_getVector+0x8c>
    scale = accelScale;
 8000cde:	4b75      	ldr	r3, [pc, #468]	@ (8000eb4 <bno055_getVector+0x250>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cea:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000cee:	e025      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cf4:	2b14      	cmp	r3, #20
 8000cf6:	d108      	bne.n	8000d0a <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb8 <bno055_getVector+0x254>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d04:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d08:	e018      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d0e:	2b1a      	cmp	r3, #26
 8000d10:	d108      	bne.n	8000d24 <bno055_getVector+0xc0>
    scale = eulerScale;
 8000d12:	4b6a      	ldr	r3, [pc, #424]	@ (8000ebc <bno055_getVector+0x258>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d1e:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000d22:	e00b      	b.n	8000d3c <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d28:	2b20      	cmp	r3, #32
 8000d2a:	d107      	bne.n	8000d3c <bno055_getVector+0xd8>
    scale = quaScale;
 8000d2c:	4b64      	ldr	r3, [pc, #400]	@ (8000ec0 <bno055_getVector+0x25c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d38:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f010 ff71 	bl	8011c2c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d4e:	2b20      	cmp	r3, #32
 8000d50:	d14c      	bne.n	8000dec <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000d52:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d6c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000d70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d74:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000d78:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d92:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000d96:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d9a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000db8:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000dbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dc0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000dde:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000de2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000de6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000dea:	e038      	b.n	8000e5e <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000dec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e06:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e0e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000e12:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e2c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e34:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000e38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e52:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000e56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e5a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 8000e5e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000e62:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000e76:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000e7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000e7e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000e82:	ec49 8b14 	vmov	d4, r8, r9
 8000e86:	ec45 4b15 	vmov	d5, r4, r5
 8000e8a:	ec41 0b16 	vmov	d6, r0, r1
 8000e8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e92:	eeb0 0b44 	vmov.f64	d0, d4
 8000e96:	eeb0 1b45 	vmov.f64	d1, d5
 8000e9a:	eeb0 2b46 	vmov.f64	d2, d6
 8000e9e:	eeb0 3b47 	vmov.f64	d3, d7
 8000ea2:	3778      	adds	r7, #120	@ 0x78
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000eaa:	bf00      	nop
 8000eac:	3ff00000 	.word	0x3ff00000
 8000eb0:	2400000e 	.word	0x2400000e
 8000eb4:	24000008 	.word	0x24000008
 8000eb8:	2400000a 	.word	0x2400000a
 8000ebc:	2400000c 	.word	0x2400000c
 8000ec0:	24000010 	.word	0x24000010

08000ec4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ec8:	b090      	sub	sp, #64	@ 0x40
 8000eca:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000ecc:	201a      	movs	r0, #26
 8000ece:	f7ff fec9 	bl	8000c64 <bno055_getVector>
 8000ed2:	eeb0 4b40 	vmov.f64	d4, d0
 8000ed6:	eeb0 5b41 	vmov.f64	d5, d1
 8000eda:	eeb0 6b42 	vmov.f64	d6, d2
 8000ede:	eeb0 7b43 	vmov.f64	d7, d3
 8000ee2:	ed87 4b08 	vstr	d4, [r7, #32]
 8000ee6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000eea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000eee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8000ef2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ef6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000efa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000efe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f02:	ec49 8b14 	vmov	d4, r8, r9
 8000f06:	ec45 4b15 	vmov	d5, r4, r5
 8000f0a:	ec41 0b16 	vmov	d6, r0, r1
 8000f0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f12:	eeb0 0b44 	vmov.f64	d0, d4
 8000f16:	eeb0 1b45 	vmov.f64	d1, d5
 8000f1a:	eeb0 2b46 	vmov.f64	d2, d6
 8000f1e:	eeb0 3b47 	vmov.f64	d3, d7
 8000f22:	3740      	adds	r7, #64	@ 0x40
 8000f24:	46bd      	mov	sp, r7
 8000f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000f2c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <bno055_assignI2C+0x1c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	24000204 	.word	0x24000204

08000f4c <bno055_delay>:

void bno055_delay(int time) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fd6e 	bl	8004a38 <HAL_Delay>
#endif
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	733b      	strb	r3, [r7, #12]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80010e8 <bno055_writeData+0x184>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f107 020c 	add.w	r2, r7, #12
 8000f84:	230a      	movs	r3, #10
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	2150      	movs	r1, #80	@ 0x50
 8000f8c:	f004 fe5c 	bl	8005c48 <HAL_I2C_Master_Transmit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80a0 	beq.w	80010dc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d103      	bne.n	8000faa <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000fa2:	4852      	ldr	r0, [pc, #328]	@ (80010ec <bno055_writeData+0x188>)
 8000fa4:	f010 fc62 	bl	801186c <puts>
 8000fa8:	e012      	b.n	8000fd0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d103      	bne.n	8000fb8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000fb0:	484f      	ldr	r0, [pc, #316]	@ (80010f0 <bno055_writeData+0x18c>)
 8000fb2:	f010 fc5b 	bl	801186c <puts>
 8000fb6:	e00b      	b.n	8000fd0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d103      	bne.n	8000fc6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000fbe:	484d      	ldr	r0, [pc, #308]	@ (80010f4 <bno055_writeData+0x190>)
 8000fc0:	f010 fc54 	bl	801186c <puts>
 8000fc4:	e004      	b.n	8000fd0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	484b      	ldr	r0, [pc, #300]	@ (80010f8 <bno055_writeData+0x194>)
 8000fcc:	f010 fbe6 	bl	801179c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000fd0:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <bno055_writeData+0x184>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 f853 	bl	8006080 <HAL_I2C_GetError>
 8000fda:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d07e      	beq.n	80010e0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d103      	bne.n	8000ff0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000fe8:	4844      	ldr	r0, [pc, #272]	@ (80010fc <bno055_writeData+0x198>)
 8000fea:	f010 fc3f 	bl	801186c <puts>
 8000fee:	e02f      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d103      	bne.n	8000ffe <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000ff6:	4842      	ldr	r0, [pc, #264]	@ (8001100 <bno055_writeData+0x19c>)
 8000ff8:	f010 fc38 	bl	801186c <puts>
 8000ffc:	e028      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d103      	bne.n	800100c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001004:	483f      	ldr	r0, [pc, #252]	@ (8001104 <bno055_writeData+0x1a0>)
 8001006:	f010 fc31 	bl	801186c <puts>
 800100a:	e021      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b08      	cmp	r3, #8
 8001010:	d103      	bne.n	800101a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001012:	483d      	ldr	r0, [pc, #244]	@ (8001108 <bno055_writeData+0x1a4>)
 8001014:	f010 fc2a 	bl	801186c <puts>
 8001018:	e01a      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b10      	cmp	r3, #16
 800101e:	d103      	bne.n	8001028 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001020:	483a      	ldr	r0, [pc, #232]	@ (800110c <bno055_writeData+0x1a8>)
 8001022:	f010 fc23 	bl	801186c <puts>
 8001026:	e013      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b20      	cmp	r3, #32
 800102c:	d103      	bne.n	8001036 <bno055_writeData+0xd2>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800102e:	4838      	ldr	r0, [pc, #224]	@ (8001110 <bno055_writeData+0x1ac>)
 8001030:	f010 fc1c 	bl	801186c <puts>
 8001034:	e00c      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b20      	cmp	r3, #32
 800103a:	d103      	bne.n	8001044 <bno055_writeData+0xe0>
	printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800103c:	4835      	ldr	r0, [pc, #212]	@ (8001114 <bno055_writeData+0x1b0>)
 800103e:	f010 fc15 	bl	801186c <puts>
 8001042:	e005      	b.n	8001050 <bno055_writeData+0xec>
  } else if (error != HAL_I2C_ERROR_NONE) {
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <bno055_writeData+0xec>
	printf("HAL_I2C_STATE_ERROR\r\n");
 800104a:	4833      	ldr	r0, [pc, #204]	@ (8001118 <bno055_writeData+0x1b4>)
 800104c:	f010 fc0e 	bl	801186c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <bno055_writeData+0x184>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f005 f805 	bl	8006064 <HAL_I2C_GetState>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]

  if (state == HAL_I2C_STATE_RESET) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001064:	482d      	ldr	r0, [pc, #180]	@ (800111c <bno055_writeData+0x1b8>)
 8001066:	f010 fc01 	bl	801186c <puts>
 800106a:	e03a      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b20      	cmp	r3, #32
 8001070:	d103      	bne.n	800107a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001072:	482a      	ldr	r0, [pc, #168]	@ (800111c <bno055_writeData+0x1b8>)
 8001074:	f010 fbfa 	bl	801186c <puts>
 8001078:	e033      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b24      	cmp	r3, #36	@ 0x24
 800107e:	d103      	bne.n	8001088 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001080:	4827      	ldr	r0, [pc, #156]	@ (8001120 <bno055_writeData+0x1bc>)
 8001082:	f010 fbf3 	bl	801186c <puts>
 8001086:	e02c      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b21      	cmp	r3, #33	@ 0x21
 800108c:	d103      	bne.n	8001096 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800108e:	4825      	ldr	r0, [pc, #148]	@ (8001124 <bno055_writeData+0x1c0>)
 8001090:	f010 fbec 	bl	801186c <puts>
 8001094:	e025      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b22      	cmp	r3, #34	@ 0x22
 800109a:	d103      	bne.n	80010a4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800109c:	4822      	ldr	r0, [pc, #136]	@ (8001128 <bno055_writeData+0x1c4>)
 800109e:	f010 fbe5 	bl	801186c <puts>
 80010a2:	e01e      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b28      	cmp	r3, #40	@ 0x28
 80010a8:	d103      	bne.n	80010b2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80010aa:	4820      	ldr	r0, [pc, #128]	@ (800112c <bno055_writeData+0x1c8>)
 80010ac:	f010 fbde 	bl	801186c <puts>
 80010b0:	e017      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b29      	cmp	r3, #41	@ 0x29
 80010b6:	d103      	bne.n	80010c0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80010b8:	481d      	ldr	r0, [pc, #116]	@ (8001130 <bno055_writeData+0x1cc>)
 80010ba:	f010 fbd7 	bl	801186c <puts>
 80010be:	e010      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010c4:	d103      	bne.n	80010ce <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80010c6:	481b      	ldr	r0, [pc, #108]	@ (8001134 <bno055_writeData+0x1d0>)
 80010c8:	f010 fbd0 	bl	801186c <puts>
 80010cc:	e009      	b.n	80010e2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b60      	cmp	r3, #96	@ 0x60
 80010d2:	d106      	bne.n	80010e2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80010d4:	4818      	ldr	r0, [pc, #96]	@ (8001138 <bno055_writeData+0x1d4>)
 80010d6:	f010 fbc9 	bl	801186c <puts>
 80010da:	e002      	b.n	80010e2 <bno055_writeData+0x17e>
    return;
 80010dc:	bf00      	nop
 80010de:	e000      	b.n	80010e2 <bno055_writeData+0x17e>
    return;
 80010e0:	bf00      	nop
  }

  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000204 	.word	0x24000204
 80010ec:	08016660 	.word	0x08016660
 80010f0:	08016684 	.word	0x08016684
 80010f4:	080166ac 	.word	0x080166ac
 80010f8:	080166d0 	.word	0x080166d0
 80010fc:	080166e8 	.word	0x080166e8
 8001100:	080166fc 	.word	0x080166fc
 8001104:	08016710 	.word	0x08016710
 8001108:	08016724 	.word	0x08016724
 800110c:	08016738 	.word	0x08016738
 8001110:	0801674c 	.word	0x0801674c
 8001114:	08016764 	.word	0x08016764
 8001118:	0801677c 	.word	0x0801677c
 800111c:	08016794 	.word	0x08016794
 8001120:	080167ac 	.word	0x080167ac
 8001124:	080167c0 	.word	0x080167c0
 8001128:	080167d8 	.word	0x080167d8
 800112c:	080167f0 	.word	0x080167f0
 8001130:	08016808 	.word	0x08016808
 8001134:	08016828 	.word	0x08016828
 8001138:	08016848 	.word	0x08016848

0800113c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <bno055_readData+0x40>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	1dfa      	adds	r2, r7, #7
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	2150      	movs	r1, #80	@ 0x50
 800115a:	f004 fd75 	bl	8005c48 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <bno055_readData+0x40>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	b29b      	uxth	r3, r3
 8001166:	2264      	movs	r2, #100	@ 0x64
 8001168:	9200      	str	r2, [sp, #0]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	2150      	movs	r1, #80	@ 0x50
 800116e:	f004 fe83 	bl	8005e78 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000204 	.word	0x24000204

08001180 <computeDeltaCNT>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t computeDeltaCNT(uint16_t current, uint16_t previous) {
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	80bb      	strh	r3, [r7, #4]
	int16_t delta = (int16_t)(current - previous);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b29b      	uxth	r3, r3
 8001198:	81fb      	strh	r3, [r7, #14]
	if (delta > 32767) delta -= 65536;
	else if (delta < -32767) delta += 65536;
 800119a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800119e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
	return delta;
 80011a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <setMotorDirection>:

void setMotorDirection(GPIO_TypeDef *port, uint16_t pin1, uint16_t pin2, uint8_t dir) {
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	817b      	strh	r3, [r7, #10]
 80011c4:	460b      	mov	r3, r1
 80011c6:	813b      	strh	r3, [r7, #8]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
	if (dir < 2) {
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d82e      	bhi.n	8001230 <setMotorDirection+0x7e>
		dir ? (port->ODR |= (1 << pin1)) : (port->ODR &= ~(1 << pin1));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <setMotorDirection+0x3a>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	897a      	ldrh	r2, [r7, #10]
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	431a      	orrs	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	e009      	b.n	8001200 <setMotorDirection+0x4e>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	897a      	ldrh	r2, [r7, #10]
 80011f2:	2101      	movs	r1, #1
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	401a      	ands	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	615a      	str	r2, [r3, #20]
		!dir ? (port->ODR |= (1 << pin2)) : (port->ODR &= ~(1 << pin2));
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <setMotorDirection+0x68>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	893a      	ldrh	r2, [r7, #8]
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	615a      	str	r2, [r3, #20]
	} else {
		port->ODR &= ~(1 << pin1);
		port->ODR &= ~(1 << pin2);
	}
}
 8001218:	e01e      	b.n	8001258 <setMotorDirection+0xa6>
		!dir ? (port->ODR |= (1 << pin2)) : (port->ODR &= ~(1 << pin2));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	43d2      	mvns	r2, r2
 8001228:	401a      	ands	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	615a      	str	r2, [r3, #20]
}
 800122e:	e013      	b.n	8001258 <setMotorDirection+0xa6>
		port->ODR &= ~(1 << pin1);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	897a      	ldrh	r2, [r7, #10]
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	43d2      	mvns	r2, r2
 800123e:	401a      	ands	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	615a      	str	r2, [r3, #20]
		port->ODR &= ~(1 << pin2);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	893a      	ldrh	r2, [r7, #8]
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	615a      	str	r2, [r3, #20]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <computeNecessaryWheelSpeeds>:


int computeNecessaryWheelSpeeds(double phi, double d, double r, double u[4], double phi_dot, double y_dot, double x_dot) {
 8001264:	b580      	push	{r7, lr}
 8001266:	ed2d 8b02 	vpush	{d8}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001272:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001276:	ed87 2b08 	vstr	d2, [r7, #32]
 800127a:	61f8      	str	r0, [r7, #28]
 800127c:	ed87 3b04 	vstr	d3, [r7, #16]
 8001280:	ed87 4b02 	vstr	d4, [r7, #8]
 8001284:	ed87 5b00 	vstr	d5, [r7]
	u[0] = (d * phi_dot + y_dot * cos(phi) - x_dot * sin(phi)) / r;
 8001288:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800128c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001290:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001294:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001298:	f014 fb9e 	bl	80159d8 <cos>
 800129c:	eeb0 6b40 	vmov.f64	d6, d0
 80012a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80012a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80012ac:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012b0:	f014 fbde 	bl	8015a70 <sin>
 80012b4:	eeb0 6b40 	vmov.f64	d6, d0
 80012b8:	ed97 7b00 	vldr	d7, [r7]
 80012bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012c0:	ee38 5b47 	vsub.f64	d5, d8, d7
 80012c4:	ed97 6b08 	vldr	d6, [r7, #32]
 80012c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	ed83 7b00 	vstr	d7, [r3]
    u[1] = (d * phi_dot - x_dot * cos(phi) - y_dot * sin(phi)) / r;
 80012d2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80012d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80012da:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012de:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012e2:	f014 fb79 	bl	80159d8 <cos>
 80012e6:	eeb0 6b40 	vmov.f64	d6, d0
 80012ea:	ed97 7b00 	vldr	d7, [r7]
 80012ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f2:	ee38 8b47 	vsub.f64	d8, d8, d7
 80012f6:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012fa:	f014 fbb9 	bl	8015a70 <sin>
 80012fe:	eeb0 6b40 	vmov.f64	d6, d0
 8001302:	ed97 7b02 	vldr	d7, [r7, #8]
 8001306:	ee26 7b07 	vmul.f64	d7, d6, d7
 800130a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3308      	adds	r3, #8
 8001312:	ed97 6b08 	vldr	d6, [r7, #32]
 8001316:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800131a:	ed83 7b00 	vstr	d7, [r3]
    u[2] = (d * phi_dot - y_dot * cos(phi) + x_dot * sin(phi)) / r;
 800131e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001322:	ed97 7b04 	vldr	d7, [r7, #16]
 8001326:	ee26 8b07 	vmul.f64	d8, d6, d7
 800132a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800132e:	f014 fb53 	bl	80159d8 <cos>
 8001332:	eeb0 6b40 	vmov.f64	d6, d0
 8001336:	ed97 7b02 	vldr	d7, [r7, #8]
 800133a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800133e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8001342:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001346:	f014 fb93 	bl	8015a70 <sin>
 800134a:	eeb0 6b40 	vmov.f64	d6, d0
 800134e:	ed97 7b00 	vldr	d7, [r7]
 8001352:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001356:	ee38 5b07 	vadd.f64	d5, d8, d7
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3310      	adds	r3, #16
 800135e:	ed97 6b08 	vldr	d6, [r7, #32]
 8001362:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001366:	ed83 7b00 	vstr	d7, [r3]
    u[3] = (d * phi_dot + x_dot * cos(phi) + y_dot * sin(phi)) / r;
 800136a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800136e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001372:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001376:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800137a:	f014 fb2d 	bl	80159d8 <cos>
 800137e:	eeb0 6b40 	vmov.f64	d6, d0
 8001382:	ed97 7b00 	vldr	d7, [r7]
 8001386:	ee26 7b07 	vmul.f64	d7, d6, d7
 800138a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800138e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001392:	f014 fb6d 	bl	8015a70 <sin>
 8001396:	eeb0 6b40 	vmov.f64	d6, d0
 800139a:	ed97 7b02 	vldr	d7, [r7, #8]
 800139e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013a2:	ee38 5b07 	vadd.f64	d5, d8, d7
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3318      	adds	r3, #24
 80013aa:	ed97 6b08 	vldr	d6, [r7, #32]
 80013ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013b2:	ed83 7b00 	vstr	d7, [r3]

    return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3738      	adds	r7, #56	@ 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	ecbd 8b02 	vpop	{d8}
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <globalSpeedsFromU>:

int globalSpeedsFromU(double phi, double d, double r, double u[4], double q_dot[3]) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	ed2d 8b02 	vpush	{d8}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	ed87 0b06 	vstr	d0, [r7, #24]
 80013d2:	ed87 1b04 	vstr	d1, [r7, #16]
 80013d6:	ed87 2b02 	vstr	d2, [r7, #8]
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    q_dot[0] = (u[0] + u[1] + u[2] + u[3]) / (4 * d); // Angular velocity
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ed93 6b00 	vldr	d6, [r3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3308      	adds	r3, #8
 80013e8:	ed93 7b00 	vldr	d7, [r3]
 80013ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3310      	adds	r3, #16
 80013f4:	ed93 7b00 	vldr	d7, [r3]
 80013f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3318      	adds	r3, #24
 8001400:	ed93 7b00 	vldr	d7, [r3]
 8001404:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001408:	ed97 7b04 	vldr	d7, [r7, #16]
 800140c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8001410:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001414:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	ed83 7b00 	vstr	d7, [r3]
    q_dot[1] = -cos(phi)*((u[1] - u[3])/2) - sin(phi)*((u[0] - u[2])/2); // X velocity
 800141e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001422:	f014 fad9 	bl	80159d8 <cos>
 8001426:	eeb0 7b40 	vmov.f64	d7, d0
 800142a:	eeb1 6b47 	vneg.f64	d6, d7
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3308      	adds	r3, #8
 8001432:	ed93 5b00 	vldr	d5, [r3]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3318      	adds	r3, #24
 800143a:	ed93 7b00 	vldr	d7, [r3]
 800143e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001442:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8001446:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800144a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800144e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001452:	f014 fb0d 	bl	8015a70 <sin>
 8001456:	eeb0 5b40 	vmov.f64	d5, d0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 6b00 	vldr	d6, [r3]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3310      	adds	r3, #16
 8001464:	ed93 7b00 	vldr	d7, [r3]
 8001468:	ee36 6b47 	vsub.f64	d6, d6, d7
 800146c:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8001470:	ee86 7b04 	vdiv.f64	d7, d6, d4
 8001474:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3308      	adds	r3, #8
 800147c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001480:	ed83 7b00 	vstr	d7, [r3]
    q_dot[2] = cos(phi)*((u[0] - u[2])/2) - sin(phi)*((u[1] - u[3])/2); // Y velocity
 8001484:	ed97 0b06 	vldr	d0, [r7, #24]
 8001488:	f014 faa6 	bl	80159d8 <cos>
 800148c:	eeb0 5b40 	vmov.f64	d5, d0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 6b00 	vldr	d6, [r3]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3310      	adds	r3, #16
 800149a:	ed93 7b00 	vldr	d7, [r3]
 800149e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014a2:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80014a6:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80014aa:	ee25 8b07 	vmul.f64	d8, d5, d7
 80014ae:	ed97 0b06 	vldr	d0, [r7, #24]
 80014b2:	f014 fadd 	bl	8015a70 <sin>
 80014b6:	eeb0 5b40 	vmov.f64	d5, d0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3308      	adds	r3, #8
 80014be:	ed93 6b00 	vldr	d6, [r3]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3318      	adds	r3, #24
 80014c6:	ed93 7b00 	vldr	d7, [r3]
 80014ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014ce:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80014d2:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80014d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3310      	adds	r3, #16
 80014de:	ee38 7b47 	vsub.f64	d7, d8, d7
 80014e2:	ed83 7b00 	vstr	d7, [r3]

    return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	ecbd 8b02 	vpop	{d8}
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80014fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014fe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001500:	bf00      	nop
 8001502:	4b91      	ldr	r3, [pc, #580]	@ (8001748 <main+0x254>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <main+0x24>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	60fa      	str	r2, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	dcf4      	bgt.n	8001502 <main+0xe>
  if ( timeout < 0 )
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da01      	bge.n	8001522 <main+0x2e>
  {
  Error_Handler();
 800151e:	f002 fcff 	bl	8003f20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f003 fa2d 	bl	8004980 <HAL_Init>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 8001526:	4b89      	ldr	r3, [pc, #548]	@ (800174c <main+0x258>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6858      	ldr	r0, [r3, #4]
 800152c:	2300      	movs	r3, #0
 800152e:	2202      	movs	r2, #2
 8001530:	2100      	movs	r1, #0
 8001532:	f010 f9a3 	bl	801187c <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f95d 	bl	80017f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800153a:	4b83      	ldr	r3, [pc, #524]	@ (8001748 <main+0x254>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	4a81      	ldr	r2, [pc, #516]	@ (8001748 <main+0x254>)
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154a:	4b7f      	ldr	r3, [pc, #508]	@ (8001748 <main+0x254>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001558:	2000      	movs	r0, #0
 800155a:	f004 faab 	bl	8005ab4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f004 fac1 	bl	8005ae8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800156a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800156c:	bf00      	nop
 800156e:	4b76      	ldr	r3, [pc, #472]	@ (8001748 <main+0x254>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <main+0x90>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	dcf4      	bgt.n	800156e <main+0x7a>
if ( timeout < 0 )
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da01      	bge.n	800158e <main+0x9a>
{
Error_Handler();
 800158a:	f002 fcc9 	bl	8003f20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158e:	f000 fdbd 	bl	800210c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001592:	f000 fd6f 	bl	8002074 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001596:	f000 fa1b 	bl	80019d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800159a:	f000 fa73 	bl	8001a84 <MX_TIM2_Init>
  MX_TIM4_Init();
 800159e:	f000 fac5 	bl	8001b2c <MX_TIM4_Init>
  MX_TIM5_Init();
 80015a2:	f000 fb19 	bl	8001bd8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015a6:	f000 fb71 	bl	8001c8c <MX_TIM8_Init>
  MX_TIM12_Init();
 80015aa:	f000 fbc9 	bl	8001d40 <MX_TIM12_Init>
  MX_TIM13_Init();
 80015ae:	f000 fc3f 	bl	8001e30 <MX_TIM13_Init>
  MX_TIM14_Init();
 80015b2:	f000 fc8b 	bl	8001ecc <MX_TIM14_Init>
  MX_TIM15_Init();
 80015b6:	f000 fcd7 	bl	8001f68 <MX_TIM15_Init>
  MX_I2C1_Init();
 80015ba:	f000 f9c9 	bl	8001950 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t allOK = 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	72fb      	strb	r3, [r7, #11]
  if (HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) {
 80015c2:	213c      	movs	r1, #60	@ 0x3c
 80015c4:	4862      	ldr	r0, [pc, #392]	@ (8001750 <main+0x25c>)
 80015c6:	f008 fa2f 	bl	8009a28 <HAL_TIM_Encoder_Start>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <main+0xe6>
  	  printf("tim1 fail\n\r");
 80015d0:	4860      	ldr	r0, [pc, #384]	@ (8001754 <main+0x260>)
 80015d2:	f010 f8e3 	bl	801179c <iprintf>
  	  allOK = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK) {
 80015da:	213c      	movs	r1, #60	@ 0x3c
 80015dc:	485e      	ldr	r0, [pc, #376]	@ (8001758 <main+0x264>)
 80015de:	f008 fab1 	bl	8009b44 <HAL_TIM_Encoder_Start_IT>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <main+0xfe>
	  printf("tim2 fail\n\r");
 80015e8:	485c      	ldr	r0, [pc, #368]	@ (800175c <main+0x268>)
 80015ea:	f010 f8d7 	bl	801179c <iprintf>
	  allOK = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK) {
 80015f2:	213c      	movs	r1, #60	@ 0x3c
 80015f4:	485a      	ldr	r0, [pc, #360]	@ (8001760 <main+0x26c>)
 80015f6:	f008 faa5 	bl	8009b44 <HAL_TIM_Encoder_Start_IT>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <main+0x116>
	  printf("tim4 fail\n\r");
 8001600:	4858      	ldr	r0, [pc, #352]	@ (8001764 <main+0x270>)
 8001602:	f010 f8cb 	bl	801179c <iprintf>
	  allOK = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	72fb      	strb	r3, [r7, #11]
  }
  if (HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL) != HAL_OK) {
 800160a:	213c      	movs	r1, #60	@ 0x3c
 800160c:	4856      	ldr	r0, [pc, #344]	@ (8001768 <main+0x274>)
 800160e:	f008 fa0b 	bl	8009a28 <HAL_TIM_Encoder_Start>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <main+0x12e>
	  printf("tim8 fail\n\r");
 8001618:	4854      	ldr	r0, [pc, #336]	@ (800176c <main+0x278>)
 800161a:	f010 f8bf 	bl	801179c <iprintf>
	  allOK = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	72fb      	strb	r3, [r7, #11]
  }

  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1) != HAL_OK)
 8001622:	2100      	movs	r1, #0
 8001624:	4852      	ldr	r0, [pc, #328]	@ (8001770 <main+0x27c>)
 8001626:	f008 f84b 	bl	80096c0 <HAL_TIM_PWM_Start>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <main+0x14a>
  {
  	  printf("tim5 fail\r\n");
 8001630:	4850      	ldr	r0, [pc, #320]	@ (8001774 <main+0x280>)
 8001632:	f010 f91b 	bl	801186c <puts>
  	  allOK = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 800163a:	f002 fc71 	bl	8003f20 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	484d      	ldr	r0, [pc, #308]	@ (8001778 <main+0x284>)
 8001642:	f008 f83d 	bl	80096c0 <HAL_TIM_PWM_Start>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <main+0x166>
  {
  	  printf("tim12 fail\r\n");
 800164c:	484b      	ldr	r0, [pc, #300]	@ (800177c <main+0x288>)
 800164e:	f010 f90d 	bl	801186c <puts>
  	  allOK = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 8001656:	f002 fc63 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4848      	ldr	r0, [pc, #288]	@ (8001780 <main+0x28c>)
 800165e:	f008 f82f 	bl	80096c0 <HAL_TIM_PWM_Start>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <main+0x182>
  {
      printf("tim14 fail\r\n");
 8001668:	4846      	ldr	r0, [pc, #280]	@ (8001784 <main+0x290>)
 800166a:	f010 f8ff 	bl	801186c <puts>
      allOK = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 8001672:	f002 fc55 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4843      	ldr	r0, [pc, #268]	@ (8001788 <main+0x294>)
 800167a:	f008 f821 	bl	80096c0 <HAL_TIM_PWM_Start>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <main+0x19e>
  {
  	  printf("tim3 fail\r\n");
 8001684:	4841      	ldr	r0, [pc, #260]	@ (800178c <main+0x298>)
 8001686:	f010 f8f1 	bl	801186c <puts>
  	  allOK = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	72fb      	strb	r3, [r7, #11]
  	  Error_Handler();
 800168e:	f002 fc47 	bl	8003f20 <Error_Handler>
  }

  if (!allOK) {
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <main+0x1aa>
	  printf(" El diablo \r\n\n\n\n\n\n\n");
 8001698:	483d      	ldr	r0, [pc, #244]	@ (8001790 <main+0x29c>)
 800169a:	f010 f8e7 	bl	801186c <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800169e:	f00c f8df 	bl	800d860 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexUART_Data */
  MutexUART_DataHandle = osMutexNew(&MutexUART_Data_attributes);
 80016a2:	483c      	ldr	r0, [pc, #240]	@ (8001794 <main+0x2a0>)
 80016a4:	f00c f9e8 	bl	800da78 <osMutexNew>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <main+0x2a4>)
 80016ac:	6013      	str	r3, [r2, #0]
  /* Create the queue(s) */
  /* creation of UART_Queue */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  UART_QueueHandle = osMessageQueueNew (5, sizeof(InputData), &UART_Queue_attributes);
 80016ae:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <main+0x2a8>)
 80016b0:	2128      	movs	r1, #40	@ 0x28
 80016b2:	2005      	movs	r0, #5
 80016b4:	f00c fa66 	bl	800db84 <osMessageQueueNew>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a39      	ldr	r2, [pc, #228]	@ (80017a0 <main+0x2ac>)
 80016bc:	6013      	str	r3, [r2, #0]
  UART2CtrlTsk_QueueHandle = osMessageQueueNew (5, sizeof(InputData), &UART2CtrlTsk_Queue_attributes);
 80016be:	4a39      	ldr	r2, [pc, #228]	@ (80017a4 <main+0x2b0>)
 80016c0:	2128      	movs	r1, #40	@ 0x28
 80016c2:	2005      	movs	r0, #5
 80016c4:	f00c fa5e 	bl	800db84 <osMessageQueueNew>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a37      	ldr	r2, [pc, #220]	@ (80017a8 <main+0x2b4>)
 80016cc:	6013      	str	r3, [r2, #0]
  CtrlTsk_QueueHandle = osMessageQueueNew (5, sizeof(CtrlTsk_Data), &CtrlTsk_Queue_attributes);
 80016ce:	4a37      	ldr	r2, [pc, #220]	@ (80017ac <main+0x2b8>)
 80016d0:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80016d4:	2005      	movs	r0, #5
 80016d6:	f00c fa55 	bl	800db84 <osMessageQueueNew>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a34      	ldr	r2, [pc, #208]	@ (80017b0 <main+0x2bc>)
 80016de:	6013      	str	r3, [r2, #0]
  UART2KPIDs_QueueHandle = osMessageQueueNew (5, sizeof(PIDConfig), &UART2KPIDs_Queue_attributes);
 80016e0:	4a34      	ldr	r2, [pc, #208]	@ (80017b4 <main+0x2c0>)
 80016e2:	2154      	movs	r1, #84	@ 0x54
 80016e4:	2005      	movs	r0, #5
 80016e6:	f00c fa4d 	bl	800db84 <osMessageQueueNew>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a32      	ldr	r2, [pc, #200]	@ (80017b8 <main+0x2c4>)
 80016ee:	6013      	str	r3, [r2, #0]
  kpids_UART_TX_QueueHandle = osMessageQueueNew (5, sizeof(PIDConfig), &kpids_UART_TX_Queue_attributes);
 80016f0:	4a32      	ldr	r2, [pc, #200]	@ (80017bc <main+0x2c8>)
 80016f2:	2154      	movs	r1, #84	@ 0x54
 80016f4:	2005      	movs	r0, #5
 80016f6:	f00c fa45 	bl	800db84 <osMessageQueueNew>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a30      	ldr	r2, [pc, #192]	@ (80017c0 <main+0x2cc>)
 80016fe:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001700:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <main+0x2d0>)
 8001702:	2100      	movs	r1, #0
 8001704:	4830      	ldr	r0, [pc, #192]	@ (80017c8 <main+0x2d4>)
 8001706:	f00c f90a 	bl	800d91e <osThreadNew>
 800170a:	4603      	mov	r3, r0
 800170c:	4a2f      	ldr	r2, [pc, #188]	@ (80017cc <main+0x2d8>)
 800170e:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_Task */
  UART_RX_TaskHandle = osThreadNew(start_UART_RX_Task, NULL, &UART_RX_Task_attributes);
 8001710:	4a2f      	ldr	r2, [pc, #188]	@ (80017d0 <main+0x2dc>)
 8001712:	2100      	movs	r1, #0
 8001714:	482f      	ldr	r0, [pc, #188]	@ (80017d4 <main+0x2e0>)
 8001716:	f00c f902 	bl	800d91e <osThreadNew>
 800171a:	4603      	mov	r3, r0
 800171c:	4a2e      	ldr	r2, [pc, #184]	@ (80017d8 <main+0x2e4>)
 800171e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_Task */
  UART_TX_TaskHandle = osThreadNew(Start_UART_TX_Task, NULL, &UART_TX_Task_attributes);
 8001720:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <main+0x2e8>)
 8001722:	2100      	movs	r1, #0
 8001724:	482e      	ldr	r0, [pc, #184]	@ (80017e0 <main+0x2ec>)
 8001726:	f00c f8fa 	bl	800d91e <osThreadNew>
 800172a:	4603      	mov	r3, r0
 800172c:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <main+0x2f0>)
 800172e:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8001730:	4a2d      	ldr	r2, [pc, #180]	@ (80017e8 <main+0x2f4>)
 8001732:	2100      	movs	r1, #0
 8001734:	482d      	ldr	r0, [pc, #180]	@ (80017ec <main+0x2f8>)
 8001736:	f00c f8f2 	bl	800d91e <osThreadNew>
 800173a:	4603      	mov	r3, r0
 800173c:	4a2c      	ldr	r2, [pc, #176]	@ (80017f0 <main+0x2fc>)
 800173e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001740:	f00c f8b2 	bl	800d8a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <main+0x250>
 8001748:	58024400 	.word	0x58024400
 800174c:	2400002c 	.word	0x2400002c
 8001750:	24000368 	.word	0x24000368
 8001754:	08016908 	.word	0x08016908
 8001758:	240003b4 	.word	0x240003b4
 800175c:	08016914 	.word	0x08016914
 8001760:	24000400 	.word	0x24000400
 8001764:	08016920 	.word	0x08016920
 8001768:	24000498 	.word	0x24000498
 800176c:	0801692c 	.word	0x0801692c
 8001770:	2400044c 	.word	0x2400044c
 8001774:	08016938 	.word	0x08016938
 8001778:	240004e4 	.word	0x240004e4
 800177c:	08016944 	.word	0x08016944
 8001780:	2400057c 	.word	0x2400057c
 8001784:	08016950 	.word	0x08016950
 8001788:	240005c8 	.word	0x240005c8
 800178c:	0801695c 	.word	0x0801695c
 8001790:	08016968 	.word	0x08016968
 8001794:	08016e9c 	.word	0x08016e9c
 8001798:	240006bc 	.word	0x240006bc
 800179c:	08016e84 	.word	0x08016e84
 80017a0:	240006b8 	.word	0x240006b8
 80017a4:	08016ec4 	.word	0x08016ec4
 80017a8:	240006c4 	.word	0x240006c4
 80017ac:	08016eac 	.word	0x08016eac
 80017b0:	240006c0 	.word	0x240006c0
 80017b4:	08016edc 	.word	0x08016edc
 80017b8:	240006c8 	.word	0x240006c8
 80017bc:	08016ef4 	.word	0x08016ef4
 80017c0:	240006cc 	.word	0x240006cc
 80017c4:	08016df4 	.word	0x08016df4
 80017c8:	08002239 	.word	0x08002239
 80017cc:	240006a8 	.word	0x240006a8
 80017d0:	08016e18 	.word	0x08016e18
 80017d4:	08002295 	.word	0x08002295
 80017d8:	240006ac 	.word	0x240006ac
 80017dc:	08016e3c 	.word	0x08016e3c
 80017e0:	08002511 	.word	0x08002511
 80017e4:	240006b0 	.word	0x240006b0
 80017e8:	08016e60 	.word	0x08016e60
 80017ec:	08002bf1 	.word	0x08002bf1
 80017f0:	240006b4 	.word	0x240006b4

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b09e      	sub	sp, #120	@ 0x78
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017fe:	224c      	movs	r2, #76	@ 0x4c
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f010 fa12 	bl	8011c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2220      	movs	r2, #32
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f010 fa0b 	bl	8011c2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001816:	2004      	movs	r0, #4
 8001818:	f004 ff7c 	bl	8006714 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <SystemClock_Config+0x150>)
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	4a47      	ldr	r2, [pc, #284]	@ (8001944 <SystemClock_Config+0x150>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800182c:	4b45      	ldr	r3, [pc, #276]	@ (8001944 <SystemClock_Config+0x150>)
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <SystemClock_Config+0x154>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a43      	ldr	r2, [pc, #268]	@ (8001948 <SystemClock_Config+0x154>)
 800183c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <SystemClock_Config+0x154>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800184e:	bf00      	nop
 8001850:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <SystemClock_Config+0x154>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800185c:	d1f8      	bne.n	8001850 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <SystemClock_Config+0x158>)
 8001860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001864:	4a39      	ldr	r2, [pc, #228]	@ (800194c <SystemClock_Config+0x158>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800186e:	4b37      	ldr	r3, [pc, #220]	@ (800194c <SystemClock_Config+0x158>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <SystemClock_Config+0x154>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a30      	ldr	r2, [pc, #192]	@ (8001948 <SystemClock_Config+0x154>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <SystemClock_Config+0x154>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <SystemClock_Config+0x150>)
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	4a2a      	ldr	r2, [pc, #168]	@ (8001944 <SystemClock_Config+0x150>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <SystemClock_Config+0x150>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018ae:	bf00      	nop
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <SystemClock_Config+0x154>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018bc:	d1f8      	bne.n	80018b0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018be:	2301      	movs	r3, #1
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c8:	2302      	movs	r3, #2
 80018ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018cc:	2302      	movs	r3, #2
 80018ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80018d4:	23f0      	movs	r3, #240	@ 0xf0
 80018d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018d8:	2302      	movs	r3, #2
 80018da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80018e4:	2308      	movs	r3, #8
 80018e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 ff67 	bl	80067c8 <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001900:	f002 fb0e 	bl	8003f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	233f      	movs	r3, #63	@ 0x3f
 8001906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2303      	movs	r3, #3
 800190a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001910:	2308      	movs	r3, #8
 8001912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001914:	2340      	movs	r3, #64	@ 0x40
 8001916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001918:	2340      	movs	r3, #64	@ 0x40
 800191a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800191c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001922:	2340      	movs	r3, #64	@ 0x40
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2104      	movs	r1, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f005 fba5 	bl	800707c <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001938:	f002 faf2 	bl	8003f20 <Error_Handler>
  }
}
 800193c:	bf00      	nop
 800193e:	3778      	adds	r7, #120	@ 0x78
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58000400 	.word	0x58000400
 8001948:	58024800 	.word	0x58024800
 800194c:	58024400 	.word	0x58024400

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <MX_I2C1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <MX_I2C1_Init+0x7c>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800198c:	f004 f8c0 	bl	8005b10 <HAL_I2C_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001996:	f002 fac3 	bl	8003f20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199a:	2100      	movs	r1, #0
 800199c:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800199e:	f004 fe21 	bl	80065e4 <HAL_I2CEx_ConfigAnalogFilter>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019a8:	f002 faba 	bl	8003f20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ac:	2100      	movs	r1, #0
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_I2C1_Init+0x74>)
 80019b0:	f004 fe63 	bl	800667a <HAL_I2CEx_ConfigDigitalFilter>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f002 fab1 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24000314 	.word	0x24000314
 80019c8:	40005400 	.word	0x40005400
 80019cc:	00b03fdb 	.word	0x00b03fdb

080019d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2224      	movs	r2, #36	@ 0x24
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f010 f924 	bl	8011c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <MX_TIM1_Init+0xac>)
 80019f0:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <MX_TIM1_Init+0xb0>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <MX_TIM1_Init+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <MX_TIM1_Init+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a22:	2301      	movs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a46:	f007 ff49 	bl	80098dc <HAL_TIM_Encoder_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a50:	f002 fa66 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_TIM1_Init+0xac>)
 8001a66:	f009 f897 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a70:	f002 fa56 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3730      	adds	r7, #48	@ 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24000368 	.word	0x24000368
 8001a80:	40010000 	.word	0x40010000

08001a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	@ 0x30
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2224      	movs	r2, #36	@ 0x24
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f010 f8ca 	bl	8011c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001af6:	f007 fef1 	bl	80098dc <HAL_TIM_Encoder_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b00:	f002 fa0e 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_TIM2_Init+0xa4>)
 8001b12:	f009 f841 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b1c:	f002 fa00 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	@ 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	240003b4 	.word	0x240003b4

08001b2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	@ 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	@ 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f010 f876 	bl	8011c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b4c:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <MX_TIM4_Init+0xa8>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b70:	2303      	movs	r3, #3
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b9c:	f007 fe9e 	bl	80098dc <HAL_TIM_Encoder_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ba6:	f002 f9bb 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001bb8:	f008 ffee 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001bc2:	f002 f9ad 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	@ 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	24000400 	.word	0x24000400
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001bfe:	4a22      	ldr	r2, [pc, #136]	@ (8001c88 <MX_TIM5_Init+0xb0>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c04:	22ef      	movs	r2, #239	@ 0xef
 8001c06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c10:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c22:	4818      	ldr	r0, [pc, #96]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c24:	f007 fcf4 	bl	8009610 <HAL_TIM_PWM_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001c2e:	f002 f977 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4810      	ldr	r0, [pc, #64]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c42:	f008 ffa9 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c4c:	f002 f968 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c50:	2360      	movs	r3, #96	@ 0x60
 8001c52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c68:	f008 f922 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001c72:	f002 f955 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <MX_TIM5_Init+0xac>)
 8001c78:	f002 fba4 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2400044c 	.word	0x2400044c
 8001c88:	40000c00 	.word	0x40000c00

08001c8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	@ 0x30
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2224      	movs	r2, #36	@ 0x24
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00f ffc6 	bl	8011c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cac:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <MX_TIM8_Init+0xb0>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480d      	ldr	r0, [pc, #52]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001d02:	f007 fdeb 	bl	80098dc <HAL_TIM_Encoder_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001d0c:	f002 f908 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_TIM8_Init+0xac>)
 8001d22:	f008 ff39 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d2c:	f002 f8f8 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3730      	adds	r7, #48	@ 0x30
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	24000498 	.word	0x24000498
 8001d3c:	40010400 	.word	0x40010400

08001d40 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d74:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <MX_TIM12_Init+0xec>)
 8001d76:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 239;
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d7a:	22ef      	movs	r2, #239	@ 0xef
 8001d7c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d86:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d8a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d98:	4823      	ldr	r0, [pc, #140]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001d9a:	f007 fb69 	bl	8009470 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001da4:	f002 f8bc 	bl	8003f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001db2:	4619      	mov	r1, r3
 8001db4:	481c      	ldr	r0, [pc, #112]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001db6:	f008 f98f 	bl	800a0d8 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001dc0:	f002 f8ae 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dc4:	4818      	ldr	r0, [pc, #96]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001dc6:	f007 fc23 	bl	8009610 <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001dd0:	f002 f8a6 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4811      	ldr	r0, [pc, #68]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001de4:	f008 fed8 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001dee:	f002 f897 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	@ 0x60
 8001df4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001e0a:	f008 f851 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f002 f884 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MX_TIM12_Init+0xe8>)
 8001e1a:	f002 fad3 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	@ 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	240004e4 	.word	0x240004e4
 8001e2c:	40001800 	.word	0x40001800

08001e30 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec8 <MX_TIM13_Init+0x98>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e50:	22ef      	movs	r2, #239	@ 0xef
 8001e52:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e60:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e6e:	4815      	ldr	r0, [pc, #84]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e70:	f007 fafe 	bl	8009470 <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e7a:	f002 f851 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001e7e:	4811      	ldr	r0, [pc, #68]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001e80:	f007 fbc6 	bl	8009610 <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001e8a:	f002 f849 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8e:	2360      	movs	r3, #96	@ 0x60
 8001e90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001ea6:	f008 f803 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001eb0:	f002 f836 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <MX_TIM13_Init+0x94>)
 8001eb6:	f002 fa85 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8001eba:	bf00      	nop
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	24000530 	.word	0x24000530
 8001ec8:	40001c00 	.word	0x40001c00

08001ecc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <MX_TIM14_Init+0x98>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001eec:	22ef      	movs	r2, #239	@ 0xef
 8001eee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001ef8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001efc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f0a:	4815      	ldr	r0, [pc, #84]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f0c:	f007 fab0 	bl	8009470 <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001f16:	f002 f803 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001f1a:	4811      	ldr	r0, [pc, #68]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f1c:	f007 fb78 	bl	8009610 <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001f26:	f001 fffb 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2a:	2360      	movs	r3, #96	@ 0x60
 8001f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f42:	f007 ffb5 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001f4c:	f001 ffe8 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001f50:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <MX_TIM14_Init+0x94>)
 8001f52:	f002 fa37 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2400057c 	.word	0x2400057c
 8001f64:	40002000 	.word	0x40002000

08001f68 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b096      	sub	sp, #88	@ 0x58
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
 8001f8a:	615a      	str	r2, [r3, #20]
 8001f8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	222c      	movs	r2, #44	@ 0x2c
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00f fe49 	bl	8011c2c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f9a:	4b34      	ldr	r3, [pc, #208]	@ (800206c <MX_TIM15_Init+0x104>)
 8001f9c:	4a34      	ldr	r2, [pc, #208]	@ (8002070 <MX_TIM15_Init+0x108>)
 8001f9e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 239;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fa2:	22ef      	movs	r2, #239	@ 0xef
 8001fa4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fb2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001fc6:	4829      	ldr	r0, [pc, #164]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fc8:	f007 fb22 	bl	8009610 <HAL_TIM_PWM_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f001 ffa5 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001fde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4821      	ldr	r0, [pc, #132]	@ (800206c <MX_TIM15_Init+0x104>)
 8001fe6:	f008 fdd7 	bl	800ab98 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001ff0:	f001 ff96 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff4:	2360      	movs	r3, #96	@ 0x60
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002010:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	4814      	ldr	r0, [pc, #80]	@ (800206c <MX_TIM15_Init+0x104>)
 800201a:	f007 ff49 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002024:	f001 ff7c 	bl	8003f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800203c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002040:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <MX_TIM15_Init+0x104>)
 8002050:	f008 fe30 	bl	800acb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800205a:	f001 ff61 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800205e:	4803      	ldr	r0, [pc, #12]	@ (800206c <MX_TIM15_Init+0x104>)
 8002060:	f002 f9b0 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3758      	adds	r7, #88	@ 0x58
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	240005c8 	.word	0x240005c8
 8002070:	40014000 	.word	0x40014000

08002074 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <MX_USART3_UART_Init+0x94>)
 800207c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b6:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020bc:	4811      	ldr	r0, [pc, #68]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020be:	f008 fe95 	bl	800adec <HAL_UART_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020c8:	f001 ff2a 	bl	8003f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020cc:	2100      	movs	r1, #0
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020d0:	f00b fab7 	bl	800d642 <HAL_UARTEx_SetTxFifoThreshold>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80020da:	f001 ff21 	bl	8003f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4808      	ldr	r0, [pc, #32]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020e2:	f00b faec 	bl	800d6be <HAL_UARTEx_SetRxFifoThreshold>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020ec:	f001 ff18 	bl	8003f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <MX_USART3_UART_Init+0x90>)
 80020f2:	f00b fa6d 	bl	800d5d0 <HAL_UARTEx_DisableFifoMode>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020fc:	f001 ff10 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24000614 	.word	0x24000614
 8002108:	40004800 	.word	0x40004800

0800210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	@ 0x30
 8002110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002122:	4b42      	ldr	r3, [pc, #264]	@ (800222c <MX_GPIO_Init+0x120>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002128:	4a40      	ldr	r2, [pc, #256]	@ (800222c <MX_GPIO_Init+0x120>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002132:	4b3e      	ldr	r3, [pc, #248]	@ (800222c <MX_GPIO_Init+0x120>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002140:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <MX_GPIO_Init+0x120>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002146:	4a39      	ldr	r2, [pc, #228]	@ (800222c <MX_GPIO_Init+0x120>)
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <MX_GPIO_Init+0x120>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <MX_GPIO_Init+0x120>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002164:	4a31      	ldr	r2, [pc, #196]	@ (800222c <MX_GPIO_Init+0x120>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <MX_GPIO_Init+0x120>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <MX_GPIO_Init+0x120>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <MX_GPIO_Init+0x120>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218c:	4b27      	ldr	r3, [pc, #156]	@ (800222c <MX_GPIO_Init+0x120>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <MX_GPIO_Init+0x120>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a0:	4a22      	ldr	r2, [pc, #136]	@ (800222c <MX_GPIO_Init+0x120>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <MX_GPIO_Init+0x120>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b8:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <MX_GPIO_Init+0x120>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021be:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <MX_GPIO_Init+0x120>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <MX_GPIO_Init+0x120>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOD, PD4_Pin|PD5_Pin|PD6_Pin|PD7_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	21f0      	movs	r1, #240	@ 0xf0
 80021da:	4815      	ldr	r0, [pc, #84]	@ (8002230 <MX_GPIO_Init+0x124>)
 80021dc:	f003 fc50 	bl	8005a80 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOE, PE2_Pin|PE4_Pin|PE3_Pin|PE6_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	215c      	movs	r1, #92	@ 0x5c
 80021e4:	4813      	ldr	r0, [pc, #76]	@ (8002234 <MX_GPIO_Init+0x128>)
 80021e6:	f003 fc4b 	bl	8005a80 <HAL_GPIO_WritePin>

   // Declare IN1, IN2, IN3 IN4 of H Bridge, in that order
   GPIO_InitStruct.Pin = PD4_Pin|PD5_Pin|PD6_Pin|PD7_Pin;
 80021ea:	23f0      	movs	r3, #240	@ 0xf0
 80021ec:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f6:	2302      	movs	r3, #2
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	480b      	ldr	r0, [pc, #44]	@ (8002230 <MX_GPIO_Init+0x124>)
 8002202:	f003 fa8d 	bl	8005720 <HAL_GPIO_Init>

   // Declare IN1, IN2, IN3 IN4 of H Bridge, in that order
   GPIO_InitStruct.Pin = PE2_Pin|PE4_Pin|PE3_Pin|PE6_Pin;
 8002206:	235c      	movs	r3, #92	@ 0x5c
 8002208:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	2301      	movs	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002212:	2302      	movs	r3, #2
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	@ (8002234 <MX_GPIO_Init+0x128>)
 800221e:	f003 fa7f 	bl	8005720 <HAL_GPIO_Init>
//   GPIOE->ODR ^= (0x1UL << 3U);
//   GPIOE->ODR ^= (0x1UL << 4U);
//   GPIOE->ODR ^= (0x1UL << 6U);

/* USER CODE END MX_GPIO_Init_2 */
}
 8002222:	bf00      	nop
 8002224:	3730      	adds	r7, #48	@ 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	58024400 	.word	0x58024400
 8002230:	58020c00 	.word	0x58020c00
 8002234:	58021000 	.word	0x58021000

08002238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002240:	2001      	movs	r0, #1
 8002242:	f00b fbfe 	bl	800da42 <osDelay>
 8002246:	e7fb      	b.n	8002240 <StartDefaultTask+0x8>

08002248 <HAL_UART_RxCpltCallback>:
* @param argument: Not used
* @retval None
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <HAL_UART_RxCpltCallback+0x3c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d110      	bne.n	800227c <HAL_UART_RxCpltCallback+0x34>
        // Store received char in ring buffer
        rx_buf[rx_tail] = rx_char;
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_UART_RxCpltCallback+0x40>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0b      	ldr	r2, [pc, #44]	@ (800228c <HAL_UART_RxCpltCallback+0x44>)
 8002260:	7811      	ldrb	r1, [r2, #0]
 8002262:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_UART_RxCpltCallback+0x48>)
 8002264:	54d1      	strb	r1, [r2, r3]
        rx_tail = (rx_tail + 1) % RX_BUF_SIZE;
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <HAL_UART_RxCpltCallback+0x40>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <HAL_UART_RxCpltCallback+0x40>)
 8002270:	6013      	str	r3, [r2, #0]

        // Re-arm UART to receive next char
        HAL_UART_Receive_IT(huart, &rx_char, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	4905      	ldr	r1, [pc, #20]	@ (800228c <HAL_UART_RxCpltCallback+0x44>)
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f008 ff5e 	bl	800b138 <HAL_UART_Receive_IT>
    }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004800 	.word	0x40004800
 8002288:	2400030c 	.word	0x2400030c
 800228c:	24000310 	.word	0x24000310
 8002290:	24000208 	.word	0x24000208

08002294 <start_UART_RX_Task>:
static uint8_t rx_char;               // Temporary char buffer
/* USER CODE END Header_start_UART_RX_Task */


void start_UART_RX_Task(void *argument)
{
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b0fc      	sub	sp, #496	@ 0x1f0
 8002298:	af18      	add	r7, sp, #96	@ 0x60
 800229a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800229e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022a2:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN start_UART_RX_Task */


	char line_buf[RX_BUF_SIZE] = {0};
 80022a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	3304      	adds	r3, #4
 80022b2:	22fc      	movs	r2, #252	@ 0xfc
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00f fcb8 	bl	8011c2c <memset>
	size_t line_index = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	InputData data = {0,0,0,1,1};
 80022c2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022ca:	4a84      	ldr	r2, [pc, #528]	@ (80024dc <start_UART_RX_Task+0x248>)
 80022cc:	461c      	mov	r4, r3
 80022ce:	4615      	mov	r5, r2
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022dc:	e884 0003 	stmia.w	r4, {r0, r1}
	PIDConfig kpids = {
 80022e0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022e8:	4618      	mov	r0, r3
 80022ea:	2354      	movs	r3, #84	@ 0x54
 80022ec:	461a      	mov	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f00f fc9c 	bl	8011c2c <memset>
			{0.0f, 0.0f, 0.0f}
		}
	};

	// Start the first interrupt reception
	HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	497a      	ldr	r1, [pc, #488]	@ (80024e0 <start_UART_RX_Task+0x24c>)
 80022f8:	487a      	ldr	r0, [pc, #488]	@ (80024e4 <start_UART_RX_Task+0x250>)
 80022fa:	f008 ff1d 	bl	800b138 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for (;;) {
		// Check if data is available
		while (rx_head != rx_tail) {
 80022fe:	e0e2      	b.n	80024c6 <start_UART_RX_Task+0x232>
			uint8_t byte = rx_buf[rx_head];
 8002300:	4b79      	ldr	r3, [pc, #484]	@ (80024e8 <start_UART_RX_Task+0x254>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a79      	ldr	r2, [pc, #484]	@ (80024ec <start_UART_RX_Task+0x258>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
			rx_head = (rx_head + 1) % RX_BUF_SIZE;
 800230c:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <start_UART_RX_Task+0x254>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4a74      	ldr	r2, [pc, #464]	@ (80024e8 <start_UART_RX_Task+0x254>)
 8002316:	6013      	str	r3, [r2, #0]

			// End of line detected
			if (byte == '\n' || byte == '\r') {
 8002318:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d004      	beq.n	800232a <start_UART_RX_Task+0x96>
 8002320:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8002324:	2b0d      	cmp	r3, #13
 8002326:	f040 80af 	bne.w	8002488 <start_UART_RX_Task+0x1f4>
				if (line_index > 0) {
 800232a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 809e 	beq.w	8002470 <start_UART_RX_Task+0x1dc>
					line_buf[line_index] = '\0'; // Null-terminate
 8002334:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002338:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800233c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002340:	4413      	add	r3, r2
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
//					printf("📥 Full line received: \"%s\"\r\n", line_buf);

					// Optional: parse float data
					if (sscanf(line_buf, "%lf %lf %lf %lf %lf %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f",
 8002346:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800234a:	f103 0108 	add.w	r1, r3, #8
 800234e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002352:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	3350      	adds	r3, #80	@ 0x50
 800235c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	334c      	adds	r3, #76	@ 0x4c
 8002364:	9316      	str	r3, [sp, #88]	@ 0x58
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	3348      	adds	r3, #72	@ 0x48
 800236c:	9315      	str	r3, [sp, #84]	@ 0x54
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	3344      	adds	r3, #68	@ 0x44
 8002374:	9314      	str	r3, [sp, #80]	@ 0x50
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	3340      	adds	r3, #64	@ 0x40
 800237c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	333c      	adds	r3, #60	@ 0x3c
 8002384:	9312      	str	r3, [sp, #72]	@ 0x48
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	3338      	adds	r3, #56	@ 0x38
 800238c:	9311      	str	r3, [sp, #68]	@ 0x44
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	3334      	adds	r3, #52	@ 0x34
 8002394:	9310      	str	r3, [sp, #64]	@ 0x40
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	3330      	adds	r3, #48	@ 0x30
 800239c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	332c      	adds	r3, #44	@ 0x2c
 80023a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	3328      	adds	r3, #40	@ 0x28
 80023ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	3324      	adds	r3, #36	@ 0x24
 80023b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	3320      	adds	r3, #32
 80023bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	331c      	adds	r3, #28
 80023c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	3318      	adds	r3, #24
 80023cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	3314      	adds	r3, #20
 80023d4:	9308      	str	r3, [sp, #32]
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	3310      	adds	r3, #16
 80023dc:	9307      	str	r3, [sp, #28]
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	330c      	adds	r3, #12
 80023e4:	9306      	str	r3, [sp, #24]
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	3308      	adds	r3, #8
 80023ec:	9305      	str	r3, [sp, #20]
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	3304      	adds	r3, #4
 80023f4:	9304      	str	r3, [sp, #16]
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	9303      	str	r3, [sp, #12]
 80023fc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002400:	3320      	adds	r3, #32
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002408:	3318      	adds	r3, #24
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002410:	3310      	adds	r3, #16
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	460b      	mov	r3, r1
 8002416:	4936      	ldr	r1, [pc, #216]	@ (80024f0 <start_UART_RX_Task+0x25c>)
 8002418:	f00f fb04 	bl	8011a24 <siscanf>
 800241c:	4603      	mov	r3, r0
 800241e:	2b1a      	cmp	r3, #26
 8002420:	d120      	bne.n	8002464 <start_UART_RX_Task+0x1d0>
							   &kpids.u_pid[1].Kp, &kpids.u_pid[1].Ki, &kpids.u_pid[1].Kd,
							   &kpids.u_pid[2].Kp, &kpids.u_pid[2].Ki, &kpids.u_pid[2].Kd,
							   &kpids.u_pid[3].Kp, &kpids.u_pid[3].Ki, &kpids.u_pid[3].Kd) == 26)
					{

						osMessageQueuePut(UART2KPIDs_QueueHandle, &kpids, 0, 0);
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <start_UART_RX_Task+0x260>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f107 010c 	add.w	r1, r7, #12
 800242a:	2300      	movs	r3, #0
 800242c:	2200      	movs	r2, #0
 800242e:	f00b fc1d 	bl	800dc6c <osMessageQueuePut>
						osMessageQueuePut(kpids_UART_TX_QueueHandle, &kpids, 0, 0);
 8002432:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <start_UART_RX_Task+0x264>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f107 010c 	add.w	r1, r7, #12
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	f00b fc15 	bl	800dc6c <osMessageQueuePut>
						osMessageQueuePut(UART_QueueHandle, &data, 0, 0);
 8002442:	4b2e      	ldr	r3, [pc, #184]	@ (80024fc <start_UART_RX_Task+0x268>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800244a:	2300      	movs	r3, #0
 800244c:	2200      	movs	r2, #0
 800244e:	f00b fc0d 	bl	800dc6c <osMessageQueuePut>
						osMessageQueuePut(UART2CtrlTsk_QueueHandle, &data, 0, 0);
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <start_UART_RX_Task+0x26c>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	f00b fc05 	bl	800dc6c <osMessageQueuePut>
 8002462:	e005      	b.n	8002470 <start_UART_RX_Task+0x1dc>
//						printf("✅ Parsed: x=%.2f y=%.2f phi=%.2f d=%.2f r=%.2f\r\n",
//							   data.x_desired, data.y_desired, data.phi_end, data.d, data.r);
					} else {
						printf("❌ Failed to parse: \"%s\"\r\n", line_buf);
 8002464:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002468:	4619      	mov	r1, r3
 800246a:	4826      	ldr	r0, [pc, #152]	@ (8002504 <start_UART_RX_Task+0x270>)
 800246c:	f00f f996 	bl	801179c <iprintf>
					}
				}
				line_index = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
				memset(line_buf, 0, sizeof(line_buf));
 8002476:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800247a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00f fbd3 	bl	8011c2c <memset>
 8002486:	e01e      	b.n	80024c6 <start_UART_RX_Task+0x232>
			}
			else if (line_index < RX_BUF_SIZE - 1) {
 8002488:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800248c:	2bfe      	cmp	r3, #254	@ 0xfe
 800248e:	d80c      	bhi.n	80024aa <start_UART_RX_Task+0x216>
				line_buf[line_index++] = byte;
 8002490:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800249a:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800249e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80024a2:	f897 118b 	ldrb.w	r1, [r7, #395]	@ 0x18b
 80024a6:	54d1      	strb	r1, [r2, r3]
 80024a8:	e00d      	b.n	80024c6 <start_UART_RX_Task+0x232>
			} else {
				// Overflow safety
				line_index = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
				memset(line_buf, 0, sizeof(line_buf));
 80024b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80024b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00f fbb6 	bl	8011c2c <memset>
				printf("⚠️ Line buffer overflowed and reset.\r\n");
 80024c0:	4811      	ldr	r0, [pc, #68]	@ (8002508 <start_UART_RX_Task+0x274>)
 80024c2:	f00f f9d3 	bl	801186c <puts>
		while (rx_head != rx_tail) {
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <start_UART_RX_Task+0x254>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <start_UART_RX_Task+0x278>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	f47f af16 	bne.w	8002300 <start_UART_RX_Task+0x6c>
			}
		}

		osDelay(5); // Cooperative multitasking
 80024d4:	2005      	movs	r0, #5
 80024d6:	f00b fab4 	bl	800da42 <osDelay>
		while (rx_head != rx_tail) {
 80024da:	e7f4      	b.n	80024c6 <start_UART_RX_Task+0x232>
 80024dc:	08016a18 	.word	0x08016a18
 80024e0:	24000310 	.word	0x24000310
 80024e4:	24000614 	.word	0x24000614
 80024e8:	24000308 	.word	0x24000308
 80024ec:	24000208 	.word	0x24000208
 80024f0:	0801697c 	.word	0x0801697c
 80024f4:	240006c8 	.word	0x240006c8
 80024f8:	240006cc 	.word	0x240006cc
 80024fc:	240006b8 	.word	0x240006b8
 8002500:	240006c4 	.word	0x240006c4
 8002504:	080169d0 	.word	0x080169d0
 8002508:	080169ec 	.word	0x080169ec
 800250c:	2400030c 	.word	0x2400030c

08002510 <Start_UART_TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_TX_Task */
void Start_UART_TX_Task(void *argument)
{
 8002510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002514:	ed2d 8b10 	vpush	{d8-d15}
 8002518:	f2ad 4db4 	subw	sp, sp, #1204	@ 0x4b4
 800251c:	af6c      	add	r7, sp, #432	@ 0x1b0
 800251e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8002522:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002526:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_UART_TX_Task */
	  InputData data = {0,0,0,1,1};
 8002528:	4b70      	ldr	r3, [pc, #448]	@ (80026ec <Start_UART_TX_Task+0x1dc>)
 800252a:	f507 7428 	add.w	r4, r7, #672	@ 0x2a0
 800252e:	461d      	mov	r5, r3
 8002530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002538:	e895 0003 	ldmia.w	r5, {r0, r1}
 800253c:	e884 0003 	stmia.w	r4, {r0, r1}
	  CtrlTsk_Data CtrlTsk_data;
	  IMUData      *imu      = &CtrlTsk_data.imu;
 8002540:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002544:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
	  EncoderData  *enc      = &CtrlTsk_data.encoders;
 8002548:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800254c:	3318      	adds	r3, #24
 800254e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
	  Errors       *err      = &CtrlTsk_data.error;
 8002552:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002556:	3358      	adds	r3, #88	@ 0x58
 8002558:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
	  TimeState    *ts       = &CtrlTsk_data.time;
 800255c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002560:	3390      	adds	r3, #144	@ 0x90
 8002562:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
	  OdomData     *odom     = &CtrlTsk_data.odom;
 8002566:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800256a:	33a0      	adds	r3, #160	@ 0xa0
 800256c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
	  CtrlOutData  *ctrl_out = &CtrlTsk_data.ctrl;
 8002570:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002574:	33d0      	adds	r3, #208	@ 0xd0
 8002576:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

	  imu->yaw = 0.0;  imu->roll = 0.0;  imu->pitch = 0.0;
 800257a:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9c1 2300 	strd	r2, r3, [r1]
 800258a:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800259a:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i = 0; i < 4; i++) {
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80025b0:	e022      	b.n	80025f8 <Start_UART_TX_Task+0xe8>
	      enc->cnt_vals[i] = 0;  enc->angleVals[i] = 0.0f;  enc->omegaVals[i] = 0.0;
 80025b2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80025b6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 80025ba:	2100      	movs	r1, #0
 80025bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80025c0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80025c4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80025c8:	3304      	adds	r3, #4
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80025d8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80025dc:	3304      	adds	r3, #4
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	18d1      	adds	r1, r2, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int i = 0; i < 4; i++) {
 80025ee:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80025f2:	3301      	adds	r3, #1
 80025f4:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80025f8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	ddd8      	ble.n	80025b2 <Start_UART_TX_Task+0xa2>
	  }

	  err->err_x = 0.0;  err->err_y = 0.0;  err->err_phi = 0.0;
 8002600:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c1 2300 	strd	r2, r3, [r1]
 8002610:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002620:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  for (int i = 0; i < 4; i++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8002636:	e011      	b.n	800265c <Start_UART_TX_Task+0x14c>
	      err->u_errs[i] = 0.0;
 8002638:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 800263c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002640:	3303      	adds	r3, #3
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	18d1      	adds	r1, r2, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int i = 0; i < 4; i++) {
 8002652:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002656:	3301      	adds	r3, #1
 8002658:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800265c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002660:	2b03      	cmp	r3, #3
 8002662:	dde9      	ble.n	8002638 <Start_UART_TX_Task+0x128>
	  }
	  ts->current = 1;  ts->previous = 0;  ts->delta = osKernelGetTickCount();  ts->print_prev = 1;
 8002664:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	f00b f93e 	bl	800d8f4 <osKernelGetTickCount>
 8002678:	4602      	mov	r2, r0
 800267a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]

	  odom->x_pos = 0.0;  odom->y_pos = 0.0;  odom->phi = 0.0;
 8002688:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c1 2300 	strd	r2, r3, [r1]
 8002698:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026a8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  ctrl_out->x_dot = 4.0;  ctrl_out->y_dot = 6.0;  ctrl_out->phi_dot = 0.0;
 80026b8:	f8d7 12dc 	ldr.w	r1, [r7, #732]	@ 0x2dc
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <Start_UART_TX_Task+0x1e0>)
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]
 80026c6:	f8d7 12dc 	ldr.w	r1, [r7, #732]	@ 0x2dc
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <Start_UART_TX_Task+0x1e4>)
 80026d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026d4:	f8d7 12dc 	ldr.w	r1, [r7, #732]	@ 0x2dc
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  for (int i = 0; i < 4; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80026ea:	e027      	b.n	800273c <Start_UART_TX_Task+0x22c>
 80026ec:	08016a18 	.word	0x08016a18
 80026f0:	40100000 	.word	0x40100000
 80026f4:	40180000 	.word	0x40180000
	      ctrl_out->PWM_vals[i] = 0.0;  ctrl_out->dutyCycles[i] = 0;  ctrl_out->M_dirs[i] = 0;
 80026f8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 80026fc:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002700:	3303      	adds	r3, #3
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	18d1      	adds	r1, r2, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
 8002712:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002716:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 800271a:	321c      	adds	r2, #28
 800271c:	2100      	movs	r1, #0
 800271e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002722:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8002726:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800272a:	4413      	add	r3, r2
 800272c:	3340      	adds	r3, #64	@ 0x40
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 4; i++) {
 8002732:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002736:	3301      	adds	r3, #1
 8002738:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800273c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002740:	2b03      	cmp	r3, #3
 8002742:	ddd9      	ble.n	80026f8 <Start_UART_TX_Task+0x1e8>
	  }

	  PIDConfig kpids = {
 8002744:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8002748:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800274c:	4618      	mov	r0, r3
 800274e:	2354      	movs	r3, #84	@ 0x54
 8002750:	461a      	mov	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f00f fa6a 	bl	8011c2c <memset>
	  		{0.0f, 0.0f, 0.0f},
	  		{0.0f, 0.0f, 0.0f}
	  	}
	    };

	    PIDGains *xPID_K   = &kpids.x_pid;
 8002758:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800275c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
	    PIDGains *yPID_K   = &kpids.y_pid;
 8002760:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002764:	330c      	adds	r3, #12
 8002766:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
	    PIDGains *phiPID_K = &kpids.phi_pid;
 800276a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800276e:	3318      	adds	r3, #24
 8002770:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
	    PIDGains *uPID_K   = kpids.u_pid;
 8002774:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002778:	3324      	adds	r3, #36	@ 0x24
 800277a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc

  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f00b f95f 	bl	800da42 <osDelay>
	osMessageQueueGet(UART_QueueHandle, &data, NULL, osWaitForever);
 8002784:	4be6      	ldr	r3, [pc, #920]	@ (8002b20 <Start_UART_TX_Task+0x610>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f507 7128 	add.w	r1, r7, #672	@ 0x2a0
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
 8002790:	2200      	movs	r2, #0
 8002792:	f00b facb 	bl	800dd2c <osMessageQueueGet>
	osMessageQueueGet(kpids_UART_TX_QueueHandle, &kpids, NULL, osWaitForever);
 8002796:	4be3      	ldr	r3, [pc, #908]	@ (8002b24 <Start_UART_TX_Task+0x614>)
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	2200      	movs	r2, #0
 80027a4:	f00b fac2 	bl	800dd2c <osMessageQueueGet>
	osMessageQueueGet(CtrlTsk_QueueHandle, &CtrlTsk_data, NULL, osWaitForever);
 80027a8:	4bdf      	ldr	r3, [pc, #892]	@ (8002b28 <Start_UART_TX_Task+0x618>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	2200      	movs	r2, #0
 80027b6:	f00b fab9 	bl	800dd2c <osMessageQueueGet>
	// ~60 variables sent
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80027ba:	ed97 7ba8 	vldr	d7, [r7, #672]	@ 0x2a0
 80027be:	ed87 7b40 	vstr	d7, [r7, #256]	@ 0x100
 80027c2:	ed97 7baa 	vldr	d7, [r7, #680]	@ 0x2a8
 80027c6:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
 80027ca:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 80027ce:	ed87 6b3c 	vstr	d6, [r7, #240]	@ 0xf0
 80027d2:	ed97 5bae 	vldr	d5, [r7, #696]	@ 0x2b8
 80027d6:	ed87 5b3a 	vstr	d5, [r7, #232]	@ 0xe8
 80027da:	ed97 4bb0 	vldr	d4, [r7, #704]	@ 0x2c0
 80027de:	ed87 4b38 	vstr	d4, [r7, #224]	@ 0xe0
 80027e2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027e6:	ed93 3b02 	vldr	d3, [r3, #8]
 80027ea:	ed87 3b36 	vstr	d3, [r7, #216]	@ 0xd8
 80027ee:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027f2:	ed93 2b04 	vldr	d2, [r3, #16]
 80027f6:	ed87 2b34 	vstr	d2, [r7, #208]	@ 0xd0
 80027fa:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027fe:	ed93 1b00 	vldr	d1, [r3]
 8002802:	ed87 1b32 	vstr	d1, [r7, #200]	@ 0xc8
			"u1Kp=%.3f,u1Ki=%.3f,u1Kd=%.3f,"
			"u2Kp=%.3f,u2Ki=%.3f,u2Kd=%.3f,"
			"u3Kp=%.3f,u3Ki=%.3f,u3Kd=%.3f\r\n",
			data.x_desired, data.y_desired, data.phi_end, data.d, data.r,
			imu->roll, imu->pitch, imu->yaw,
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 8002806:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800280a:	881b      	ldrh	r3, [r3, #0]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800280c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 8002810:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002814:	885b      	ldrh	r3, [r3, #2]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002816:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 800281a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800281e:	889b      	ldrh	r3, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002820:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			enc->cnt_vals[0], enc->cnt_vals[1], enc->cnt_vals[2], enc->cnt_vals[3],
 8002824:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002828:	88db      	ldrh	r3, [r3, #6]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800282a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800282e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002832:	ed93 0b08 	vldr	d0, [r3, #32]
 8002836:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
 800283a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800283e:	ed93 8b0a 	vldr	d8, [r3, #40]	@ 0x28
 8002842:	ed87 8b2a 	vstr	d8, [r7, #168]	@ 0xa8
 8002846:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800284a:	ed93 9b0c 	vldr	d9, [r3, #48]	@ 0x30
 800284e:	ed87 9b28 	vstr	d9, [r7, #160]	@ 0xa0
 8002852:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002856:	ed93 ab0e 	vldr	d10, [r3, #56]	@ 0x38
 800285a:	ed87 ab26 	vstr	d10, [r7, #152]	@ 0x98
 800285e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002862:	ed93 bb06 	vldr	d11, [r3, #24]
 8002866:	ed87 bb24 	vstr	d11, [r7, #144]	@ 0x90
 800286a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800286e:	ed93 cb08 	vldr	d12, [r3, #32]
 8002872:	ed87 cb22 	vstr	d12, [r7, #136]	@ 0x88
 8002876:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800287a:	ed93 db0a 	vldr	d13, [r3, #40]	@ 0x28
 800287e:	ed87 db20 	vstr	d13, [r7, #128]	@ 0x80
 8002882:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002886:	ed93 eb02 	vldr	d14, [r3, #8]
 800288a:	ed87 eb1e 	vstr	d14, [r7, #120]	@ 0x78
 800288e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002892:	ed93 fb00 	vldr	d15, [r3]
 8002896:	ed87 fb1c 	vstr	d15, [r7, #112]	@ 0x70
 800289a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800289e:	ed93 7b04 	vldr	d7, [r3, #16]
 80028a2:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
 80028a6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80028aa:	ed93 6b00 	vldr	d6, [r3]
 80028ae:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 80028b2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80028b6:	ed93 5b02 	vldr	d5, [r3, #8]
 80028ba:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 80028be:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80028c2:	ed93 4b04 	vldr	d4, [r3, #16]
 80028c6:	ed87 4b14 	vstr	d4, [r7, #80]	@ 0x50
 80028ca:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028ce:	ed93 3b00 	vldr	d3, [r3]
 80028d2:	ed87 3b12 	vstr	d3, [r7, #72]	@ 0x48
 80028d6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028da:	ed93 2b02 	vldr	d2, [r3, #8]
 80028de:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 80028e2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028e6:	ed93 1b04 	vldr	d1, [r3, #16]
 80028ea:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 80028ee:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028f2:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	@ 0x48
 80028f6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028fa:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	@ 0x50
 80028fe:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002902:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8002906:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800290a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800290e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8002918:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800291c:	68de      	ldr	r6, [r3, #12]
 800291e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002922:	689a      	ldr	r2, [r3, #8]
			enc->omegaVals[0], enc->omegaVals[1], enc->omegaVals[2], enc->omegaVals[3],
			odom->q_dot[0],odom->q_dot[1],odom->q_dot[2], odom->phi,odom->x_pos,odom->y_pos, err->err_x, err->err_y, err->err_phi,
			ctrl_out->x_dot, ctrl_out->y_dot, ctrl_out->phi_dot, ctrl_out->u[0], ctrl_out->u[1], ctrl_out->u[2], ctrl_out->u[3],
			ts->current, ts->print_prev, ts->delta, ctrl_out->dutyCycles[0],
 8002924:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002928:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
			ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 800292c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002930:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002932:	633b      	str	r3, [r7, #48]	@ 0x30
			ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 8002934:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002938:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			ctrl_out->dutyCycles[1], ctrl_out->dutyCycles[2], ctrl_out->dutyCycles[3],
 800293c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 8002944:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002948:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800294c:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 8002950:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002954:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002958:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
			xPID_K->Kp, xPID_K->Ki, xPID_K->Kd,
 800295c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002960:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002964:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002968:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800296c:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002970:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002974:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002978:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 800297c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
			yPID_K->Kp, yPID_K->Ki, yPID_K->Kd,
 8002980:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002984:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002988:	eeb7 aae7 	vcvt.f64.f32	d10, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 800298c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8002990:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002994:	eeb7 bae7 	vcvt.f64.f32	d11, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 8002998:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 800299c:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029a0:	eeb7 cae7 	vcvt.f64.f32	d12, s15
			phiPID_K->Kp, phiPID_K->Ki, phiPID_K->Kd,
 80029a4:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 80029a8:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029ac:	eeb7 dae7 	vcvt.f64.f32	d13, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 80029b0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80029b4:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029b8:	eeb7 eae7 	vcvt.f64.f32	d14, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 80029bc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80029c0:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029c4:	eeb7 fae7 	vcvt.f64.f32	d15, s15
			uPID_K[0].Kp, uPID_K[0].Ki, uPID_K[0].Kd,
 80029c8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80029cc:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029d4:	ed87 7b08 	vstr	d7, [r7, #32]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 80029d8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80029dc:	330c      	adds	r3, #12
 80029de:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029e6:	ed87 6b06 	vstr	d6, [r7, #24]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 80029ea:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80029ee:	330c      	adds	r3, #12
 80029f0:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 80029f4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80029f8:	ed87 5b04 	vstr	d5, [r7, #16]
			uPID_K[1].Kp, uPID_K[1].Ki, uPID_K[1].Kd,
 80029fc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a00:	330c      	adds	r3, #12
 8002a02:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a06:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002a0a:	ed87 4b02 	vstr	d4, [r7, #8]
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002a0e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a12:	3318      	adds	r3, #24
 8002a14:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a18:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8002a1c:	ed87 3b00 	vstr	d3, [r7]
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002a20:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a24:	3318      	adds	r3, #24
 8002a26:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a2a:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
			uPID_K[2].Kp, uPID_K[2].Ki, uPID_K[2].Kd,
 8002a2e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a32:	3318      	adds	r3, #24
 8002a34:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a38:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002a3c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a40:	3324      	adds	r3, #36	@ 0x24
 8002a42:	edd3 7a00 	vldr	s15, [r3]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a46:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002a4a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a4e:	3324      	adds	r3, #36	@ 0x24
 8002a50:	edd3 7a01 	vldr	s15, [r3, #4]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			uPID_K[3].Kp, uPID_K[3].Ki, uPID_K[3].Kd);
 8002a58:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002a5c:	3324      	adds	r3, #36	@ 0x24
 8002a5e:	edd3 7a02 	vldr	s15, [r3, #8]
	printf("x_desired=%lf,y_desired=%lf,phi_desired=%lf,d=%lf,r=%lf,"
 8002a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a66:	ed8d 7b6a 	vstr	d7, [sp, #424]	@ 0x1a8
 8002a6a:	ed8d 6b68 	vstr	d6, [sp, #416]	@ 0x1a0
 8002a6e:	ed8d 5b66 	vstr	d5, [sp, #408]	@ 0x198
 8002a72:	ed8d 4b64 	vstr	d4, [sp, #400]	@ 0x190
 8002a76:	ed8d 3b62 	vstr	d3, [sp, #392]	@ 0x188
 8002a7a:	ed97 3b00 	vldr	d3, [r7]
 8002a7e:	ed8d 3b60 	vstr	d3, [sp, #384]	@ 0x180
 8002a82:	ed97 4b02 	vldr	d4, [r7, #8]
 8002a86:	ed8d 4b5e 	vstr	d4, [sp, #376]	@ 0x178
 8002a8a:	ed97 5b04 	vldr	d5, [r7, #16]
 8002a8e:	ed8d 5b5c 	vstr	d5, [sp, #368]	@ 0x170
 8002a92:	ed97 6b06 	vldr	d6, [r7, #24]
 8002a96:	ed8d 6b5a 	vstr	d6, [sp, #360]	@ 0x168
 8002a9a:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a9e:	ed8d 7b58 	vstr	d7, [sp, #352]	@ 0x160
 8002aa2:	ed8d fb56 	vstr	d15, [sp, #344]	@ 0x158
 8002aa6:	ed8d eb54 	vstr	d14, [sp, #336]	@ 0x150
 8002aaa:	ed8d db52 	vstr	d13, [sp, #328]	@ 0x148
 8002aae:	ed8d cb50 	vstr	d12, [sp, #320]	@ 0x140
 8002ab2:	ed8d bb4e 	vstr	d11, [sp, #312]	@ 0x138
 8002ab6:	ed8d ab4c 	vstr	d10, [sp, #304]	@ 0x130
 8002aba:	ed8d 9b4a 	vstr	d9, [sp, #296]	@ 0x128
 8002abe:	ed8d 8b48 	vstr	d8, [sp, #288]	@ 0x120
 8002ac2:	ed8d 0b46 	vstr	d0, [sp, #280]	@ 0x118
 8002ac6:	ed8d 1b44 	vstr	d1, [sp, #272]	@ 0x110
 8002aca:	ed8d 2b42 	vstr	d2, [sp, #264]	@ 0x108
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	9340      	str	r3, [sp, #256]	@ 0x100
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	933f      	str	r3, [sp, #252]	@ 0xfc
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	933e      	str	r3, [sp, #248]	@ 0xf8
 8002ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002adc:	933d      	str	r3, [sp, #244]	@ 0xf4
 8002ade:	923c      	str	r2, [sp, #240]	@ 0xf0
 8002ae0:	963b      	str	r6, [sp, #236]	@ 0xec
 8002ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ae6:	923a      	str	r2, [sp, #232]	@ 0xe8
 8002ae8:	e9cd 0138 	strd	r0, r1, [sp, #224]	@ 0xe0
 8002aec:	e9cd 4536 	strd	r4, r5, [sp, #216]	@ 0xd8
 8002af0:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
 8002af4:	e9cd ab32 	strd	sl, fp, [sp, #200]	@ 0xc8
 8002af8:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8002afc:	ed8d 1b30 	vstr	d1, [sp, #192]	@ 0xc0
 8002b00:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 8002b04:	ed8d 2b2e 	vstr	d2, [sp, #184]	@ 0xb8
 8002b08:	ed97 3b12 	vldr	d3, [r7, #72]	@ 0x48
 8002b0c:	ed8d 3b2c 	vstr	d3, [sp, #176]	@ 0xb0
 8002b10:	ed97 4b14 	vldr	d4, [r7, #80]	@ 0x50
 8002b14:	ed8d 4b2a 	vstr	d4, [sp, #168]	@ 0xa8
 8002b18:	ed97 5b16 	vldr	d5, [r7, #88]	@ 0x58
 8002b1c:	e006      	b.n	8002b2c <Start_UART_TX_Task+0x61c>
 8002b1e:	bf00      	nop
 8002b20:	240006b8 	.word	0x240006b8
 8002b24:	240006cc 	.word	0x240006cc
 8002b28:	240006c0 	.word	0x240006c0
 8002b2c:	ed8d 5b28 	vstr	d5, [sp, #160]	@ 0xa0
 8002b30:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8002b34:	ed8d 6b26 	vstr	d6, [sp, #152]	@ 0x98
 8002b38:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8002b3c:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
 8002b40:	ed97 fb1c 	vldr	d15, [r7, #112]	@ 0x70
 8002b44:	ed8d fb22 	vstr	d15, [sp, #136]	@ 0x88
 8002b48:	ed97 eb1e 	vldr	d14, [r7, #120]	@ 0x78
 8002b4c:	ed8d eb20 	vstr	d14, [sp, #128]	@ 0x80
 8002b50:	ed97 db20 	vldr	d13, [r7, #128]	@ 0x80
 8002b54:	ed8d db1e 	vstr	d13, [sp, #120]	@ 0x78
 8002b58:	ed97 cb22 	vldr	d12, [r7, #136]	@ 0x88
 8002b5c:	ed8d cb1c 	vstr	d12, [sp, #112]	@ 0x70
 8002b60:	ed97 bb24 	vldr	d11, [r7, #144]	@ 0x90
 8002b64:	ed8d bb1a 	vstr	d11, [sp, #104]	@ 0x68
 8002b68:	ed97 ab26 	vldr	d10, [r7, #152]	@ 0x98
 8002b6c:	ed8d ab18 	vstr	d10, [sp, #96]	@ 0x60
 8002b70:	ed97 9b28 	vldr	d9, [r7, #160]	@ 0xa0
 8002b74:	ed8d 9b16 	vstr	d9, [sp, #88]	@ 0x58
 8002b78:	ed97 8b2a 	vldr	d8, [r7, #168]	@ 0xa8
 8002b7c:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8002b80:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8002b84:	ed8d 0b12 	vstr	d0, [sp, #72]	@ 0x48
 8002b88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b8c:	9211      	str	r2, [sp, #68]	@ 0x44
 8002b8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b92:	9210      	str	r2, [sp, #64]	@ 0x40
 8002b94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b98:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002ba0:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8002ba4:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8002ba8:	ed97 2b34 	vldr	d2, [r7, #208]	@ 0xd0
 8002bac:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8002bb0:	ed97 3b36 	vldr	d3, [r7, #216]	@ 0xd8
 8002bb4:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002bb8:	ed97 4b38 	vldr	d4, [r7, #224]	@ 0xe0
 8002bbc:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002bc0:	ed97 5b3a 	vldr	d5, [r7, #232]	@ 0xe8
 8002bc4:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002bc8:	ed97 6b3c 	vldr	d6, [r7, #240]	@ 0xf0
 8002bcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002bd0:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 8002bd4:	ed8d 7b00 	vstr	d7, [sp]
 8002bd8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <Start_UART_TX_Task+0x6dc>)
 8002bde:	f00e fddd 	bl	801179c <iprintf>

    osDelay(10);
 8002be2:	200a      	movs	r0, #10
 8002be4:	f00a ff2d 	bl	800da42 <osDelay>
	osDelay(1);
 8002be8:	bf00      	nop
 8002bea:	e5c8      	b.n	800277e <Start_UART_TX_Task+0x26e>
 8002bec:	08016a40 	.word	0x08016a40

08002bf0 <StartControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002bfc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002c00:	6018      	str	r0, [r3, #0]
  bno055_assignI2C(&hi2c1);
 8002c02:	48c9      	ldr	r0, [pc, #804]	@ (8002f28 <StartControlTask+0x338>)
 8002c04:	f7fe f992 	bl	8000f2c <bno055_assignI2C>
  bno055_setup();
 8002c08:	f7fe f804 	bl	8000c14 <bno055_setup>
  bno055_setOperationModeNDOF();
 8002c0c:	f7fd ffef 	bl	8000bee <bno055_setOperationModeNDOF>
  /* USER CODE BEGIN StartControlTask */
  int16_t deltaEncCounts[4] = {0,0,0,0};
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]

  float PI = 3.141592;
 8002c1a:	4bc4      	ldr	r3, [pc, #784]	@ (8002f2c <StartControlTask+0x33c>)
 8002c1c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278

  const float R_counts = 17380.0;
 8002c20:	4bc3      	ldr	r3, [pc, #780]	@ (8002f30 <StartControlTask+0x340>)
 8002c22:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
  const float Degs_per_count = 360.0 / R_counts;
 8002c26:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8002f34 <StartControlTask+0x344>
 8002c2a:	ed97 7a9d 	vldr	s14, [r7, #628]	@ 0x274
 8002c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c32:	edc7 7a9c 	vstr	s15, [r7, #624]	@ 0x270
  const float Rads_per_count = 2*PI / R_counts;
 8002c36:	edd7 7a9e 	vldr	s15, [r7, #632]	@ 0x278
 8002c3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c3e:	ed97 7a9d 	vldr	s14, [r7, #628]	@ 0x274
 8002c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c46:	edc7 7a9b 	vstr	s15, [r7, #620]	@ 0x26c

  double u_err_trshld = 0.1;
 8002c4a:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002f20 <StartControlTask+0x330>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
//	  for (int j = 0; j < 3; j++) {
//		  uPID_K[i][j] = PID_K_oneM[j];
//	  }
//  }

  float xTrshld = 0.01; // Allowed error cm
 8002c54:	4bb8      	ldr	r3, [pc, #736]	@ (8002f38 <StartControlTask+0x348>)
 8002c56:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  float yTrshld = 0.01; // Allowed error cm
 8002c5a:	4bb7      	ldr	r3, [pc, #732]	@ (8002f38 <StartControlTask+0x348>)
 8002c5c:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  float phiTrshld = 0.01; // Allowed error radians
 8002c60:	4bb5      	ldr	r3, [pc, #724]	@ (8002f38 <StartControlTask+0x348>)
 8002c62:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  double sumKI_x = 0;
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
  double sumKI_y = 0;
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9c7 23a6 	strd	r2, r3, [r7, #664]	@ 0x298
  double sumKI_phi = 0;
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9c7 23a4 	strd	r2, r3, [r7, #656]	@ 0x290
  double sumKI_u_errs[4] = {0,0,0,0};
 8002c8a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002c8e:	2220      	movs	r2, #32
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f00e ffca 	bl	8011c2c <memset>

  double dt = 0;
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248

  bno055_vector_t BNO055_EulerVector = bno055_getVectorEuler();
 8002ca4:	f7fe f90e 	bl	8000ec4 <bno055_getVectorEuler>
 8002ca8:	eeb0 4b40 	vmov.f64	d4, d0
 8002cac:	eeb0 5b41 	vmov.f64	d5, d1
 8002cb0:	eeb0 6b42 	vmov.f64	d6, d2
 8002cb4:	eeb0 7b43 	vmov.f64	d7, d3
 8002cb8:	ed87 4b70 	vstr	d4, [r7, #448]	@ 0x1c0
 8002cbc:	ed87 5b72 	vstr	d5, [r7, #456]	@ 0x1c8
 8002cc0:	ed87 6b74 	vstr	d6, [r7, #464]	@ 0x1d0
 8002cc4:	ed87 7b76 	vstr	d7, [r7, #472]	@ 0x1d8

  int16_t deadzone_duty_lim = 3000;
 8002cc8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ccc:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246
  int16_t max_duty_cycle = 19999;
 8002cd0:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8002cd4:	f8a7 3244 	strh.w	r3, [r7, #580]	@ 0x244

  InputData data = {0,0,0,1,1};
 8002cd8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002cdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ce0:	4a96      	ldr	r2, [pc, #600]	@ (8002f3c <StartControlTask+0x34c>)
 8002ce2:	461c      	mov	r4, r3
 8002ce4:	4615      	mov	r5, r2
 8002ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cf2:	e884 0003 	stmia.w	r4, {r0, r1}
  CtrlTsk_Data CtrlTsk_data;
  IMUData      *imu      = &CtrlTsk_data.imu;
 8002cf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cfa:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  EncoderData  *enc      = &CtrlTsk_data.encoders;
 8002cfe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d02:	3318      	adds	r3, #24
 8002d04:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  Errors       *err      = &CtrlTsk_data.error;
 8002d08:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d0c:	3358      	adds	r3, #88	@ 0x58
 8002d0e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  TimeState    *ts       = &CtrlTsk_data.time;
 8002d12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d16:	3390      	adds	r3, #144	@ 0x90
 8002d18:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  OdomData     *odom     = &CtrlTsk_data.odom;
 8002d1c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d20:	33a0      	adds	r3, #160	@ 0xa0
 8002d22:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  CtrlOutData  *ctrl_out = &CtrlTsk_data.ctrl;
 8002d26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d2a:	33d0      	adds	r3, #208	@ 0xd0
 8002d2c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

  PIDConfig kpids = {
 8002d30:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002d34:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002d38:	4618      	mov	r0, r3
 8002d3a:	2354      	movs	r3, #84	@ 0x54
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f00e ff74 	bl	8011c2c <memset>
		{0.0f, 0.0f, 0.0f},
		{0.0f, 0.0f, 0.0f}
	}
  };

  PIDGains *xPID_K   = &kpids.x_pid;
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  PIDGains *yPID_K   = &kpids.y_pid;
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	330c      	adds	r3, #12
 8002d52:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  PIDGains *phiPID_K = &kpids.phi_pid;
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  PIDGains *uPID_K   = kpids.u_pid;
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	3324      	adds	r3, #36	@ 0x24
 8002d66:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

  imu->yaw = 0.0;  imu->roll = 0.0;  imu->pitch = 0.0;
 8002d6a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9c1 2300 	strd	r2, r3, [r1]
 8002d7a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002d8a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9c1 2304 	strd	r2, r3, [r1, #16]

  for (int i = 0; i < 4; i++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002da0:	e02a      	b.n	8002df8 <StartControlTask+0x208>
      enc->cnt_vals[i] = 0;  enc->prevcnt_vals[i] = 0;  enc->angleVals[i] = 0.0f;  enc->omegaVals[i] = 0.0;
 8002da2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002da6:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8002daa:	2100      	movs	r1, #0
 8002dac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002db0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002db4:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8002db8:	3204      	adds	r2, #4
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002dc0:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8002dc4:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002dc8:	3304      	adds	r3, #4
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8002dd8:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002ddc:	3304      	adds	r3, #4
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	18d1      	adds	r1, r2, r3
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 8002dee:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002df2:	3301      	adds	r3, #1
 8002df4:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002df8:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	ddd0      	ble.n	8002da2 <StartControlTask+0x1b2>
  }

  err->err_x = 0.0;  err->err_y = 0.0;  err->err_phi = 0.0;
 8002e00:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c1 2300 	strd	r2, r3, [r1]
 8002e10:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e20:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (int i = 0; i < 4; i++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002e36:	e011      	b.n	8002e5c <StartControlTask+0x26c>
	  err->u_errs[i] = 0.0;
 8002e38:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8002e3c:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002e40:	3303      	adds	r3, #3
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	18d1      	adds	r1, r2, r3
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 8002e52:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002e56:	3301      	adds	r3, #1
 8002e58:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002e5c:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	dde9      	ble.n	8002e38 <StartControlTask+0x248>
  }
  ts->current = 1;  ts->previous = 0;  ts->delta = osKernelGetTickCount();  ts->print_prev = 1;
 8002e64:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	f00a fd3e 	bl	800d8f4 <osKernelGetTickCount>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002e84:	2201      	movs	r2, #1
 8002e86:	60da      	str	r2, [r3, #12]

  odom->x_pos = 0.0;  odom->y_pos = 0.0;  odom->phi = 0.0; odom->q_dot[0] = 0; odom->q_dot[1] = 0; odom->q_dot[2] = 0;
 8002e88:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9c1 2300 	strd	r2, r3, [r1]
 8002e98:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002ea8:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002eb8:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002ec8:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002ed8:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  ctrl_out->x_dot = 4.0;  ctrl_out->y_dot = 6.0;  ctrl_out->phi_dot = 0.0;
 8002ee8:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <StartControlTask+0x350>)
 8002ef2:	e9c1 2300 	strd	r2, r3, [r1]
 8002ef6:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <StartControlTask+0x354>)
 8002f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f04:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9c1 2304 	strd	r2, r3, [r1, #16]

  for (int i = 0; i < 4; i++) {
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002f1a:	e044      	b.n	8002fa6 <StartControlTask+0x3b6>
 8002f1c:	f3af 8000 	nop.w
 8002f20:	9999999a 	.word	0x9999999a
 8002f24:	3fb99999 	.word	0x3fb99999
 8002f28:	24000314 	.word	0x24000314
 8002f2c:	40490fd8 	.word	0x40490fd8
 8002f30:	4687c800 	.word	0x4687c800
 8002f34:	43b40000 	.word	0x43b40000
 8002f38:	3c23d70a 	.word	0x3c23d70a
 8002f3c:	08016a18 	.word	0x08016a18
 8002f40:	40100000 	.word	0x40100000
 8002f44:	40180000 	.word	0x40180000
      ctrl_out->PWM_vals[i] = 0.0;  ctrl_out->dutyCycles[i] = 0;  ctrl_out->M_dirs[i] = 0;  ctrl_out->u[i] = 0.0;
 8002f48:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8002f4c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002f50:	3303      	adds	r3, #3
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	18d1      	adds	r1, r2, r3
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9c1 2300 	strd	r2, r3, [r1]
 8002f62:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8002f66:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8002f6a:	321c      	adds	r2, #28
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002f72:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8002f76:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3340      	adds	r3, #64	@ 0x40
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8002f86:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002f8a:	3309      	adds	r3, #9
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	18d1      	adds	r1, r2, r3
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 4; i++) {
 8002f9c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002fa6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	ddcc      	ble.n	8002f48 <StartControlTask+0x358>
  }

  osStatus_t queue_status;

  bool simulation_on = true;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b

  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002fb4:	200a      	movs	r0, #10
 8002fb6:	f00a fd44 	bl	800da42 <osDelay>

/*------------------------------------------------------------------------*/
/******* 1. Get angular position and velocity with encoders & IMU *********/
    if (!simulation_on) {
 8002fba:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8161 	beq.w	800328c <StartControlTask+0x69c>
		enc->cnt_vals[0] = TIM1->CNT; enc->cnt_vals[1] = TIM2->CNT; enc->cnt_vals[2] = TIM4->CNT; enc->cnt_vals[3] = TIM8->CNT;
 8002fca:	4bad      	ldr	r3, [pc, #692]	@ (8003280 <StartControlTask+0x690>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002fe2:	805a      	strh	r2, [r3, #2]
 8002fe4:	4ba7      	ldr	r3, [pc, #668]	@ (8003284 <StartControlTask+0x694>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002fee:	809a      	strh	r2, [r3, #4]
 8002ff0:	4ba5      	ldr	r3, [pc, #660]	@ (8003288 <StartControlTask+0x698>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002ffa:	80da      	strh	r2, [r3, #6]

		BNO055_EulerVector = bno055_getVectorEuler();
 8002ffc:	f7fd ff62 	bl	8000ec4 <bno055_getVectorEuler>
 8003000:	eeb0 4b40 	vmov.f64	d4, d0
 8003004:	eeb0 5b41 	vmov.f64	d5, d1
 8003008:	eeb0 6b42 	vmov.f64	d6, d2
 800300c:	eeb0 7b43 	vmov.f64	d7, d3
 8003010:	ed87 4b70 	vstr	d4, [r7, #448]	@ 0x1c0
 8003014:	ed87 5b72 	vstr	d5, [r7, #456]	@ 0x1c8
 8003018:	ed87 6b74 	vstr	d6, [r7, #464]	@ 0x1d0
 800301c:	ed87 7b76 	vstr	d7, [r7, #472]	@ 0x1d8
		imu->yaw = BNO055_EulerVector.x;  imu->roll = BNO055_EulerVector.y;  imu->pitch = BNO055_EulerVector.z;
 8003020:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8003024:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8003028:	e9c1 2300 	strd	r2, r3, [r1]
 800302c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8003030:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8003034:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003038:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 800303c:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8003040:	e9c1 2304 	strd	r2, r3, [r1, #16]

		// Calculate counter difference, considering wrap-around
		deltaEncCounts[0] = computeDeltaCNT(enc->cnt_vals[0], enc->prevcnt_vals[0]);
 8003044:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800304e:	891b      	ldrh	r3, [r3, #8]
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f7fe f894 	bl	8001180 <computeDeltaCNT>
 8003058:	4603      	mov	r3, r0
 800305a:	f8a7 3200 	strh.w	r3, [r7, #512]	@ 0x200
		deltaEncCounts[1] = computeDeltaCNT(enc->cnt_vals[1], enc->prevcnt_vals[1]);
 800305e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003062:	885a      	ldrh	r2, [r3, #2]
 8003064:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003068:	895b      	ldrh	r3, [r3, #10]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7fe f887 	bl	8001180 <computeDeltaCNT>
 8003072:	4603      	mov	r3, r0
 8003074:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
		deltaEncCounts[2] = computeDeltaCNT(enc->cnt_vals[2], enc->prevcnt_vals[2]);
 8003078:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800307c:	889a      	ldrh	r2, [r3, #4]
 800307e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003082:	899b      	ldrh	r3, [r3, #12]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7fe f87a 	bl	8001180 <computeDeltaCNT>
 800308c:	4603      	mov	r3, r0
 800308e:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
		deltaEncCounts[3] = computeDeltaCNT(enc->cnt_vals[3], enc->prevcnt_vals[3]);
 8003092:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003096:	88da      	ldrh	r2, [r3, #6]
 8003098:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800309c:	89db      	ldrh	r3, [r3, #14]
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7fe f86d 	bl	8001180 <computeDeltaCNT>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
	//	printf("TIM1: %d TIM2: %d TIM4: %d TIM8: %d \r\n", CNT_Vals[0],CNT_Vals[1],CNT_Vals[2],CNT_Vals[3]);
		enc->prevcnt_vals[0] = enc->cnt_vals[0]; enc->prevcnt_vals[1] = enc->cnt_vals[1]; enc->prevcnt_vals[2] = enc->cnt_vals[2]; enc->prevcnt_vals[3] = enc->cnt_vals[3];
 80030ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030b6:	811a      	strh	r2, [r3, #8]
 80030b8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030bc:	885a      	ldrh	r2, [r3, #2]
 80030be:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030c2:	815a      	strh	r2, [r3, #10]
 80030c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030c8:	889a      	ldrh	r2, [r3, #4]
 80030ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030ce:	819a      	strh	r2, [r3, #12]
 80030d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030d4:	88da      	ldrh	r2, [r3, #6]
 80030d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030da:	81da      	strh	r2, [r3, #14]

		// Update total angle value
		enc->angleVals[0] += deltaEncCounts[0] * Degs_per_count;
 80030dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80030e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80030e4:	f9b7 3200 	ldrsh.w	r3, [r7, #512]	@ 0x200
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030f0:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003100:	edc3 7a04 	vstr	s15, [r3, #16]
		enc->angleVals[1] += deltaEncCounts[1] * Degs_per_count;
 8003104:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003108:	ed93 7a05 	vldr	s14, [r3, #20]
 800310c:	f9b7 3202 	ldrsh.w	r3, [r7, #514]	@ 0x202
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003118:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 800311c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003128:	edc3 7a05 	vstr	s15, [r3, #20]
		enc->angleVals[2] += deltaEncCounts[2] * Degs_per_count;
 800312c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003130:	ed93 7a06 	vldr	s14, [r3, #24]
 8003134:	f9b7 3204 	ldrsh.w	r3, [r7, #516]	@ 0x204
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003140:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 8003144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003150:	edc3 7a06 	vstr	s15, [r3, #24]
		enc->angleVals[3] += deltaEncCounts[3] * Degs_per_count;
 8003154:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003158:	ed93 7a07 	vldr	s14, [r3, #28]
 800315c:	f9b7 3206 	ldrsh.w	r3, [r7, #518]	@ 0x206
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003168:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 800316c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003178:	edc3 7a07 	vstr	s15, [r3, #28]

		// Calculate velocities
		ts->print_prev = ts->previous;
 800317c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003186:	60da      	str	r2, [r3, #12]
		ts->current = osKernelGetTickCount();
 8003188:	f00a fbb4 	bl	800d8f4 <osKernelGetTickCount>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003192:	601a      	str	r2, [r3, #0]
		ts->delta = ts->current - ts->previous;
 8003194:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031a6:	609a      	str	r2, [r3, #8]
		ts->previous = ts->current;
 80031a8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031b2:	605a      	str	r2, [r3, #4]
		//	printf(" currentTime: %lu prevTime: %lu deltaTime: %lu", currentTime, prevTime, deltaTime);

		enc->omegaVals[0] = deltaEncCounts[0] * Rads_per_count / ts->delta;
 80031b4:	f9b7 3200 	ldrsh.w	r3, [r7, #512]	@ 0x200
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c0:	edd7 7a9b 	vldr	s15, [r7, #620]	@ 0x26c
 80031c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031de:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80031e2:	ed83 7b08 	vstr	d7, [r3, #32]
		enc->omegaVals[1] = deltaEncCounts[1] * Rads_per_count / ts->delta;
 80031e6:	f9b7 3202 	ldrsh.w	r3, [r7, #514]	@ 0x202
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f2:	edd7 7a9b 	vldr	s15, [r7, #620]	@ 0x26c
 80031f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031fa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003210:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003214:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
		enc->omegaVals[2] = deltaEncCounts[2] * Rads_per_count / ts->delta;
 8003218:	f9b7 3204 	ldrsh.w	r3, [r7, #516]	@ 0x204
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003224:	edd7 7a9b 	vldr	s15, [r7, #620]	@ 0x26c
 8003228:	ee67 6a27 	vmul.f32	s13, s14, s15
 800322c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800323a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800323e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003242:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003246:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
		enc->omegaVals[3] = deltaEncCounts[3] * Rads_per_count / ts->delta;
 800324a:	f9b7 3206 	ldrsh.w	r3, [r7, #518]	@ 0x206
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003256:	edd7 7a9b 	vldr	s15, [r7, #620]	@ 0x26c
 800325a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800325e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003274:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003278:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
 800327c:	e116      	b.n	80034ac <StartControlTask+0x8bc>
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000800 	.word	0x40000800
 8003288:	40010400 	.word	0x40010400
    } else {
		BNO055_EulerVector = bno055_getVectorEuler();
 800328c:	f7fd fe1a 	bl	8000ec4 <bno055_getVectorEuler>
 8003290:	eeb0 4b40 	vmov.f64	d4, d0
 8003294:	eeb0 5b41 	vmov.f64	d5, d1
 8003298:	eeb0 6b42 	vmov.f64	d6, d2
 800329c:	eeb0 7b43 	vmov.f64	d7, d3
 80032a0:	ed87 4b70 	vstr	d4, [r7, #448]	@ 0x1c0
 80032a4:	ed87 5b72 	vstr	d5, [r7, #456]	@ 0x1c8
 80032a8:	ed87 6b74 	vstr	d6, [r7, #464]	@ 0x1d0
 80032ac:	ed87 7b76 	vstr	d7, [r7, #472]	@ 0x1d8
		imu->yaw = BNO055_EulerVector.x;  imu->roll = BNO055_EulerVector.y;  imu->pitch = BNO055_EulerVector.z;
 80032b0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80032b4:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 80032b8:	e9c1 2300 	strd	r2, r3, [r1]
 80032bc:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80032c0:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 80032c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032c8:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80032cc:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 80032d0:	e9c1 2304 	strd	r2, r3, [r1, #16]

    	ts->print_prev = ts->previous;
 80032d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032de:	60da      	str	r2, [r3, #12]
		ts->current = osKernelGetTickCount();
 80032e0:	f00a fb08 	bl	800d8f4 <osKernelGetTickCount>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032ea:	601a      	str	r2, [r3, #0]
		ts->delta = ts->current - ts->previous;
 80032ec:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032fe:	609a      	str	r2, [r3, #8]
		ts->previous = ts->current;
 8003300:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800330a:	605a      	str	r2, [r3, #4]

		// Simple first-order simulation model: omega approaches u with time
		float tau = 0.1f;  // time constant for motor response
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <StartControlTask+0x760>)
 800330e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		float alpha = ts->delta / (1000.0f * tau + ts->delta);  // convert delta to seconds
 8003312:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003320:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8003324:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003354 <StartControlTask+0x764>
 8003328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800332c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003342:	edc7 7a84 	vstr	s15, [r7, #528]	@ 0x210

    	for (int i = 0; i < 4; i++) {
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800334c:	e0a9      	b.n	80034a2 <StartControlTask+0x8b2>
 800334e:	bf00      	nop
 8003350:	3dcccccd 	.word	0x3dcccccd
 8003354:	447a0000 	.word	0x447a0000
    	    enc->omegaVals[i] = (1 - alpha) * enc->omegaVals[i] + alpha * ctrl_out->u[i];
 8003358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800335c:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003368:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800336c:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8003370:	3304      	adds	r3, #4
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	ed93 7b00 	vldr	d7, [r3]
 800337a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800337e:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8003382:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003386:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800338a:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 800338e:	3309      	adds	r3, #9
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	ed93 7b00 	vldr	d7, [r3]
 8003398:	ee25 7b07 	vmul.f64	d7, d5, d7
 800339c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033a0:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80033a4:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80033a8:	3304      	adds	r3, #4
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	ed83 7b00 	vstr	d7, [r3]

    	    // Update total angle by integrating omega
    	    float dt = ts->delta / 1000.0f;  // ms to s
 80033b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c0:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8003354 <StartControlTask+0x764>
 80033c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c8:	edc7 7a83 	vstr	s15, [r7, #524]	@ 0x20c
    	    enc->angleVals[i] += enc->omegaVals[i] * dt;
 80033cc:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80033d0:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80033d4:	3304      	adds	r3, #4
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80033e2:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80033e6:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80033ea:	3304      	adds	r3, #4
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	ed93 5b00 	vldr	d5, [r3]
 80033f4:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 80033f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003400:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003404:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003408:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800340c:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8003410:	3304      	adds	r3, #4
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	edc3 7a00 	vstr	s15, [r3]

    	    // Simulate counts from angle
    	    enc->cnt_vals[i] = (uint16_t)(enc->angleVals[i] / Degs_per_count) % 65536;
 800341a:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800341e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8003422:	3304      	adds	r3, #4
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	edd3 6a00 	vldr	s13, [r3]
 800342c:	ed97 7a9c 	vldr	s14, [r7, #624]	@ 0x270
 8003430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003438:	ee17 3a90 	vmov	r3, s15
 800343c:	b299      	uxth	r1, r3
 800343e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003442:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8003446:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	    deltaEncCounts[i] = computeDeltaCNT(enc->cnt_vals[i], enc->prevcnt_vals[i]);
 800344a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800344e:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8003452:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003456:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800345a:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 800345e:	3204      	adds	r2, #4
 8003460:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003464:	4619      	mov	r1, r3
 8003466:	f7fd fe8b 	bl	8001180 <computeDeltaCNT>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8003478:	443b      	add	r3, r7
 800347a:	f823 2ca8 	strh.w	r2, [r3, #-168]
    	    enc->prevcnt_vals[i] = enc->cnt_vals[i];
 800347e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003482:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8003486:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800348a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800348e:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8003492:	3204      	adds	r2, #4
 8003494:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < 4; i++) {
 8003498:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 800349c:	3301      	adds	r3, #1
 800349e:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80034a2:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f77f af56 	ble.w	8003358 <StartControlTask+0x768>


/*------------------------------------------------------------------------*/
/**************** 2. Receive desired pose/pidKs from UART *****************/

	osMessageQueueGet(UART2CtrlTsk_QueueHandle, &data, NULL, osWaitForever);
 80034ac:	4bd1      	ldr	r3, [pc, #836]	@ (80037f4 <StartControlTask+0xc04>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	2200      	movs	r2, #0
 80034ba:	f00a fc37 	bl	800dd2c <osMessageQueueGet>
	osMessageQueueGet(UART2KPIDs_QueueHandle, &kpids, NULL, osWaitForever);
 80034be:	4bce      	ldr	r3, [pc, #824]	@ (80037f8 <StartControlTask+0xc08>)
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f107 010c 	add.w	r1, r7, #12
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	2200      	movs	r2, #0
 80034cc:	f00a fc2e 	bl	800dd2c <osMessageQueueGet>
/*------------------------------------------------------------------------*/


/*------------------------------------------------------------------------*/
/************************** 3. Compute errors *****************************/
	err->err_x = data.x_desired - odom->x_pos;
 80034d0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80034d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034d8:	ed93 6b00 	vldr	d6, [r3]
 80034dc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80034e0:	ed93 7b00 	vldr	d7, [r3]
 80034e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80034e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80034ec:	ed83 7b00 	vstr	d7, [r3]
	err->err_y = data.y_desired - odom->y_pos;
 80034f0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80034f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034f8:	ed93 6b02 	vldr	d6, [r3, #8]
 80034fc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003500:	ed93 7b04 	vldr	d7, [r3, #16]
 8003504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003508:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800350c:	ed83 7b02 	vstr	d7, [r3, #8]
	//phi_desired = atan2(Err_y, Err_x); /*<-- Unnecessary? ony for diff drive?*/

	/* POTENTIALLY READ IMU HERE (TO UPDATE PHI)*/
	err->err_phi = data.phi_end - odom->phi;
 8003510:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003514:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003518:	ed93 6b04 	vldr	d6, [r3, #16]
 800351c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003520:	ed93 7b02 	vldr	d7, [r3, #8]
 8003524:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003528:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800352c:	ed83 7b04 	vstr	d7, [r3, #16]
/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/
/***************************** 4. POSE PIDs *******************************/

	if (abs(err->err_x) > xTrshld){
 8003530:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003534:	ed93 7b00 	vldr	d7, [r3]
 8003538:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800353c:	ee17 3a90 	vmov	r3, s15
 8003540:	2b00      	cmp	r3, #0
 8003542:	bfb8      	it	lt
 8003544:	425b      	neglt	r3, r3
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354e:	ed97 7a97 	vldr	s14, [r7, #604]	@ 0x25c
 8003552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	d54d      	bpl.n	80035f8 <StartControlTask+0xa08>
		sumKI_x += err->err_x * ts->delta;
 800355c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003560:	ed93 6b00 	vldr	d6, [r3]
 8003564:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003572:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003576:	ed97 6ba8 	vldr	d6, [r7, #672]	@ 0x2a0
 800357a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800357e:	ed87 7ba8 	vstr	d7, [r7, #672]	@ 0x2a0
		ctrl_out->x_dot = xPID_K->Kp*err->err_x + xPID_K->Ki*sumKI_x + xPID_K->Kd * (err->err_x / ts->delta);
 8003582:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800358e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003592:	ed93 7b00 	vldr	d7, [r3]
 8003596:	ee26 6b07 	vmul.f64	d6, d6, d7
 800359a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800359e:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80035a6:	ed97 7ba8 	vldr	d7, [r7, #672]	@ 0x2a0
 80035aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035b2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80035b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80035be:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80035c2:	ed93 3b00 	vldr	d3, [r3]
 80035c6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 80035d4:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80035d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035e0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80035e4:	ed83 7b00 	vstr	d7, [r3]
		ctrl_out->phi_dot = 0;
 80035e8:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

	if (abs(err->err_y) > yTrshld){
 80035f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80035fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8003600:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003604:	ee17 3a90 	vmov	r3, s15
 8003608:	2b00      	cmp	r3, #0
 800360a:	bfb8      	it	lt
 800360c:	425b      	neglt	r3, r3
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003616:	ed97 7a96 	vldr	s14, [r7, #600]	@ 0x258
 800361a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	d54d      	bpl.n	80036c0 <StartControlTask+0xad0>
		sumKI_y += err->err_y * ts->delta;
 8003624:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003628:	ed93 6b02 	vldr	d6, [r3, #8]
 800362c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800363a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800363e:	ed97 6ba6 	vldr	d6, [r7, #664]	@ 0x298
 8003642:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003646:	ed87 7ba6 	vstr	d7, [r7, #664]	@ 0x298
		ctrl_out->y_dot = yPID_K->Kp*err->err_y + yPID_K->Ki*sumKI_y + yPID_K->Kd * (err->err_y / ts->delta);
 800364a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003656:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800365a:	ed93 7b02 	vldr	d7, [r3, #8]
 800365e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003662:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8003666:	edd3 7a01 	vldr	s15, [r3, #4]
 800366a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800366e:	ed97 7ba6 	vldr	d7, [r7, #664]	@ 0x298
 8003672:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003676:	ee36 6b07 	vadd.f64	d6, d6, d7
 800367a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800367e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003682:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003686:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800368a:	ed93 3b02 	vldr	d3, [r3, #8]
 800368e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 800369c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80036a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80036a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80036ac:	ed83 7b02 	vstr	d7, [r3, #8]
		ctrl_out->phi_dot = 0;
 80036b0:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

	if (abs(err->err_x) <= xTrshld && abs(err->err_y) <= yTrshld) {
 80036c0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80036c4:	ed93 7b00 	vldr	d7, [r3]
 80036c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80036cc:	ee17 3a90 	vmov	r3, s15
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bfb8      	it	lt
 80036d4:	425b      	neglt	r3, r3
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036de:	ed97 7a97 	vldr	s14, [r7, #604]	@ 0x25c
 80036e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	f2c0 8087 	blt.w	80037fc <StartControlTask+0xc0c>
 80036ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80036f2:	ed93 7b02 	vldr	d7, [r3, #8]
 80036f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfb8      	it	lt
 8003702:	425b      	neglt	r3, r3
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800370c:	ed97 7a96 	vldr	s14, [r7, #600]	@ 0x258
 8003710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	db70      	blt.n	80037fc <StartControlTask+0xc0c>
		ctrl_out->x_dot = 0;
 800371a:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c1 2300 	strd	r2, r3, [r1]
		ctrl_out->y_dot = 0;
 800372a:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9c1 2302 	strd	r2, r3, [r1, #8]

		if (abs(err->err_phi) > phiTrshld){
 800373a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800373e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003742:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003746:	ee17 3a90 	vmov	r3, s15
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	425b      	neglt	r3, r3
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003758:	ed97 7a95 	vldr	s14, [r7, #596]	@ 0x254
 800375c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003764:	d54a      	bpl.n	80037fc <StartControlTask+0xc0c>
			sumKI_phi += err->err_phi * ts->delta;
 8003766:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800376a:	ed93 6b04 	vldr	d6, [r3, #16]
 800376e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800377c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003780:	ed97 6ba4 	vldr	d6, [r7, #656]	@ 0x290
 8003784:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003788:	ed87 7ba4 	vstr	d7, [r7, #656]	@ 0x290
			ctrl_out->phi_dot = phiPID_K->Kp*err->err_phi + phiPID_K->Ki*sumKI_phi + phiPID_K->Kd * (err->err_phi / ts->delta);
 800378c:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003798:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800379c:	ed93 7b04 	vldr	d7, [r3, #16]
 80037a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80037a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80037a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037b0:	ed97 7ba4 	vldr	d7, [r7, #656]	@ 0x290
 80037b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80037b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80037c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80037c4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80037cc:	ed93 3b04 	vldr	d3, [r3, #16]
 80037d0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 80037de:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80037e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80037e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037ea:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80037ee:	ed83 7b04 	vstr	d7, [r3, #16]
 80037f2:	e003      	b.n	80037fc <StartControlTask+0xc0c>
 80037f4:	240006c4 	.word	0x240006c4
 80037f8:	240006c8 	.word	0x240006c8
		}
	}

	if (abs(err->err_x) <= xTrshld && abs(err->err_y) <= yTrshld && abs(err->err_phi) <= phiTrshld){
 80037fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003800:	ed93 7b00 	vldr	d7, [r3]
 8003804:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003808:	ee17 3a90 	vmov	r3, s15
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfb8      	it	lt
 8003810:	425b      	neglt	r3, r3
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381a:	ed97 7a97 	vldr	s14, [r7, #604]	@ 0x25c
 800381e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	db55      	blt.n	80038d4 <StartControlTask+0xce4>
 8003828:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800382c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003830:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfb8      	it	lt
 800383c:	425b      	neglt	r3, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003846:	ed97 7a96 	vldr	s14, [r7, #600]	@ 0x258
 800384a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003852:	db3f      	blt.n	80038d4 <StartControlTask+0xce4>
 8003854:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8003858:	ed93 7b04 	vldr	d7, [r3, #16]
 800385c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003860:	ee17 3a90 	vmov	r3, s15
 8003864:	2b00      	cmp	r3, #0
 8003866:	bfb8      	it	lt
 8003868:	425b      	neglt	r3, r3
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003872:	ed97 7a95 	vldr	s14, [r7, #596]	@ 0x254
 8003876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	db29      	blt.n	80038d4 <StartControlTask+0xce4>

		ctrl_out->x_dot = 0;
 8003880:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9c1 2300 	strd	r2, r3, [r1]
		ctrl_out->y_dot = 0;
 8003890:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ctrl_out->phi_dot = 0;
 80038a0:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		sumKI_x = 0; sumKI_y = 0; sumKI_phi = 0;
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9c7 23a6 	strd	r2, r3, [r7, #664]	@ 0x298
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9c7 23a4 	strd	r2, r3, [r7, #656]	@ 0x290

//	printf("Calling computeWheelSpeeds(phi=%.2f, d=%.2f, r=%.2f, phi_dot=%.2f, y_dot=%.2f, x_dot=%.2f)\r\n",
//	       0.0, 1.0, 1.0, 0.0, 3.0, 6.0);

//	computeNecessaryWheelSpeeds(0.0, data.d, data.r, ctrl_out->u, 0.0, 3.0, 6.0);
	computeNecessaryWheelSpeeds(odom->phi, data.d, data.r, ctrl_out->u, ctrl_out->phi_dot, ctrl_out->y_dot, ctrl_out->x_dot);
 80038d4:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80038d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80038dc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80038e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038e4:	ed93 6b06 	vldr	d6, [r3, #24]
 80038e8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80038ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038f0:	ed93 2b08 	vldr	d2, [r3, #32]
 80038f4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80038f8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80038fc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003900:	ed93 3b04 	vldr	d3, [r3, #16]
 8003904:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003908:	ed93 4b02 	vldr	d4, [r3, #8]
 800390c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003910:	ed93 5b00 	vldr	d5, [r3]
 8003914:	4610      	mov	r0, r2
 8003916:	eeb0 1b46 	vmov.f64	d1, d6
 800391a:	eeb0 0b47 	vmov.f64	d0, d7
 800391e:	f7fd fca1 	bl	8001264 <computeNecessaryWheelSpeeds>
/*------------------------------------------------------------------------*/
/***************************** 6. MOTOR PIDs *******************************/



	for (int i = 0; i < 4; i++) {
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8003928:	e1da      	b.n	8003ce0 <StartControlTask+0x10f0>
		err->u_errs[i] = ctrl_out->u[i] - enc->omegaVals[i];
 800392a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800392e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003932:	3309      	adds	r3, #9
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	ed93 6b00 	vldr	d6, [r3]
 800393c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8003940:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003944:	3304      	adds	r3, #4
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	ed93 7b00 	vldr	d7, [r3]
 800394e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003952:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8003956:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800395a:	3303      	adds	r3, #3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	ed83 7b00 	vstr	d7, [r3]
		if (abs(err->u_errs[i]) > u_err_trshld){
 8003964:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8003968:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800396c:	3303      	adds	r3, #3
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	ed93 7b00 	vldr	d7, [r3]
 8003976:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800397a:	ee17 3a90 	vmov	r3, s15
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	425b      	neglt	r3, r3
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800398c:	ed97 6b98 	vldr	d6, [r7, #608]	@ 0x260
 8003990:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	f140 8088 	bpl.w	8003aac <StartControlTask+0xebc>
			sumKI_u_errs[i] += err->u_errs[i] * ts->delta;
 800399c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80039a6:	443b      	add	r3, r7
 80039a8:	3bc8      	subs	r3, #200	@ 0xc8
 80039aa:	ed93 6b00 	vldr	d6, [r3]
 80039ae:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80039b2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80039b6:	3303      	adds	r3, #3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	ed93 5b00 	vldr	d5, [r3]
 80039c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039d6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80039e0:	443b      	add	r3, r7
 80039e2:	3bc8      	subs	r3, #200	@ 0xc8
 80039e4:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->PWM_vals[i] = uPID_K[i].Kp*err->u_errs[i] + uPID_K[i].Ki*sumKI_u_errs[i] + uPID_K[i].Kd * (err->u_errs[i] / ts->delta);
 80039e8:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	461a      	mov	r2, r3
 80039f6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80039fa:	4413      	add	r3, r2
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a04:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8003a08:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003a0c:	3303      	adds	r3, #3
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	ed93 7b00 	vldr	d7, [r3]
 8003a16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a1a:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a2c:	4413      	add	r3, r2
 8003a2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a32:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003a36:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8003a40:	443b      	add	r3, r7
 8003a42:	3bc8      	subs	r3, #200	@ 0xc8
 8003a44:	ed93 7b00 	vldr	d7, [r3]
 8003a48:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a50:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a62:	4413      	add	r3, r2
 8003a64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a68:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003a6c:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8003a70:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003a74:	3303      	adds	r3, #3
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	ed93 3b00 	vldr	d3, [r3]
 8003a7e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8003a8c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003a90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a98:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003a9c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003aa0:	3303      	adds	r3, #3
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	ed83 7b00 	vstr	d7, [r3]
 8003aaa:	e00d      	b.n	8003ac8 <StartControlTask+0xed8>
		}
		else {
			sumKI_u_errs[i] = 0; // Reset Integral part if error small
 8003aac:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8003ab6:	443b      	add	r3, r7
 8003ab8:	f1a3 01c8 	sub.w	r1, r3, #200	@ 0xc8
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (ctrl_out->PWM_vals[i] < 0){
 8003ac8:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003acc:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003ad0:	3303      	adds	r3, #3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	ed93 7b00 	vldr	d7, [r3]
 8003ada:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	d578      	bpl.n	8003bd6 <StartControlTask+0xfe6>
			ctrl_out->M_dirs[i] = 1;
 8003ae4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003ae8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003aec:	4413      	add	r3, r2
 8003aee:	3340      	adds	r3, #64	@ 0x40
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
			if (ctrl_out->PWM_vals[i] < 0 && ctrl_out->PWM_vals[i] > - deadzone_duty_lim) ctrl_out->PWM_vals[i] = -deadzone_duty_lim;
 8003af4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003af8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003afc:	3303      	adds	r3, #3
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	ed93 7b00 	vldr	d7, [r3]
 8003b06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	d525      	bpl.n	8003b5c <StartControlTask+0xf6c>
 8003b10:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003b14:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003b18:	3303      	adds	r3, #3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	ed93 6b00 	vldr	d6, [r3]
 8003b22:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	@ 0x246
 8003b26:	425b      	negs	r3, r3
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	dd10      	ble.n	8003b5c <StartControlTask+0xf6c>
 8003b3a:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	@ 0x246
 8003b3e:	425b      	negs	r3, r3
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b48:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003b4c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003b50:	3303      	adds	r3, #3
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	ed83 7b00 	vstr	d7, [r3]
 8003b5a:	e024      	b.n	8003ba6 <StartControlTask+0xfb6>
			else if (ctrl_out->PWM_vals[i] < -max_duty_cycle) ctrl_out->PWM_vals[i] = -max_duty_cycle;
 8003b5c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003b60:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003b64:	3303      	adds	r3, #3
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	ed93 6b00 	vldr	d6, [r3]
 8003b6e:	f9b7 3244 	ldrsh.w	r3, [r7, #580]	@ 0x244
 8003b72:	425b      	negs	r3, r3
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b84:	d50f      	bpl.n	8003ba6 <StartControlTask+0xfb6>
 8003b86:	f9b7 3244 	ldrsh.w	r3, [r7, #580]	@ 0x244
 8003b8a:	425b      	negs	r3, r3
 8003b8c:	ee07 3a90 	vmov	s15, r3
 8003b90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b94:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003b98:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003b9c:	3303      	adds	r3, #3
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->dutyCycles[i] = (uint16_t)(ctrl_out->PWM_vals[i]*-1);
 8003ba6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003baa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003bae:	3303      	adds	r3, #3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	ed93 7b00 	vldr	d7, [r3]
 8003bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8003bbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003bca:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8003bce:	321c      	adds	r2, #28
 8003bd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003bd4:	e07f      	b.n	8003cd6 <StartControlTask+0x10e6>
		}
		else if (ctrl_out->PWM_vals[i] >= 0){
 8003bd6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003bda:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003bde:	3303      	adds	r3, #3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	ed93 7b00 	vldr	d7, [r3]
 8003be8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	db71      	blt.n	8003cd6 <StartControlTask+0x10e6>
			ctrl_out->M_dirs[i] = 0;
 8003bf2:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003bf6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3340      	adds	r3, #64	@ 0x40
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
			if (ctrl_out->PWM_vals[i] > 0 && ctrl_out->PWM_vals[i] < deadzone_duty_lim) ctrl_out->PWM_vals[i] = deadzone_duty_lim;
 8003c02:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003c06:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	ed93 7b00 	vldr	d7, [r3]
 8003c14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	dd23      	ble.n	8003c66 <StartControlTask+0x1076>
 8003c1e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003c22:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003c26:	3303      	adds	r3, #3
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	ed93 6b00 	vldr	d6, [r3]
 8003c30:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	@ 0x246
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c44:	d50f      	bpl.n	8003c66 <StartControlTask+0x1076>
 8003c46:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	@ 0x246
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c52:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003c56:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003c5a:	3303      	adds	r3, #3
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	ed83 7b00 	vstr	d7, [r3]
 8003c64:	e022      	b.n	8003cac <StartControlTask+0x10bc>
			else if (ctrl_out->PWM_vals[i] > max_duty_cycle) ctrl_out->PWM_vals[i] = max_duty_cycle;
 8003c66:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003c6a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003c6e:	3303      	adds	r3, #3
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	ed93 6b00 	vldr	d6, [r3]
 8003c78:	f9b7 3244 	ldrsh.w	r3, [r7, #580]	@ 0x244
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	dd0e      	ble.n	8003cac <StartControlTask+0x10bc>
 8003c8e:	f9b7 3244 	ldrsh.w	r3, [r7, #580]	@ 0x244
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c9a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003c9e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	ed83 7b00 	vstr	d7, [r3]
			ctrl_out->dutyCycles[i] = (uint16_t)(ctrl_out->PWM_vals[i]);
 8003cac:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8003cb0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003cb4:	3303      	adds	r3, #3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	ed93 7b00 	vldr	d7, [r3]
 8003cbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003cc2:	ee17 3a90 	vmov	r3, s15
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003ccc:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8003cd0:	321c      	adds	r2, #28
 8003cd2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 4; i++) {
 8003cd6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8003ce0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	f77f ae20 	ble.w	800392a <StartControlTask+0xd3a>
		}
	}

	setMotorDirection(GPIOD, 4, 5, ctrl_out->M_dirs[0]);
 8003cea:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	2104      	movs	r1, #4
 8003cf6:	4878      	ldr	r0, [pc, #480]	@ (8003ed8 <StartControlTask+0x12e8>)
 8003cf8:	f7fd fa5b 	bl	80011b2 <setMotorDirection>
	setMotorDirection(GPIOD, 6, 7, ctrl_out->M_dirs[1]);
 8003cfc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d04:	2207      	movs	r2, #7
 8003d06:	2106      	movs	r1, #6
 8003d08:	4873      	ldr	r0, [pc, #460]	@ (8003ed8 <StartControlTask+0x12e8>)
 8003d0a:	f7fd fa52 	bl	80011b2 <setMotorDirection>
	setMotorDirection(GPIOE, 2, 4, ctrl_out->M_dirs[2]);
 8003d0e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d16:	2204      	movs	r2, #4
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4870      	ldr	r0, [pc, #448]	@ (8003edc <StartControlTask+0x12ec>)
 8003d1c:	f7fd fa49 	bl	80011b2 <setMotorDirection>
	setMotorDirection(GPIOE, 3, 6, ctrl_out->M_dirs[3]);
 8003d20:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d28:	2206      	movs	r2, #6
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	486b      	ldr	r0, [pc, #428]	@ (8003edc <StartControlTask+0x12ec>)
 8003d2e:	f7fd fa40 	bl	80011b2 <setMotorDirection>

	__HAL_TIM_SET_COMPARE(&htim5 , TIM_CHANNEL_1, ctrl_out->dutyCycles[0]);  // Set duty cycle
 8003d32:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d36:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8003d38:	4b69      	ldr	r3, [pc, #420]	@ (8003ee0 <StartControlTask+0x12f0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, ctrl_out->dutyCycles[1]);  // Set duty cycle
 8003d3e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d42:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8003d44:	4b67      	ldr	r3, [pc, #412]	@ (8003ee4 <StartControlTask+0x12f4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, ctrl_out->dutyCycles[2]);  // Set duty cycle
 8003d4a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d4e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8003d50:	4b65      	ldr	r3, [pc, #404]	@ (8003ee8 <StartControlTask+0x12f8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ctrl_out->dutyCycles[3]);  // Set duty cycle
 8003d56:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8003d5a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003d5c:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <StartControlTask+0x12fc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	635a      	str	r2, [r3, #52]	@ 0x34


/*------------------------------------------------------------------------*/
/***************************** 7. ODOMETRY ********************************/

	globalSpeedsFromU(odom->phi, data.d, data.r, enc->omegaVals, odom->q_dot); // q_dot = {phi_dot, x_dot, y_dot}
 8003d62:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003d66:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d6a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d72:	ed93 6b06 	vldr	d6, [r3, #24]
 8003d76:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d7e:	ed93 5b08 	vldr	d5, [r3, #32]
 8003d82:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8003d86:	f103 0220 	add.w	r2, r3, #32
 8003d8a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003d8e:	3318      	adds	r3, #24
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	eeb0 2b45 	vmov.f64	d2, d5
 8003d98:	eeb0 1b46 	vmov.f64	d1, d6
 8003d9c:	eeb0 0b47 	vmov.f64	d0, d7
 8003da0:	f7fd fb10 	bl	80013c4 <globalSpeedsFromU>
//	globalSpeedsFromU(odom->phi, data.d, data.r, ctrl_out->u, odom->q_dot); // q_dot = {phi_dot, x_dot, y_dot}
	dt = ts->delta / 1000.0f;  // Convert ms to seconds
 8003da4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003db2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ef0 <StartControlTask+0x1300>
 8003db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dbe:	ed87 7b92 	vstr	d7, [r7, #584]	@ 0x248

	odom->phi    += odom->q_dot[0] * dt;         // Integrated angular velocity
 8003dc2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003dc6:	ed93 6b02 	vldr	d6, [r3, #8]
 8003dca:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003dce:	ed93 5b06 	vldr	d5, [r3, #24]
 8003dd2:	ed97 7b92 	vldr	d7, [r7, #584]	@ 0x248
 8003dd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dde:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003de2:	ed83 7b02 	vstr	d7, [r3, #8]
	odom->x_pos  += odom->q_dot[1] * dt;         // Integrated x velocity (global)
 8003de6:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003dea:	ed93 6b00 	vldr	d6, [r3]
 8003dee:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003df2:	ed93 5b08 	vldr	d5, [r3, #32]
 8003df6:	ed97 7b92 	vldr	d7, [r7, #584]	@ 0x248
 8003dfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e02:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e06:	ed83 7b00 	vstr	d7, [r3]
	odom->y_pos  += odom->q_dot[2] * dt;         // Integrated y velocity (global)
 8003e0a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e0e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003e12:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e16:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 8003e1a:	ed97 7b92 	vldr	d7, [r7, #584]	@ 0x248
 8003e1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e26:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e2a:	ed83 7b04 	vstr	d7, [r3, #16]

	odom->phi = (odom->phi > PI) ? (odom->phi - 2 * PI) : (odom->phi < -PI) ? (odom->phi + 2 * PI) : odom->phi; // 0 <= phi < 2PI
 8003e2e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e32:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e36:	edd7 7a9e 	vldr	s15, [r7, #632]	@ 0x278
 8003e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	dd0c      	ble.n	8003e62 <StartControlTask+0x1272>
 8003e48:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e50:	edd7 7a9e 	vldr	s15, [r7, #632]	@ 0x278
 8003e54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003e60:	e01f      	b.n	8003ea2 <StartControlTask+0x12b2>
 8003e62:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e66:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e6a:	edd7 7a9e 	vldr	s15, [r7, #632]	@ 0x278
 8003e6e:	eef1 7a67 	vneg.f32	s15, s15
 8003e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7e:	d50c      	bpl.n	8003e9a <StartControlTask+0x12aa>
 8003e80:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e84:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e88:	edd7 7a9e 	vldr	s15, [r7, #632]	@ 0x278
 8003e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e98:	e003      	b.n	8003ea2 <StartControlTask+0x12b2>
 8003e9a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003e9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ea2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8003ea6:	ed83 7b02 	vstr	d7, [r3, #8]

//
//	printf(" currentTime: %lu prevTime: %lu deltaTime: %lu 	dt: %0.9lf     ", currentTime, printf_prevTime, deltaTime, dt);
//

	queue_status = osMessageQueuePut(CtrlTsk_QueueHandle, &CtrlTsk_data, 0, 0);
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <StartControlTask+0x1304>)
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f009 fed9 	bl	800dc6c <osMessageQueuePut>
 8003eba:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208

	if (queue_status != osOK) {
 8003ebe:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f43f a876 	beq.w	8002fb4 <StartControlTask+0x3c4>
	    printf("❌ Failed to enqueue message! Error code: %d\r\n", queue_status);
 8003ec8:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8003ecc:	480a      	ldr	r0, [pc, #40]	@ (8003ef8 <StartControlTask+0x1308>)
 8003ece:	f00d fc65 	bl	801179c <iprintf>
    osDelay(10);
 8003ed2:	f7ff b86f 	b.w	8002fb4 <StartControlTask+0x3c4>
 8003ed6:	bf00      	nop
 8003ed8:	58020c00 	.word	0x58020c00
 8003edc:	58021000 	.word	0x58021000
 8003ee0:	2400044c 	.word	0x2400044c
 8003ee4:	240004e4 	.word	0x240004e4
 8003ee8:	2400057c 	.word	0x2400057c
 8003eec:	240005c8 	.word	0x240005c8
 8003ef0:	447a0000 	.word	0x447a0000
 8003ef4:	240006c0 	.word	0x240006c0
 8003ef8:	08016d90 	.word	0x08016d90

08003efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f0e:	f000 fd73 	bl	80049f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40001000 	.word	0x40001000

08003f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f24:	b672      	cpsid	i
}
 8003f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <Error_Handler+0x8>

08003f2c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003f34:	1d39      	adds	r1, r7, #4
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4803      	ldr	r0, [pc, #12]	@ (8003f4c <__io_putchar+0x20>)
 8003f3e:	f006 ffa5 	bl	800ae8c <HAL_UART_Transmit>
  return ch;
 8003f42:	687b      	ldr	r3, [r7, #4]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	24000614 	.word	0x24000614

08003f50 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <__io_getchar+0x2c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003f62:	1df9      	adds	r1, r7, #7
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4804      	ldr	r0, [pc, #16]	@ (8003f7c <__io_getchar+0x2c>)
 8003f6c:	f007 f81c 	bl	800afa8 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003f70:	79fb      	ldrb	r3, [r7, #7]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	24000614 	.word	0x24000614

08003f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <HAL_MspInit+0x38>)
 8003f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb8 <HAL_MspInit+0x38>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_MspInit+0x38>)
 8003f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	f06f 0001 	mvn.w	r0, #1
 8003fac:	f000 fe2c 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	58024400 	.word	0x58024400

08003fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fd4:	f107 0310 	add.w	r3, r7, #16
 8003fd8:	22c0      	movs	r2, #192	@ 0xc0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f00d fe25 	bl	8011c2c <memset>
  if(hi2c->Instance==I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <HAL_I2C_MspInit+0xc4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d145      	bne.n	8004078 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003fec:	f04f 0208 	mov.w	r2, #8
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4618      	mov	r0, r3
 8004004:	f003 fc08 	bl	8007818 <HAL_RCCEx_PeriphCLKConfig>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800400e:	f7ff ff87 	bl	8003f20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004012:	4b1c      	ldr	r3, [pc, #112]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 8004014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004018:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004022:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 8004024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004030:	23c0      	movs	r3, #192	@ 0xc0
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004036:	2312      	movs	r3, #18
 8004038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004048:	2304      	movs	r3, #4
 800404a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004052:	4619      	mov	r1, r3
 8004054:	480c      	ldr	r0, [pc, #48]	@ (8004088 <HAL_I2C_MspInit+0xcc>)
 8004056:	f001 fb63 	bl	8005720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800405a:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 800405c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004060:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 8004062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004066:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_I2C_MspInit+0xc8>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004078:	bf00      	nop
 800407a:	37e8      	adds	r7, #232	@ 0xe8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40005400 	.word	0x40005400
 8004084:	58024400 	.word	0x58024400
 8004088:	58020400 	.word	0x58020400

0800408c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b090      	sub	sp, #64	@ 0x40
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a78      	ldr	r2, [pc, #480]	@ (800428c <HAL_TIM_Encoder_MspInit+0x200>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d12f      	bne.n	800410e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ae:	4b78      	ldr	r3, [pc, #480]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b4:	4a76      	ldr	r2, [pc, #472]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040be:	4b74      	ldr	r3, [pc, #464]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040cc:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040d4:	f043 0310 	orr.w	r3, r3, #16
 80040d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80040de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80040ea:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f8:	2300      	movs	r3, #0
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040fc:	2301      	movs	r3, #1
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004104:	4619      	mov	r1, r3
 8004106:	4863      	ldr	r0, [pc, #396]	@ (8004294 <HAL_TIM_Encoder_MspInit+0x208>)
 8004108:	f001 fb0a 	bl	8005720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800410c:	e0ba      	b.n	8004284 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004116:	d14d      	bne.n	80041b4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004118:	4b5d      	ldr	r3, [pc, #372]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800411a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800411e:	4a5c      	ldr	r2, [pc, #368]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004128:	4b59      	ldr	r3, [pc, #356]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800412a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	4b56      	ldr	r3, [pc, #344]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800413c:	4a54      	ldr	r2, [pc, #336]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004146:	4b52      	ldr	r3, [pc, #328]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004154:	4b4e      	ldr	r3, [pc, #312]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800415a:	4a4d      	ldr	r2, [pc, #308]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004164:	4b4a      	ldr	r3, [pc, #296]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004172:	2320      	movs	r3, #32
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004182:	2301      	movs	r3, #1
 8004184:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800418a:	4619      	mov	r1, r3
 800418c:	4842      	ldr	r0, [pc, #264]	@ (8004298 <HAL_TIM_Encoder_MspInit+0x20c>)
 800418e:	f001 fac7 	bl	8005720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004192:	2308      	movs	r3, #8
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	2302      	movs	r3, #2
 8004198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041a2:	2301      	movs	r3, #1
 80041a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041aa:	4619      	mov	r1, r3
 80041ac:	483b      	ldr	r0, [pc, #236]	@ (800429c <HAL_TIM_Encoder_MspInit+0x210>)
 80041ae:	f001 fab7 	bl	8005720 <HAL_GPIO_Init>
}
 80041b2:	e067      	b.n	8004284 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a39      	ldr	r2, [pc, #228]	@ (80042a0 <HAL_TIM_Encoder_MspInit+0x214>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d12f      	bne.n	800421e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041be:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80041ce:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041ec:	4b28      	ldr	r3, [pc, #160]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041fa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	2300      	movs	r3, #0
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800420c:	2302      	movs	r3, #2
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004210:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004214:	4619      	mov	r1, r3
 8004216:	4823      	ldr	r0, [pc, #140]	@ (80042a4 <HAL_TIM_Encoder_MspInit+0x218>)
 8004218:	f001 fa82 	bl	8005720 <HAL_GPIO_Init>
}
 800421c:	e032      	b.n	8004284 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d12d      	bne.n	8004284 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004228:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800422a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800422e:	4a18      	ldr	r2, [pc, #96]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004238:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800423a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800424c:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004256:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x204>)
 8004258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004264:	23c0      	movs	r3, #192	@ 0xc0
 8004266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004274:	2303      	movs	r3, #3
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800427c:	4619      	mov	r1, r3
 800427e:	480b      	ldr	r0, [pc, #44]	@ (80042ac <HAL_TIM_Encoder_MspInit+0x220>)
 8004280:	f001 fa4e 	bl	8005720 <HAL_GPIO_Init>
}
 8004284:	bf00      	nop
 8004286:	3740      	adds	r7, #64	@ 0x40
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40010000 	.word	0x40010000
 8004290:	58024400 	.word	0x58024400
 8004294:	58021000 	.word	0x58021000
 8004298:	58020000 	.word	0x58020000
 800429c:	58020400 	.word	0x58020400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	58020c00 	.word	0x58020c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	58020800 	.word	0x58020800

080042b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <HAL_TIM_PWM_MspInit+0x68>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10f      	bne.n	80042e2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042c2:	4b16      	ldr	r3, [pc, #88]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042c8:	4a14      	ldr	r2, [pc, #80]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042ca:	f043 0308 	orr.w	r3, r3, #8
 80042ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042d2:	4b12      	ldr	r3, [pc, #72]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80042e0:	e013      	b.n	800430a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004320 <HAL_TIM_PWM_MspInit+0x70>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d10e      	bne.n	800430a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042fc:	4b07      	ldr	r3, [pc, #28]	@ (800431c <HAL_TIM_PWM_MspInit+0x6c>)
 80042fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40000c00 	.word	0x40000c00
 800431c:	58024400 	.word	0x58024400
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <HAL_TIM_Base_MspInit+0x90>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10f      	bne.n	8004356 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800433c:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 800433e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004342:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004346:	4b1c      	ldr	r3, [pc, #112]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004354:	e028      	b.n	80043a8 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM13)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_TIM_Base_MspInit+0x98>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10f      	bne.n	8004380 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004366:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800436c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
}
 800437e:	e013      	b.n	80043a8 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0e      	ldr	r2, [pc, #56]	@ (80043c0 <HAL_TIM_Base_MspInit+0x9c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 800438c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004390:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 8004392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004396:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_TIM_Base_MspInit+0x94>)
 800439c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40001800 	.word	0x40001800
 80043b8:	58024400 	.word	0x58024400
 80043bc:	40001c00 	.word	0x40001c00
 80043c0:	40002000 	.word	0x40002000

080043c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08c      	sub	sp, #48	@ 0x30
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5e      	ldr	r2, [pc, #376]	@ (800455c <HAL_TIM_MspPostInit+0x198>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d11f      	bne.n	8004426 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80043e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80043f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004404:	2301      	movs	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004408:	2302      	movs	r3, #2
 800440a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004410:	2300      	movs	r3, #0
 8004412:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004414:	2302      	movs	r3, #2
 8004416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004418:	f107 031c 	add.w	r3, r7, #28
 800441c:	4619      	mov	r1, r3
 800441e:	4851      	ldr	r0, [pc, #324]	@ (8004564 <HAL_TIM_MspPostInit+0x1a0>)
 8004420:	f001 f97e 	bl	8005720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004424:	e095      	b.n	8004552 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4f      	ldr	r2, [pc, #316]	@ (8004568 <HAL_TIM_MspPostInit+0x1a4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d120      	bne.n	8004472 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004430:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004436:	4a4a      	ldr	r2, [pc, #296]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004438:	f043 0302 	orr.w	r3, r3, #2
 800443c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004440:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800444e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004460:	2302      	movs	r3, #2
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004464:	f107 031c 	add.w	r3, r7, #28
 8004468:	4619      	mov	r1, r3
 800446a:	4840      	ldr	r0, [pc, #256]	@ (800456c <HAL_TIM_MspPostInit+0x1a8>)
 800446c:	f001 f958 	bl	8005720 <HAL_GPIO_Init>
}
 8004470:	e06f      	b.n	8004552 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM13)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <HAL_TIM_MspPostInit+0x1ac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d120      	bne.n	80044be <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800447c:	4b38      	ldr	r3, [pc, #224]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 800447e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004482:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004484:	f043 0320 	orr.w	r3, r3, #32
 8004488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800448c:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 800448e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800449a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800449e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80044ac:	2309      	movs	r3, #9
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	482f      	ldr	r0, [pc, #188]	@ (8004574 <HAL_TIM_MspPostInit+0x1b0>)
 80044b8:	f001 f932 	bl	8005720 <HAL_GPIO_Init>
}
 80044bc:	e049      	b.n	8004552 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM14)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004578 <HAL_TIM_MspPostInit+0x1b4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d120      	bne.n	800450a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044c8:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80044ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044ce:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044d8:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 80044da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ec:	2302      	movs	r3, #2
 80044ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80044f8:	2309      	movs	r3, #9
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044fc:	f107 031c 	add.w	r3, r7, #28
 8004500:	4619      	mov	r1, r3
 8004502:	481c      	ldr	r0, [pc, #112]	@ (8004574 <HAL_TIM_MspPostInit+0x1b0>)
 8004504:	f001 f90c 	bl	8005720 <HAL_GPIO_Init>
}
 8004508:	e023      	b.n	8004552 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_TIM_MspPostInit+0x1b8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d11e      	bne.n	8004552 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 800451c:	f043 0310 	orr.w	r3, r3, #16
 8004520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004524:	4b0e      	ldr	r3, [pc, #56]	@ (8004560 <HAL_TIM_MspPostInit+0x19c>)
 8004526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004532:	2320      	movs	r3, #32
 8004534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453e:	2300      	movs	r3, #0
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004542:	2304      	movs	r3, #4
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4619      	mov	r1, r3
 800454c:	480c      	ldr	r0, [pc, #48]	@ (8004580 <HAL_TIM_MspPostInit+0x1bc>)
 800454e:	f001 f8e7 	bl	8005720 <HAL_GPIO_Init>
}
 8004552:	bf00      	nop
 8004554:	3730      	adds	r7, #48	@ 0x30
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40000c00 	.word	0x40000c00
 8004560:	58024400 	.word	0x58024400
 8004564:	58020000 	.word	0x58020000
 8004568:	40001800 	.word	0x40001800
 800456c:	58020400 	.word	0x58020400
 8004570:	40001c00 	.word	0x40001c00
 8004574:	58021400 	.word	0x58021400
 8004578:	40002000 	.word	0x40002000
 800457c:	40014000 	.word	0x40014000
 8004580:	58021000 	.word	0x58021000

08004584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b0ba      	sub	sp, #232	@ 0xe8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	22c0      	movs	r2, #192	@ 0xc0
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f00d fb41 	bl	8011c2c <memset>
  if(huart->Instance==USART3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2b      	ldr	r2, [pc, #172]	@ (800465c <HAL_UART_MspInit+0xd8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d14e      	bne.n	8004652 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80045b4:	f04f 0202 	mov.w	r2, #2
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045c6:	f107 0310 	add.w	r3, r7, #16
 80045ca:	4618      	mov	r0, r3
 80045cc:	f003 f924 	bl	8007818 <HAL_RCCEx_PeriphCLKConfig>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80045d6:	f7ff fca3 	bl	8003f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045da:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 80045dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 80045e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 80045ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 80045fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045fe:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004608:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_UART_MspInit+0xdc>)
 800460a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004616:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004630:	2307      	movs	r3, #7
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004636:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800463a:	4619      	mov	r1, r3
 800463c:	4809      	ldr	r0, [pc, #36]	@ (8004664 <HAL_UART_MspInit+0xe0>)
 800463e:	f001 f86f 	bl	8005720 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2105      	movs	r1, #5
 8004646:	2027      	movs	r0, #39	@ 0x27
 8004648:	f000 fade 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800464c:	2027      	movs	r0, #39	@ 0x27
 800464e:	f000 faf5 	bl	8004c3c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004652:	bf00      	nop
 8004654:	37e8      	adds	r7, #232	@ 0xe8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40004800 	.word	0x40004800
 8004660:	58024400 	.word	0x58024400
 8004664:	58020c00 	.word	0x58020c00

08004668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b090      	sub	sp, #64	@ 0x40
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d827      	bhi.n	80046c6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004676:	2200      	movs	r2, #0
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	2036      	movs	r0, #54	@ 0x36
 800467c:	f000 fac4 	bl	8004c08 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004680:	2036      	movs	r0, #54	@ 0x36
 8004682:	f000 fadb 	bl	8004c3c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004686:	4a29      	ldr	r2, [pc, #164]	@ (800472c <HAL_InitTick+0xc4>)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800468c:	4b28      	ldr	r3, [pc, #160]	@ (8004730 <HAL_InitTick+0xc8>)
 800468e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004692:	4a27      	ldr	r2, [pc, #156]	@ (8004730 <HAL_InitTick+0xc8>)
 8004694:	f043 0310 	orr.w	r3, r3, #16
 8004698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800469c:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <HAL_InitTick+0xc8>)
 800469e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046aa:	f107 0210 	add.w	r2, r7, #16
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f003 f86d 	bl	8007794 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_InitTick+0x6a>
 80046c4:	e001      	b.n	80046ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e02b      	b.n	8004722 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046ca:	f003 f837 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 80046ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80046d0:	e004      	b.n	80046dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046d2:	f003 f833 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 80046d6:	4603      	mov	r3, r0
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <HAL_InitTick+0xcc>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9b      	lsrs	r3, r3, #18
 80046e6:	3b01      	subs	r3, #1
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046ea:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <HAL_InitTick+0xd0>)
 80046ec:	4a13      	ldr	r2, [pc, #76]	@ (800473c <HAL_InitTick+0xd4>)
 80046ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046f0:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_InitTick+0xd0>)
 80046f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80046f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80046f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004738 <HAL_InitTick+0xd0>)
 80046fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80046fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_InitTick+0xd0>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <HAL_InitTick+0xd0>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800470a:	480b      	ldr	r0, [pc, #44]	@ (8004738 <HAL_InitTick+0xd0>)
 800470c:	f004 feb0 	bl	8009470 <HAL_TIM_Base_Init>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004716:	4808      	ldr	r0, [pc, #32]	@ (8004738 <HAL_InitTick+0xd0>)
 8004718:	f004 ff02 	bl	8009520 <HAL_TIM_Base_Start_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	e000      	b.n	8004722 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
}
 8004722:	4618      	mov	r0, r3
 8004724:	3740      	adds	r7, #64	@ 0x40
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	24000014 	.word	0x24000014
 8004730:	58024400 	.word	0x58024400
 8004734:	431bde83 	.word	0x431bde83
 8004738:	240006d0 	.word	0x240006d0
 800473c:	40001000 	.word	0x40001000

08004740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004744:	bf00      	nop
 8004746:	e7fd      	b.n	8004744 <NMI_Handler+0x4>

08004748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <HardFault_Handler+0x4>

08004750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <MemManage_Handler+0x4>

08004758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <BusFault_Handler+0x4>

08004760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <UsageFault_Handler+0x4>

08004768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800477c:	4802      	ldr	r0, [pc, #8]	@ (8004788 <USART3_IRQHandler+0x10>)
 800477e:	f006 fd27 	bl	800b1d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24000614 	.word	0x24000614

0800478c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004790:	4802      	ldr	r0, [pc, #8]	@ (800479c <TIM6_DAC_IRQHandler+0x10>)
 8004792:	f005 fa85 	bl	8009ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	240006d0 	.word	0x240006d0

080047a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return 1;
 80047a4:	2301      	movs	r3, #1
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <_kill>:

int _kill(int pid, int sig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047ba:	f00d fadf 	bl	8011d7c <__errno>
 80047be:	4603      	mov	r3, r0
 80047c0:	2216      	movs	r2, #22
 80047c2:	601a      	str	r2, [r3, #0]
  return -1;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_exit>:

void _exit (int status)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047d8:	f04f 31ff 	mov.w	r1, #4294967295
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ffe7 	bl	80047b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <_exit+0x12>

080047e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e00a      	b.n	800480e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047f8:	f7ff fbaa 	bl	8003f50 <__io_getchar>
 80047fc:	4601      	mov	r1, r0
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	60ba      	str	r2, [r7, #8]
 8004804:	b2ca      	uxtb	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	dbf0      	blt.n	80047f8 <_read+0x12>
  }

  return len;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e009      	b.n	8004846 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	60ba      	str	r2, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fb76 	bl	8003f2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	dbf1      	blt.n	8004832 <_write+0x12>
  }
  return len;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_close>:

int _close(int file)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004880:	605a      	str	r2, [r3, #4]
  return 0;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_isatty>:

int _isatty(int file)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004898:	2301      	movs	r3, #1
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048c8:	4a14      	ldr	r2, [pc, #80]	@ (800491c <_sbrk+0x5c>)
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <_sbrk+0x60>)
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048d4:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <_sbrk+0x64>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <_sbrk+0x64>)
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <_sbrk+0x68>)
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <_sbrk+0x64>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d207      	bcs.n	8004900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048f0:	f00d fa44 	bl	8011d7c <__errno>
 80048f4:	4603      	mov	r3, r0
 80048f6:	220c      	movs	r2, #12
 80048f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295
 80048fe:	e009      	b.n	8004914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004900:	4b08      	ldr	r3, [pc, #32]	@ (8004924 <_sbrk+0x64>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <_sbrk+0x64>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	4a05      	ldr	r2, [pc, #20]	@ (8004924 <_sbrk+0x64>)
 8004910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	24080000 	.word	0x24080000
 8004920:	00000400 	.word	0x00000400
 8004924:	2400071c 	.word	0x2400071c
 8004928:	24005258 	.word	0x24005258

0800492c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800492c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004930:	f7fc f89a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004934:	480c      	ldr	r0, [pc, #48]	@ (8004968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004936:	490d      	ldr	r1, [pc, #52]	@ (800496c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004938:	4a0d      	ldr	r2, [pc, #52]	@ (8004970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800493a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800493c:	e002      	b.n	8004944 <LoopCopyDataInit>

0800493e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800493e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004942:	3304      	adds	r3, #4

08004944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004948:	d3f9      	bcc.n	800493e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800494a:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800494c:	4c0a      	ldr	r4, [pc, #40]	@ (8004978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800494e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004950:	e001      	b.n	8004956 <LoopFillZerobss>

08004952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004954:	3204      	adds	r2, #4

08004956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004958:	d3fb      	bcc.n	8004952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800495a:	f00d fa15 	bl	8011d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800495e:	f7fc fdc9 	bl	80014f4 <main>
  bx  lr
 8004962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004964:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800496c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8004970:	08017568 	.word	0x08017568
  ldr r2, =_sbss
 8004974:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8004978:	24005258 	.word	0x24005258

0800497c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800497c:	e7fe      	b.n	800497c <ADC3_IRQHandler>
	...

08004980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004986:	2003      	movs	r0, #3
 8004988:	f000 f933 	bl	8004bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800498c:	f002 fd2c 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <HAL_Init+0x68>)
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	4913      	ldr	r1, [pc, #76]	@ (80049ec <HAL_Init+0x6c>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049aa:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <HAL_Init+0x68>)
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	4a0e      	ldr	r2, [pc, #56]	@ (80049ec <HAL_Init+0x6c>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
 80049c0:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <HAL_Init+0x70>)
 80049c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049c4:	4a0b      	ldr	r2, [pc, #44]	@ (80049f4 <HAL_Init+0x74>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049ca:	200f      	movs	r0, #15
 80049cc:	f7ff fe4c 	bl	8004668 <HAL_InitTick>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e002      	b.n	80049e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80049da:	f7ff fad1 	bl	8003f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58024400 	.word	0x58024400
 80049ec:	08016de4 	.word	0x08016de4
 80049f0:	24000004 	.word	0x24000004
 80049f4:	24000000 	.word	0x24000000

080049f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_IncTick+0x20>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_IncTick+0x24>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_IncTick+0x24>)
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	24000018 	.word	0x24000018
 8004a1c:	24000720 	.word	0x24000720

08004a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return uwTick;
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <HAL_GetTick+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	24000720 	.word	0x24000720

08004a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a40:	f7ff ffee 	bl	8004a20 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d005      	beq.n	8004a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_Delay+0x44>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a5e:	bf00      	nop
 8004a60:	f7ff ffde 	bl	8004a20 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d8f7      	bhi.n	8004a60 <HAL_Delay+0x28>
  {
  }
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	24000018 	.word	0x24000018

08004a80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_GetREVID+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0c1b      	lsrs	r3, r3, #16
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	5c001000 	.word	0x5c001000

08004a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac6:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	60d3      	str	r3, [r2, #12]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00
 8004adc:	05fa0000 	.word	0x05fa0000

08004ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	@ (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	@ 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff4c 	bl	8004a98 <__NVIC_SetPriorityGrouping>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c16:	f7ff ff63 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004c1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	6978      	ldr	r0, [r7, #20]
 8004c22:	f7ff ffb3 	bl	8004b8c <NVIC_EncodePriority>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ff82 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff56 	bl	8004afc <__NVIC_EnableIRQ>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c60:	f7ff fede 	bl	8004a20 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e2dc      	b.n	800522a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d008      	beq.n	8004c8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2280      	movs	r2, #128	@ 0x80
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e2cd      	b.n	800522a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a76      	ldr	r2, [pc, #472]	@ (8004e6c <HAL_DMA_Abort+0x214>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d04a      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a74      	ldr	r2, [pc, #464]	@ (8004e70 <HAL_DMA_Abort+0x218>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d045      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	@ (8004e74 <HAL_DMA_Abort+0x21c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d040      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a71      	ldr	r2, [pc, #452]	@ (8004e78 <HAL_DMA_Abort+0x220>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d03b      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a70      	ldr	r2, [pc, #448]	@ (8004e7c <HAL_DMA_Abort+0x224>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d036      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e80 <HAL_DMA_Abort+0x228>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d031      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6d      	ldr	r2, [pc, #436]	@ (8004e84 <HAL_DMA_Abort+0x22c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d02c      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e88 <HAL_DMA_Abort+0x230>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d027      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e8c <HAL_DMA_Abort+0x234>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a68      	ldr	r2, [pc, #416]	@ (8004e90 <HAL_DMA_Abort+0x238>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a67      	ldr	r2, [pc, #412]	@ (8004e94 <HAL_DMA_Abort+0x23c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a65      	ldr	r2, [pc, #404]	@ (8004e98 <HAL_DMA_Abort+0x240>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a64      	ldr	r2, [pc, #400]	@ (8004e9c <HAL_DMA_Abort+0x244>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a62      	ldr	r2, [pc, #392]	@ (8004ea0 <HAL_DMA_Abort+0x248>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a61      	ldr	r2, [pc, #388]	@ (8004ea4 <HAL_DMA_Abort+0x24c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_DMA_Abort+0xd6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea8 <HAL_DMA_Abort+0x250>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_DMA_Abort+0xda>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_DMA_Abort+0xdc>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d013      	beq.n	8004d60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 021e 	bic.w	r2, r2, #30
 8004d46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e00a      	b.n	8004d76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 020e 	bic.w	r2, r2, #14
 8004d6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e6c <HAL_DMA_Abort+0x214>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d072      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a3a      	ldr	r2, [pc, #232]	@ (8004e70 <HAL_DMA_Abort+0x218>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d06d      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a39      	ldr	r2, [pc, #228]	@ (8004e74 <HAL_DMA_Abort+0x21c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d068      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a37      	ldr	r2, [pc, #220]	@ (8004e78 <HAL_DMA_Abort+0x220>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d063      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a36      	ldr	r2, [pc, #216]	@ (8004e7c <HAL_DMA_Abort+0x224>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d05e      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a34      	ldr	r2, [pc, #208]	@ (8004e80 <HAL_DMA_Abort+0x228>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d059      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a33      	ldr	r2, [pc, #204]	@ (8004e84 <HAL_DMA_Abort+0x22c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d054      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	@ (8004e88 <HAL_DMA_Abort+0x230>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d04f      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <HAL_DMA_Abort+0x234>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d04a      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e90 <HAL_DMA_Abort+0x238>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d045      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <HAL_DMA_Abort+0x23c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d040      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e98 <HAL_DMA_Abort+0x240>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d03b      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <HAL_DMA_Abort+0x244>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d036      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	@ (8004ea0 <HAL_DMA_Abort+0x248>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d031      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a27      	ldr	r2, [pc, #156]	@ (8004ea4 <HAL_DMA_Abort+0x24c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d02c      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a25      	ldr	r2, [pc, #148]	@ (8004ea8 <HAL_DMA_Abort+0x250>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d027      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a24      	ldr	r2, [pc, #144]	@ (8004eac <HAL_DMA_Abort+0x254>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <HAL_DMA_Abort+0x258>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a21      	ldr	r2, [pc, #132]	@ (8004eb4 <HAL_DMA_Abort+0x25c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <HAL_DMA_Abort+0x260>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <HAL_DMA_Abort+0x264>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_DMA_Abort+0x268>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <HAL_DMA_Abort+0x26c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_DMA_Abort+0x20e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <HAL_DMA_Abort+0x270>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d132      	bne.n	8004ecc <HAL_DMA_Abort+0x274>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e031      	b.n	8004ece <HAL_DMA_Abort+0x276>
 8004e6a:	bf00      	nop
 8004e6c:	40020010 	.word	0x40020010
 8004e70:	40020028 	.word	0x40020028
 8004e74:	40020040 	.word	0x40020040
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	40020070 	.word	0x40020070
 8004e80:	40020088 	.word	0x40020088
 8004e84:	400200a0 	.word	0x400200a0
 8004e88:	400200b8 	.word	0x400200b8
 8004e8c:	40020410 	.word	0x40020410
 8004e90:	40020428 	.word	0x40020428
 8004e94:	40020440 	.word	0x40020440
 8004e98:	40020458 	.word	0x40020458
 8004e9c:	40020470 	.word	0x40020470
 8004ea0:	40020488 	.word	0x40020488
 8004ea4:	400204a0 	.word	0x400204a0
 8004ea8:	400204b8 	.word	0x400204b8
 8004eac:	58025408 	.word	0x58025408
 8004eb0:	5802541c 	.word	0x5802541c
 8004eb4:	58025430 	.word	0x58025430
 8004eb8:	58025444 	.word	0x58025444
 8004ebc:	58025458 	.word	0x58025458
 8004ec0:	5802546c 	.word	0x5802546c
 8004ec4:	58025480 	.word	0x58025480
 8004ec8:	58025494 	.word	0x58025494
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800509c <HAL_DMA_Abort+0x444>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80050a0 <HAL_DMA_Abort+0x448>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6a      	ldr	r2, [pc, #424]	@ (80050a4 <HAL_DMA_Abort+0x44c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a68      	ldr	r2, [pc, #416]	@ (80050a8 <HAL_DMA_Abort+0x450>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a67      	ldr	r2, [pc, #412]	@ (80050ac <HAL_DMA_Abort+0x454>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a65      	ldr	r2, [pc, #404]	@ (80050b0 <HAL_DMA_Abort+0x458>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a64      	ldr	r2, [pc, #400]	@ (80050b4 <HAL_DMA_Abort+0x45c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a62      	ldr	r2, [pc, #392]	@ (80050b8 <HAL_DMA_Abort+0x460>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a61      	ldr	r2, [pc, #388]	@ (80050bc <HAL_DMA_Abort+0x464>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5f      	ldr	r2, [pc, #380]	@ (80050c0 <HAL_DMA_Abort+0x468>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80050c4 <HAL_DMA_Abort+0x46c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5c      	ldr	r2, [pc, #368]	@ (80050c8 <HAL_DMA_Abort+0x470>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80050cc <HAL_DMA_Abort+0x474>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a59      	ldr	r2, [pc, #356]	@ (80050d0 <HAL_DMA_Abort+0x478>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a58      	ldr	r2, [pc, #352]	@ (80050d4 <HAL_DMA_Abort+0x47c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_Abort+0x32a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a56      	ldr	r2, [pc, #344]	@ (80050d8 <HAL_DMA_Abort+0x480>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <HAL_DMA_Abort+0x33c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e007      	b.n	8004fa4 <HAL_DMA_Abort+0x34c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fa4:	e013      	b.n	8004fce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa6:	f7ff fd3b 	bl	8004a20 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d90c      	bls.n	8004fce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e12d      	b.n	800522a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2f      	ldr	r2, [pc, #188]	@ (800509c <HAL_DMA_Abort+0x444>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d04a      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <HAL_DMA_Abort+0x448>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d045      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <HAL_DMA_Abort+0x44c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d040      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80050a8 <HAL_DMA_Abort+0x450>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d03b      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a29      	ldr	r2, [pc, #164]	@ (80050ac <HAL_DMA_Abort+0x454>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d036      	beq.n	800507a <HAL_DMA_Abort+0x422>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a27      	ldr	r2, [pc, #156]	@ (80050b0 <HAL_DMA_Abort+0x458>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d031      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a26      	ldr	r2, [pc, #152]	@ (80050b4 <HAL_DMA_Abort+0x45c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d02c      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a24      	ldr	r2, [pc, #144]	@ (80050b8 <HAL_DMA_Abort+0x460>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d027      	beq.n	800507a <HAL_DMA_Abort+0x422>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a23      	ldr	r2, [pc, #140]	@ (80050bc <HAL_DMA_Abort+0x464>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a21      	ldr	r2, [pc, #132]	@ (80050c0 <HAL_DMA_Abort+0x468>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01d      	beq.n	800507a <HAL_DMA_Abort+0x422>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a20      	ldr	r2, [pc, #128]	@ (80050c4 <HAL_DMA_Abort+0x46c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_DMA_Abort+0x470>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <HAL_DMA_Abort+0x474>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_DMA_Abort+0x422>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <HAL_DMA_Abort+0x478>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_DMA_Abort+0x47c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_DMA_Abort+0x422>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a18      	ldr	r2, [pc, #96]	@ (80050d8 <HAL_DMA_Abort+0x480>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_DMA_Abort+0x426>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_DMA_Abort+0x428>
 800507e:	2300      	movs	r3, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02b      	beq.n	80050dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005088:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	223f      	movs	r2, #63	@ 0x3f
 8005094:	409a      	lsls	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	609a      	str	r2, [r3, #8]
 800509a:	e02a      	b.n	80050f2 <HAL_DMA_Abort+0x49a>
 800509c:	40020010 	.word	0x40020010
 80050a0:	40020028 	.word	0x40020028
 80050a4:	40020040 	.word	0x40020040
 80050a8:	40020058 	.word	0x40020058
 80050ac:	40020070 	.word	0x40020070
 80050b0:	40020088 	.word	0x40020088
 80050b4:	400200a0 	.word	0x400200a0
 80050b8:	400200b8 	.word	0x400200b8
 80050bc:	40020410 	.word	0x40020410
 80050c0:	40020428 	.word	0x40020428
 80050c4:	40020440 	.word	0x40020440
 80050c8:	40020458 	.word	0x40020458
 80050cc:	40020470 	.word	0x40020470
 80050d0:	40020488 	.word	0x40020488
 80050d4:	400204a0 	.word	0x400204a0
 80050d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	409a      	lsls	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005234 <HAL_DMA_Abort+0x5dc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d072      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a4d      	ldr	r2, [pc, #308]	@ (8005238 <HAL_DMA_Abort+0x5e0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d06d      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a4c      	ldr	r2, [pc, #304]	@ (800523c <HAL_DMA_Abort+0x5e4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d068      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4a      	ldr	r2, [pc, #296]	@ (8005240 <HAL_DMA_Abort+0x5e8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d063      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a49      	ldr	r2, [pc, #292]	@ (8005244 <HAL_DMA_Abort+0x5ec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d05e      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a47      	ldr	r2, [pc, #284]	@ (8005248 <HAL_DMA_Abort+0x5f0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d059      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a46      	ldr	r2, [pc, #280]	@ (800524c <HAL_DMA_Abort+0x5f4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d054      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a44      	ldr	r2, [pc, #272]	@ (8005250 <HAL_DMA_Abort+0x5f8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04f      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a43      	ldr	r2, [pc, #268]	@ (8005254 <HAL_DMA_Abort+0x5fc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a41      	ldr	r2, [pc, #260]	@ (8005258 <HAL_DMA_Abort+0x600>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a40      	ldr	r2, [pc, #256]	@ (800525c <HAL_DMA_Abort+0x604>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <HAL_DMA_Abort+0x608>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3d      	ldr	r2, [pc, #244]	@ (8005264 <HAL_DMA_Abort+0x60c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3b      	ldr	r2, [pc, #236]	@ (8005268 <HAL_DMA_Abort+0x610>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3a      	ldr	r2, [pc, #232]	@ (800526c <HAL_DMA_Abort+0x614>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a38      	ldr	r2, [pc, #224]	@ (8005270 <HAL_DMA_Abort+0x618>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a37      	ldr	r2, [pc, #220]	@ (8005274 <HAL_DMA_Abort+0x61c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a35      	ldr	r2, [pc, #212]	@ (8005278 <HAL_DMA_Abort+0x620>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a34      	ldr	r2, [pc, #208]	@ (800527c <HAL_DMA_Abort+0x624>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a32      	ldr	r2, [pc, #200]	@ (8005280 <HAL_DMA_Abort+0x628>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a31      	ldr	r2, [pc, #196]	@ (8005284 <HAL_DMA_Abort+0x62c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005288 <HAL_DMA_Abort+0x630>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2e      	ldr	r2, [pc, #184]	@ (800528c <HAL_DMA_Abort+0x634>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_Abort+0x58a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <HAL_DMA_Abort+0x638>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d101      	bne.n	80051e6 <HAL_DMA_Abort+0x58e>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_DMA_Abort+0x590>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800520c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005216:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40020010 	.word	0x40020010
 8005238:	40020028 	.word	0x40020028
 800523c:	40020040 	.word	0x40020040
 8005240:	40020058 	.word	0x40020058
 8005244:	40020070 	.word	0x40020070
 8005248:	40020088 	.word	0x40020088
 800524c:	400200a0 	.word	0x400200a0
 8005250:	400200b8 	.word	0x400200b8
 8005254:	40020410 	.word	0x40020410
 8005258:	40020428 	.word	0x40020428
 800525c:	40020440 	.word	0x40020440
 8005260:	40020458 	.word	0x40020458
 8005264:	40020470 	.word	0x40020470
 8005268:	40020488 	.word	0x40020488
 800526c:	400204a0 	.word	0x400204a0
 8005270:	400204b8 	.word	0x400204b8
 8005274:	58025408 	.word	0x58025408
 8005278:	5802541c 	.word	0x5802541c
 800527c:	58025430 	.word	0x58025430
 8005280:	58025444 	.word	0x58025444
 8005284:	58025458 	.word	0x58025458
 8005288:	5802546c 	.word	0x5802546c
 800528c:	58025480 	.word	0x58025480
 8005290:	58025494 	.word	0x58025494

08005294 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e237      	b.n	8005716 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2280      	movs	r2, #128	@ 0x80
 80052b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e22c      	b.n	8005716 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5c      	ldr	r2, [pc, #368]	@ (8005434 <HAL_DMA_Abort_IT+0x1a0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005438 <HAL_DMA_Abort_IT+0x1a4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a59      	ldr	r2, [pc, #356]	@ (800543c <HAL_DMA_Abort_IT+0x1a8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a58      	ldr	r2, [pc, #352]	@ (8005440 <HAL_DMA_Abort_IT+0x1ac>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a56      	ldr	r2, [pc, #344]	@ (8005444 <HAL_DMA_Abort_IT+0x1b0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a55      	ldr	r2, [pc, #340]	@ (8005448 <HAL_DMA_Abort_IT+0x1b4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a53      	ldr	r2, [pc, #332]	@ (800544c <HAL_DMA_Abort_IT+0x1b8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a52      	ldr	r2, [pc, #328]	@ (8005450 <HAL_DMA_Abort_IT+0x1bc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a50      	ldr	r2, [pc, #320]	@ (8005454 <HAL_DMA_Abort_IT+0x1c0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a4f      	ldr	r2, [pc, #316]	@ (8005458 <HAL_DMA_Abort_IT+0x1c4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a4d      	ldr	r2, [pc, #308]	@ (800545c <HAL_DMA_Abort_IT+0x1c8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a4c      	ldr	r2, [pc, #304]	@ (8005460 <HAL_DMA_Abort_IT+0x1cc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a4a      	ldr	r2, [pc, #296]	@ (8005464 <HAL_DMA_Abort_IT+0x1d0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a49      	ldr	r2, [pc, #292]	@ (8005468 <HAL_DMA_Abort_IT+0x1d4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a47      	ldr	r2, [pc, #284]	@ (800546c <HAL_DMA_Abort_IT+0x1d8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_Abort_IT+0xc8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a46      	ldr	r2, [pc, #280]	@ (8005470 <HAL_DMA_Abort_IT+0x1dc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Abort_IT+0xcc>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_DMA_Abort_IT+0xce>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8086 	beq.w	8005474 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2204      	movs	r2, #4
 800536c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2f      	ldr	r2, [pc, #188]	@ (8005434 <HAL_DMA_Abort_IT+0x1a0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d04a      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2e      	ldr	r2, [pc, #184]	@ (8005438 <HAL_DMA_Abort_IT+0x1a4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d045      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <HAL_DMA_Abort_IT+0x1a8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d040      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2b      	ldr	r2, [pc, #172]	@ (8005440 <HAL_DMA_Abort_IT+0x1ac>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d03b      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <HAL_DMA_Abort_IT+0x1b0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d036      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a28      	ldr	r2, [pc, #160]	@ (8005448 <HAL_DMA_Abort_IT+0x1b4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d031      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a26      	ldr	r2, [pc, #152]	@ (800544c <HAL_DMA_Abort_IT+0x1b8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02c      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a25      	ldr	r2, [pc, #148]	@ (8005450 <HAL_DMA_Abort_IT+0x1bc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d027      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a23      	ldr	r2, [pc, #140]	@ (8005454 <HAL_DMA_Abort_IT+0x1c0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d022      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a22      	ldr	r2, [pc, #136]	@ (8005458 <HAL_DMA_Abort_IT+0x1c4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a20      	ldr	r2, [pc, #128]	@ (800545c <HAL_DMA_Abort_IT+0x1c8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <HAL_DMA_Abort_IT+0x1cc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005464 <HAL_DMA_Abort_IT+0x1d0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <HAL_DMA_Abort_IT+0x1d4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <HAL_DMA_Abort_IT+0x1d8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_DMA_Abort_IT+0x17c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <HAL_DMA_Abort_IT+0x1dc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <HAL_DMA_Abort_IT+0x18e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e178      	b.n	8005714 <HAL_DMA_Abort_IT+0x480>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e16f      	b.n	8005714 <HAL_DMA_Abort_IT+0x480>
 8005434:	40020010 	.word	0x40020010
 8005438:	40020028 	.word	0x40020028
 800543c:	40020040 	.word	0x40020040
 8005440:	40020058 	.word	0x40020058
 8005444:	40020070 	.word	0x40020070
 8005448:	40020088 	.word	0x40020088
 800544c:	400200a0 	.word	0x400200a0
 8005450:	400200b8 	.word	0x400200b8
 8005454:	40020410 	.word	0x40020410
 8005458:	40020428 	.word	0x40020428
 800545c:	40020440 	.word	0x40020440
 8005460:	40020458 	.word	0x40020458
 8005464:	40020470 	.word	0x40020470
 8005468:	40020488 	.word	0x40020488
 800546c:	400204a0 	.word	0x400204a0
 8005470:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 020e 	bic.w	r2, r2, #14
 8005482:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6c      	ldr	r2, [pc, #432]	@ (800563c <HAL_DMA_Abort_IT+0x3a8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04a      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6b      	ldr	r2, [pc, #428]	@ (8005640 <HAL_DMA_Abort_IT+0x3ac>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d045      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a69      	ldr	r2, [pc, #420]	@ (8005644 <HAL_DMA_Abort_IT+0x3b0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d040      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a68      	ldr	r2, [pc, #416]	@ (8005648 <HAL_DMA_Abort_IT+0x3b4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03b      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a66      	ldr	r2, [pc, #408]	@ (800564c <HAL_DMA_Abort_IT+0x3b8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d036      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a65      	ldr	r2, [pc, #404]	@ (8005650 <HAL_DMA_Abort_IT+0x3bc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d031      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a63      	ldr	r2, [pc, #396]	@ (8005654 <HAL_DMA_Abort_IT+0x3c0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02c      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a62      	ldr	r2, [pc, #392]	@ (8005658 <HAL_DMA_Abort_IT+0x3c4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d027      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a60      	ldr	r2, [pc, #384]	@ (800565c <HAL_DMA_Abort_IT+0x3c8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005660 <HAL_DMA_Abort_IT+0x3cc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01d      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005664 <HAL_DMA_Abort_IT+0x3d0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005668 <HAL_DMA_Abort_IT+0x3d4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5a      	ldr	r2, [pc, #360]	@ (800566c <HAL_DMA_Abort_IT+0x3d8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a59      	ldr	r2, [pc, #356]	@ (8005670 <HAL_DMA_Abort_IT+0x3dc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a57      	ldr	r2, [pc, #348]	@ (8005674 <HAL_DMA_Abort_IT+0x3e0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_DMA_Abort_IT+0x290>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_DMA_Abort_IT+0x3e4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <HAL_DMA_Abort_IT+0x2a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e007      	b.n	8005546 <HAL_DMA_Abort_IT+0x2b2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <HAL_DMA_Abort_IT+0x3a8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d072      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3a      	ldr	r2, [pc, #232]	@ (8005640 <HAL_DMA_Abort_IT+0x3ac>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d06d      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a39      	ldr	r2, [pc, #228]	@ (8005644 <HAL_DMA_Abort_IT+0x3b0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d068      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a37      	ldr	r2, [pc, #220]	@ (8005648 <HAL_DMA_Abort_IT+0x3b4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d063      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a36      	ldr	r2, [pc, #216]	@ (800564c <HAL_DMA_Abort_IT+0x3b8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d05e      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a34      	ldr	r2, [pc, #208]	@ (8005650 <HAL_DMA_Abort_IT+0x3bc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d059      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a33      	ldr	r2, [pc, #204]	@ (8005654 <HAL_DMA_Abort_IT+0x3c0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d054      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a31      	ldr	r2, [pc, #196]	@ (8005658 <HAL_DMA_Abort_IT+0x3c4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d04f      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a30      	ldr	r2, [pc, #192]	@ (800565c <HAL_DMA_Abort_IT+0x3c8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04a      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <HAL_DMA_Abort_IT+0x3cc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d045      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <HAL_DMA_Abort_IT+0x3d0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d040      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005668 <HAL_DMA_Abort_IT+0x3d4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <HAL_DMA_Abort_IT+0x3d8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d036      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a28      	ldr	r2, [pc, #160]	@ (8005670 <HAL_DMA_Abort_IT+0x3dc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a27      	ldr	r2, [pc, #156]	@ (8005674 <HAL_DMA_Abort_IT+0x3e0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02c      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a25      	ldr	r2, [pc, #148]	@ (8005678 <HAL_DMA_Abort_IT+0x3e4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d027      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a24      	ldr	r2, [pc, #144]	@ (800567c <HAL_DMA_Abort_IT+0x3e8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <HAL_DMA_Abort_IT+0x3ec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01d      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <HAL_DMA_Abort_IT+0x3f0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1f      	ldr	r2, [pc, #124]	@ (8005688 <HAL_DMA_Abort_IT+0x3f4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1e      	ldr	r2, [pc, #120]	@ (800568c <HAL_DMA_Abort_IT+0x3f8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1c      	ldr	r2, [pc, #112]	@ (8005690 <HAL_DMA_Abort_IT+0x3fc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1b      	ldr	r2, [pc, #108]	@ (8005694 <HAL_DMA_Abort_IT+0x400>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_Abort_IT+0x3a2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a19      	ldr	r2, [pc, #100]	@ (8005698 <HAL_DMA_Abort_IT+0x404>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d132      	bne.n	800569c <HAL_DMA_Abort_IT+0x408>
 8005636:	2301      	movs	r3, #1
 8005638:	e031      	b.n	800569e <HAL_DMA_Abort_IT+0x40a>
 800563a:	bf00      	nop
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
 800567c:	58025408 	.word	0x58025408
 8005680:	5802541c 	.word	0x5802541c
 8005684:	58025430 	.word	0x58025430
 8005688:	58025444 	.word	0x58025444
 800568c:	58025458 	.word	0x58025458
 8005690:	5802546c 	.word	0x5802546c
 8005694:	58025480 	.word	0x58025480
 8005698:	58025494 	.word	0x58025494
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d028      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop

08005720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800572e:	4b89      	ldr	r3, [pc, #548]	@ (8005954 <HAL_GPIO_Init+0x234>)
 8005730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005732:	e194      	b.n	8005a5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2101      	movs	r1, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8186 	beq.w	8005a58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d005      	beq.n	8005764 <HAL_GPIO_Init+0x44>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d130      	bne.n	80057c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	2203      	movs	r2, #3
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800579a:	2201      	movs	r2, #1
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0201 	and.w	r2, r3, #1
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d017      	beq.n	8005802 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d123      	bne.n	8005856 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	08da      	lsrs	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3208      	adds	r2, #8
 8005816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	220f      	movs	r2, #15
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	08da      	lsrs	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3208      	adds	r2, #8
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	2203      	movs	r2, #3
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80e0 	beq.w	8005a58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005898:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <HAL_GPIO_Init+0x238>)
 800589a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800589e:	4a2e      	ldr	r2, [pc, #184]	@ (8005958 <HAL_GPIO_Init+0x238>)
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <HAL_GPIO_Init+0x238>)
 80058aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058b6:	4a29      	ldr	r2, [pc, #164]	@ (800595c <HAL_GPIO_Init+0x23c>)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	3302      	adds	r3, #2
 80058be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	220f      	movs	r2, #15
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a20      	ldr	r2, [pc, #128]	@ (8005960 <HAL_GPIO_Init+0x240>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d052      	beq.n	8005988 <HAL_GPIO_Init+0x268>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <HAL_GPIO_Init+0x244>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d031      	beq.n	800594e <HAL_GPIO_Init+0x22e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <HAL_GPIO_Init+0x248>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d02b      	beq.n	800594a <HAL_GPIO_Init+0x22a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1d      	ldr	r2, [pc, #116]	@ (800596c <HAL_GPIO_Init+0x24c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d025      	beq.n	8005946 <HAL_GPIO_Init+0x226>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005970 <HAL_GPIO_Init+0x250>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01f      	beq.n	8005942 <HAL_GPIO_Init+0x222>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <HAL_GPIO_Init+0x254>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d019      	beq.n	800593e <HAL_GPIO_Init+0x21e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1a      	ldr	r2, [pc, #104]	@ (8005978 <HAL_GPIO_Init+0x258>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_GPIO_Init+0x21a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a19      	ldr	r2, [pc, #100]	@ (800597c <HAL_GPIO_Init+0x25c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00d      	beq.n	8005936 <HAL_GPIO_Init+0x216>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <HAL_GPIO_Init+0x260>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d007      	beq.n	8005932 <HAL_GPIO_Init+0x212>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a17      	ldr	r2, [pc, #92]	@ (8005984 <HAL_GPIO_Init+0x264>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <HAL_GPIO_Init+0x20e>
 800592a:	2309      	movs	r3, #9
 800592c:	e02d      	b.n	800598a <HAL_GPIO_Init+0x26a>
 800592e:	230a      	movs	r3, #10
 8005930:	e02b      	b.n	800598a <HAL_GPIO_Init+0x26a>
 8005932:	2308      	movs	r3, #8
 8005934:	e029      	b.n	800598a <HAL_GPIO_Init+0x26a>
 8005936:	2307      	movs	r3, #7
 8005938:	e027      	b.n	800598a <HAL_GPIO_Init+0x26a>
 800593a:	2306      	movs	r3, #6
 800593c:	e025      	b.n	800598a <HAL_GPIO_Init+0x26a>
 800593e:	2305      	movs	r3, #5
 8005940:	e023      	b.n	800598a <HAL_GPIO_Init+0x26a>
 8005942:	2304      	movs	r3, #4
 8005944:	e021      	b.n	800598a <HAL_GPIO_Init+0x26a>
 8005946:	2303      	movs	r3, #3
 8005948:	e01f      	b.n	800598a <HAL_GPIO_Init+0x26a>
 800594a:	2302      	movs	r3, #2
 800594c:	e01d      	b.n	800598a <HAL_GPIO_Init+0x26a>
 800594e:	2301      	movs	r3, #1
 8005950:	e01b      	b.n	800598a <HAL_GPIO_Init+0x26a>
 8005952:	bf00      	nop
 8005954:	58000080 	.word	0x58000080
 8005958:	58024400 	.word	0x58024400
 800595c:	58000400 	.word	0x58000400
 8005960:	58020000 	.word	0x58020000
 8005964:	58020400 	.word	0x58020400
 8005968:	58020800 	.word	0x58020800
 800596c:	58020c00 	.word	0x58020c00
 8005970:	58021000 	.word	0x58021000
 8005974:	58021400 	.word	0x58021400
 8005978:	58021800 	.word	0x58021800
 800597c:	58021c00 	.word	0x58021c00
 8005980:	58022000 	.word	0x58022000
 8005984:	58022400 	.word	0x58022400
 8005988:	2300      	movs	r3, #0
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	f002 0203 	and.w	r2, r2, #3
 8005990:	0092      	lsls	r2, r2, #2
 8005992:	4093      	lsls	r3, r2
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800599a:	4938      	ldr	r1, [pc, #224]	@ (8005a7c <HAL_GPIO_Init+0x35c>)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	3302      	adds	r3, #2
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f ae63 	bne.w	8005734 <HAL_GPIO_Init+0x14>
  }
}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	3724      	adds	r7, #36	@ 0x24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	58000400 	.word	0x58000400

08005a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a90:	787b      	ldrb	r3, [r7, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a9c:	e003      	b.n	8005aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	041a      	lsls	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005abc:	4a08      	ldr	r2, [pc, #32]	@ (8005ae0 <HAL_HSEM_FastTake+0x2c>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3320      	adds	r3, #32
 8005ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac6:	4a07      	ldr	r2, [pc, #28]	@ (8005ae4 <HAL_HSEM_FastTake+0x30>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	58026400 	.word	0x58026400
 8005ae4:	80000300 	.word	0x80000300

08005ae8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005af2:	4906      	ldr	r1, [pc, #24]	@ (8005b0c <HAL_HSEM_Release+0x24>)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	58026400 	.word	0x58026400

08005b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e08b      	b.n	8005c3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fe fa40 	bl	8003fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	@ 0x24
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	e006      	b.n	8005b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d108      	bne.n	8005bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	e007      	b.n	8005bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6859      	ldr	r1, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c44 <HAL_I2C_Init+0x134>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69d9      	ldr	r1, [r3, #28]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	02008000 	.word	0x02008000

08005c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	461a      	mov	r2, r3
 8005c54:	460b      	mov	r3, r1
 8005c56:	817b      	strh	r3, [r7, #10]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	f040 80fd 	bne.w	8005e64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x30>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0f6      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c80:	f7fe fece 	bl	8004a20 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2319      	movs	r3, #25
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fa24 	bl	80060e0 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0e1      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	@ 0x21
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	893a      	ldrh	r2, [r7, #8]
 8005cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2bff      	cmp	r3, #255	@ 0xff
 8005cd2:	d906      	bls.n	8005ce2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	22ff      	movs	r2, #255	@ 0xff
 8005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e007      	b.n	8005cf2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d024      	beq.n	8005d44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	3301      	adds	r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	8979      	ldrh	r1, [r7, #10]
 8005d36:	4b4e      	ldr	r3, [pc, #312]	@ (8005e70 <HAL_I2C_Master_Transmit+0x228>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fc1f 	bl	8006580 <I2C_TransferConfig>
 8005d42:	e066      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	8979      	ldrh	r1, [r7, #10]
 8005d4c:	4b48      	ldr	r3, [pc, #288]	@ (8005e70 <HAL_I2C_Master_Transmit+0x228>)
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fc14 	bl	8006580 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d58:	e05b      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	6a39      	ldr	r1, [r7, #32]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fa17 	bl	8006192 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e07b      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	781a      	ldrb	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d034      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x1ca>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d130      	bne.n	8005e12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2180      	movs	r1, #128	@ 0x80
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f990 	bl	80060e0 <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e04d      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2bff      	cmp	r3, #255	@ 0xff
 8005dd2:	d90e      	bls.n	8005df2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	22ff      	movs	r2, #255	@ 0xff
 8005dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	8979      	ldrh	r1, [r7, #10]
 8005de2:	2300      	movs	r3, #0
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fbc8 	bl	8006580 <I2C_TransferConfig>
 8005df0:	e00f      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	8979      	ldrh	r1, [r7, #10]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fbb7 	bl	8006580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d19e      	bne.n	8005d5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	6a39      	ldr	r1, [r7, #32]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f9fd 	bl	8006220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01a      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2220      	movs	r2, #32
 8005e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <HAL_I2C_Master_Transmit+0x22c>)
 8005e44:	400b      	ands	r3, r1
 8005e46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	80002000 	.word	0x80002000
 8005e74:	fe00e800 	.word	0xfe00e800

08005e78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	461a      	mov	r2, r3
 8005e84:	460b      	mov	r3, r1
 8005e86:	817b      	strh	r3, [r7, #10]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	f040 80db 	bne.w	8006050 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_I2C_Master_Receive+0x30>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0d4      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eb0:	f7fe fdb6 	bl	8004a20 <HAL_GetTick>
 8005eb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	2319      	movs	r3, #25
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f90c 	bl	80060e0 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e0bf      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2222      	movs	r2, #34	@ 0x22
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2210      	movs	r2, #16
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	893a      	ldrh	r2, [r7, #8]
 8005ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2bff      	cmp	r3, #255	@ 0xff
 8005f02:	d90e      	bls.n	8005f22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	22ff      	movs	r2, #255	@ 0xff
 8005f08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	8979      	ldrh	r1, [r7, #10]
 8005f12:	4b52      	ldr	r3, [pc, #328]	@ (800605c <HAL_I2C_Master_Receive+0x1e4>)
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fb30 	bl	8006580 <I2C_TransferConfig>
 8005f20:	e06d      	b.n	8005ffe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	8979      	ldrh	r1, [r7, #10]
 8005f34:	4b49      	ldr	r3, [pc, #292]	@ (800605c <HAL_I2C_Master_Receive+0x1e4>)
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fb1f 	bl	8006580 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005f42:	e05c      	b.n	8005ffe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	6a39      	ldr	r1, [r7, #32]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f9ad 	bl	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e07c      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d034      	beq.n	8005ffe <HAL_I2C_Master_Receive+0x186>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d130      	bne.n	8005ffe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2180      	movs	r1, #128	@ 0x80
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f89a 	bl	80060e0 <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e04d      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2bff      	cmp	r3, #255	@ 0xff
 8005fbe:	d90e      	bls.n	8005fde <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	22ff      	movs	r2, #255	@ 0xff
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	8979      	ldrh	r1, [r7, #10]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fad2 	bl	8006580 <I2C_TransferConfig>
 8005fdc:	e00f      	b.n	8005ffe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	8979      	ldrh	r1, [r7, #10]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fac1 	bl	8006580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d19d      	bne.n	8005f44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	6a39      	ldr	r1, [r7, #32]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f907 	bl	8006220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e01a      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2220      	movs	r2, #32
 8006022:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <HAL_I2C_Master_Receive+0x1e8>)
 8006030:	400b      	ands	r3, r1
 8006032:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	80002400 	.word	0x80002400
 8006060:	fe00e800 	.word	0xfe00e800

08006064 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006072:	b2db      	uxtb	r3, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d007      	beq.n	80060d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	619a      	str	r2, [r3, #24]
  }
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060f0:	e03b      	b.n	800616a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f962 	bl	80063c0 <I2C_IsErrorOccurred>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e041      	b.n	800618a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d02d      	beq.n	800616a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fe fc87 	bl	8004a20 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x44>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d122      	bne.n	800616a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	429a      	cmp	r2, r3
 8006140:	d113      	bne.n	800616a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e00f      	b.n	800618a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d0b4      	beq.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800619e:	e033      	b.n	8006208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f90b 	bl	80063c0 <I2C_IsErrorOccurred>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e031      	b.n	8006218 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d025      	beq.n	8006208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	f7fe fc30 	bl	8004a20 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11a      	bne.n	8006208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d013      	beq.n	8006208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e007      	b.n	8006218 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d1c4      	bne.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800622c:	e02f      	b.n	800628e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f8c4 	bl	80063c0 <I2C_IsErrorOccurred>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e02d      	b.n	800629e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006242:	f7fe fbed 	bl	8004a20 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11a      	bne.n	800628e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b20      	cmp	r3, #32
 8006264:	d013      	beq.n	800628e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e007      	b.n	800629e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b20      	cmp	r3, #32
 800629a:	d1c8      	bne.n	800622e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80062b8:	e071      	b.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f87e 	bl	80063c0 <I2C_IsErrorOccurred>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d13b      	bne.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d138      	bne.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d105      	bne.n	80062fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d121      	bne.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2210      	movs	r2, #16
 8006310:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2204      	movs	r2, #4
 8006316:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2220      	movs	r2, #32
 800631e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800632c:	400b      	ands	r3, r1
 800632e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
 800634c:	e002      	b.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006354:	f7fe fb64 	bl	8004a20 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d116      	bne.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b04      	cmp	r3, #4
 800637c:	d00f      	beq.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d002      	beq.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d083      	beq.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	@ 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d068      	beq.n	80064be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2210      	movs	r2, #16
 80063f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063f4:	e049      	b.n	800648a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d045      	beq.n	800648a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fe fb0f 	bl	8004a20 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <I2C_IsErrorOccurred+0x54>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d13a      	bne.n	800648a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006426:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006436:	d121      	bne.n	800647c <I2C_IsErrorOccurred+0xbc>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643e:	d01d      	beq.n	800647c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	2b20      	cmp	r3, #32
 8006444:	d01a      	beq.n	800647c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006454:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006456:	f7fe fae3 	bl	8004a20 <HAL_GetTick>
 800645a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800645c:	e00e      	b.n	800647c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800645e:	f7fe fadf 	bl	8004a20 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b19      	cmp	r3, #25
 800646a:	d907      	bls.n	800647c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f043 0320 	orr.w	r3, r3, #32
 8006472:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800647a:	e006      	b.n	800648a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b20      	cmp	r3, #32
 8006488:	d1e9      	bne.n	800645e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b20      	cmp	r3, #32
 8006496:	d003      	beq.n	80064a0 <I2C_IsErrorOccurred+0xe0>
 8006498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0aa      	beq.n	80063f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d103      	bne.n	80064b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2220      	movs	r2, #32
 80064ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	f043 0302 	orr.w	r3, r3, #2
 800651a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800652c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01c      	beq.n	800656e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fdaf 	bl	8006098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6859      	ldr	r1, [r3, #4]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <I2C_IsErrorOccurred+0x1bc>)
 8006546:	400b      	ands	r3, r1
 8006548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800656e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006572:	4618      	mov	r0, r3
 8006574:	3728      	adds	r7, #40	@ 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	fe00e800 	.word	0xfe00e800

08006580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	817b      	strh	r3, [r7, #10]
 800658e:	4613      	mov	r3, r2
 8006590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006598:	7a7b      	ldrb	r3, [r7, #9]
 800659a:	041b      	lsls	r3, r3, #16
 800659c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	0d5b      	lsrs	r3, r3, #21
 80065ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <I2C_TransferConfig+0x60>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	43db      	mvns	r3, r3
 80065c4:	ea02 0103 	and.w	r1, r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	03ff63ff 	.word	0x03ff63ff

080065e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d138      	bne.n	800666c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006604:	2302      	movs	r3, #2
 8006606:	e032      	b.n	800666e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	@ 0x24
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	e000      	b.n	800666e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800666c:	2302      	movs	r3, #2
  }
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b20      	cmp	r3, #32
 800668e:	d139      	bne.n	8006704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800669a:	2302      	movs	r3, #2
 800669c:	e033      	b.n	8006706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2224      	movs	r2, #36	@ 0x24
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800671c:	4b29      	ldr	r3, [pc, #164]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	2b06      	cmp	r3, #6
 8006726:	d00a      	beq.n	800673e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006728:	4b26      	ldr	r3, [pc, #152]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d001      	beq.n	800673a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e040      	b.n	80067bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e03e      	b.n	80067bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800673e:	4b21      	ldr	r3, [pc, #132]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006746:	491f      	ldr	r1, [pc, #124]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4313      	orrs	r3, r2
 800674c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800674e:	f7fe f967 	bl	8004a20 <HAL_GetTick>
 8006752:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006754:	e009      	b.n	800676a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006756:	f7fe f963 	bl	8004a20 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006764:	d901      	bls.n	800676a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e028      	b.n	80067bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800676a:	4b16      	ldr	r3, [pc, #88]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006776:	d1ee      	bne.n	8006756 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b1e      	cmp	r3, #30
 800677c:	d008      	beq.n	8006790 <HAL_PWREx_ConfigSupply+0x7c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b2e      	cmp	r3, #46	@ 0x2e
 8006782:	d005      	beq.n	8006790 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b1d      	cmp	r3, #29
 8006788:	d002      	beq.n	8006790 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b2d      	cmp	r3, #45	@ 0x2d
 800678e:	d114      	bne.n	80067ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006790:	f7fe f946 	bl	8004a20 <HAL_GetTick>
 8006794:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006796:	e009      	b.n	80067ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006798:	f7fe f942 	bl	8004a20 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067a6:	d901      	bls.n	80067ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e007      	b.n	80067bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b8:	d1ee      	bne.n	8006798 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	58024800 	.word	0x58024800

080067c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	@ 0x30
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f000 bc48 	b.w	800706c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8088 	beq.w	80068fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ea:	4b99      	ldr	r3, [pc, #612]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067f4:	4b96      	ldr	r3, [pc, #600]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d007      	beq.n	8006810 <HAL_RCC_OscConfig+0x48>
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	2b18      	cmp	r3, #24
 8006804:	d111      	bne.n	800682a <HAL_RCC_OscConfig+0x62>
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006810:	4b8f      	ldr	r3, [pc, #572]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d06d      	beq.n	80068f8 <HAL_RCC_OscConfig+0x130>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d169      	bne.n	80068f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f000 bc21 	b.w	800706c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006832:	d106      	bne.n	8006842 <HAL_RCC_OscConfig+0x7a>
 8006834:	4b86      	ldr	r3, [pc, #536]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a85      	ldr	r2, [pc, #532]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800683a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e02e      	b.n	80068a0 <HAL_RCC_OscConfig+0xd8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10c      	bne.n	8006864 <HAL_RCC_OscConfig+0x9c>
 800684a:	4b81      	ldr	r3, [pc, #516]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a80      	ldr	r2, [pc, #512]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	4b7e      	ldr	r3, [pc, #504]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7d      	ldr	r2, [pc, #500]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800685c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e01d      	b.n	80068a0 <HAL_RCC_OscConfig+0xd8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0xc0>
 800686e:	4b78      	ldr	r3, [pc, #480]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a77      	ldr	r2, [pc, #476]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4b75      	ldr	r3, [pc, #468]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a74      	ldr	r2, [pc, #464]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0xd8>
 8006888:	4b71      	ldr	r3, [pc, #452]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a70      	ldr	r2, [pc, #448]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800688e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4b6e      	ldr	r3, [pc, #440]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a6d      	ldr	r2, [pc, #436]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800689a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800689e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d013      	beq.n	80068d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fe f8ba 	bl	8004a20 <HAL_GetTick>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b0:	f7fe f8b6 	bl	8004a20 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	@ 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e3d4      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068c2:	4b63      	ldr	r3, [pc, #396]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0xe8>
 80068ce:	e014      	b.n	80068fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fe f8a6 	bl	8004a20 <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fe f8a2 	bl	8004a20 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	@ 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e3c0      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068ea:	4b59      	ldr	r3, [pc, #356]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f0      	bne.n	80068d8 <HAL_RCC_OscConfig+0x110>
 80068f6:	e000      	b.n	80068fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80ca 	beq.w	8006a9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006908:	4b51      	ldr	r3, [pc, #324]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006910:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006912:	4b4f      	ldr	r3, [pc, #316]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_RCC_OscConfig+0x166>
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2b18      	cmp	r3, #24
 8006922:	d156      	bne.n	80069d2 <HAL_RCC_OscConfig+0x20a>
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d151      	bne.n	80069d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800692e:	4b48      	ldr	r3, [pc, #288]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_RCC_OscConfig+0x17e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e392      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006946:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 0219 	bic.w	r2, r3, #25
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	493f      	ldr	r1, [pc, #252]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fe f862 	bl	8004a20 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006960:	f7fe f85e 	bl	8004a20 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e37c      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006972:	4b37      	ldr	r3, [pc, #220]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697e:	f7fe f87f 	bl	8004a80 <HAL_GetREVID>
 8006982:	4603      	mov	r3, r0
 8006984:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006988:	4293      	cmp	r3, r2
 800698a:	d817      	bhi.n	80069bc <HAL_RCC_OscConfig+0x1f4>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	d108      	bne.n	80069a6 <HAL_RCC_OscConfig+0x1de>
 8006994:	4b2e      	ldr	r3, [pc, #184]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800699c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a4:	e07a      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	031b      	lsls	r3, r3, #12
 80069b4:	4926      	ldr	r1, [pc, #152]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ba:	e06f      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069bc:	4b24      	ldr	r3, [pc, #144]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	061b      	lsls	r3, r3, #24
 80069ca:	4921      	ldr	r1, [pc, #132]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d0:	e064      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d047      	beq.n	8006a6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069da:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 0219 	bic.w	r2, r3, #25
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	491a      	ldr	r1, [pc, #104]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fe f818 	bl	8004a20 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f4:	f7fe f814 	bl	8004a20 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e332      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a06:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a12:	f7fe f835 	bl	8004a80 <HAL_GetREVID>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d819      	bhi.n	8006a54 <HAL_RCC_OscConfig+0x28c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	d108      	bne.n	8006a3a <HAL_RCC_OscConfig+0x272>
 8006a28:	4b09      	ldr	r3, [pc, #36]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a30:	4a07      	ldr	r2, [pc, #28]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a36:	6053      	str	r3, [r2, #4]
 8006a38:	e030      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
 8006a3a:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	031b      	lsls	r3, r3, #12
 8006a48:	4901      	ldr	r1, [pc, #4]	@ (8006a50 <HAL_RCC_OscConfig+0x288>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	604b      	str	r3, [r1, #4]
 8006a4e:	e025      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
 8006a50:	58024400 	.word	0x58024400
 8006a54:	4b9a      	ldr	r3, [pc, #616]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	4997      	ldr	r1, [pc, #604]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	604b      	str	r3, [r1, #4]
 8006a68:	e018      	b.n	8006a9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a6a:	4b95      	ldr	r3, [pc, #596]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a94      	ldr	r2, [pc, #592]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a76:	f7fd ffd3 	bl	8004a20 <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7e:	f7fd ffcf 	bl	8004a20 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e2ed      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a90:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80a9 	beq.w	8006bfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aaa:	4b85      	ldr	r3, [pc, #532]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ab2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ab4:	4b82      	ldr	r3, [pc, #520]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d007      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x308>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b18      	cmp	r3, #24
 8006ac4:	d13a      	bne.n	8006b3c <HAL_RCC_OscConfig+0x374>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d135      	bne.n	8006b3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x320>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e2c1      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ae8:	f7fd ffca 	bl	8004a80 <HAL_GetREVID>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d817      	bhi.n	8006b26 <HAL_RCC_OscConfig+0x35e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d108      	bne.n	8006b10 <HAL_RCC_OscConfig+0x348>
 8006afe:	4b70      	ldr	r3, [pc, #448]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b06:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b0e:	e075      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b10:	4b6b      	ldr	r3, [pc, #428]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	069b      	lsls	r3, r3, #26
 8006b1e:	4968      	ldr	r1, [pc, #416]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b24:	e06a      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b26:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	061b      	lsls	r3, r3, #24
 8006b34:	4962      	ldr	r1, [pc, #392]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b3a:	e05f      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d042      	beq.n	8006bca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b44:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5d      	ldr	r2, [pc, #372]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fd ff66 	bl	8004a20 <HAL_GetTick>
 8006b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b58:	f7fd ff62 	bl	8004a20 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e280      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b6a:	4b55      	ldr	r3, [pc, #340]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b76:	f7fd ff83 	bl	8004a80 <HAL_GetREVID>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d817      	bhi.n	8006bb4 <HAL_RCC_OscConfig+0x3ec>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d108      	bne.n	8006b9e <HAL_RCC_OscConfig+0x3d6>
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b94:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b9a:	6053      	str	r3, [r2, #4]
 8006b9c:	e02e      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
 8006b9e:	4b48      	ldr	r3, [pc, #288]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	069b      	lsls	r3, r3, #26
 8006bac:	4944      	ldr	r1, [pc, #272]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	604b      	str	r3, [r1, #4]
 8006bb2:	e023      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
 8006bb4:	4b42      	ldr	r3, [pc, #264]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	493f      	ldr	r1, [pc, #252]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60cb      	str	r3, [r1, #12]
 8006bc8:	e018      	b.n	8006bfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bca:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a3c      	ldr	r2, [pc, #240]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd6:	f7fd ff23 	bl	8004a20 <HAL_GetTick>
 8006bda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bde:	f7fd ff1f 	bl	8004a20 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e23d      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bf0:	4b33      	ldr	r3, [pc, #204]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f0      	bne.n	8006bde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d036      	beq.n	8006c76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d019      	beq.n	8006c44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c10:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c14:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fd ff00 	bl	8004a20 <HAL_GetTick>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c24:	f7fd fefc 	bl	8004a20 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e21a      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c36:	4b22      	ldr	r3, [pc, #136]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0x45c>
 8006c42:	e018      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c44:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c48:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fd fee6 	bl	8004a20 <HAL_GetTick>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fd fee2 	bl	8004a20 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e200      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c6a:	4b15      	ldr	r3, [pc, #84]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d039      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01c      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c96:	f7fd fec3 	bl	8004a20 <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c9e:	f7fd febf 	bl	8004a20 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e1dd      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cb0:	4b03      	ldr	r3, [pc, #12]	@ (8006cc0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCC_OscConfig+0x4d6>
 8006cbc:	e01b      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
 8006cbe:	bf00      	nop
 8006cc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cc4:	4b9b      	ldr	r3, [pc, #620]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a9a      	ldr	r2, [pc, #616]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cd0:	f7fd fea6 	bl	8004a20 <HAL_GetTick>
 8006cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd8:	f7fd fea2 	bl	8004a20 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e1c0      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cea:	4b92      	ldr	r3, [pc, #584]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8081 	beq.w	8006e06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d04:	4b8c      	ldr	r3, [pc, #560]	@ (8006f38 <HAL_RCC_OscConfig+0x770>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a8b      	ldr	r2, [pc, #556]	@ (8006f38 <HAL_RCC_OscConfig+0x770>)
 8006d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d10:	f7fd fe86 	bl	8004a20 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d18:	f7fd fe82 	bl	8004a20 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b64      	cmp	r3, #100	@ 0x64
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e1a0      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d2a:	4b83      	ldr	r3, [pc, #524]	@ (8006f38 <HAL_RCC_OscConfig+0x770>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d106      	bne.n	8006d4c <HAL_RCC_OscConfig+0x584>
 8006d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d42:	4a7c      	ldr	r2, [pc, #496]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d4a:	e02d      	b.n	8006da8 <HAL_RCC_OscConfig+0x5e0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <HAL_RCC_OscConfig+0x5a6>
 8006d54:	4b77      	ldr	r3, [pc, #476]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d58:	4a76      	ldr	r2, [pc, #472]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d60:	4b74      	ldr	r3, [pc, #464]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d64:	4a73      	ldr	r2, [pc, #460]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d66:	f023 0304 	bic.w	r3, r3, #4
 8006d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCC_OscConfig+0x5e0>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x5c8>
 8006d76:	4b6f      	ldr	r3, [pc, #444]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d7c:	f043 0304 	orr.w	r3, r3, #4
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d82:	4b6c      	ldr	r3, [pc, #432]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	4a6b      	ldr	r2, [pc, #428]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0x5e0>
 8006d90:	4b68      	ldr	r3, [pc, #416]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d94:	4a67      	ldr	r2, [pc, #412]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9c:	4b65      	ldr	r3, [pc, #404]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	4a64      	ldr	r2, [pc, #400]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006da2:	f023 0304 	bic.w	r3, r3, #4
 8006da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fd fe36 	bl	8004a20 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fd fe32 	bl	8004a20 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e14e      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dce:	4b59      	ldr	r3, [pc, #356]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ee      	beq.n	8006db8 <HAL_RCC_OscConfig+0x5f0>
 8006dda:	e014      	b.n	8006e06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fd fe20 	bl	8004a20 <HAL_GetTick>
 8006de0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fd fe1c 	bl	8004a20 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e138      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ee      	bne.n	8006de4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 812d 	beq.w	800706a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e10:	4b48      	ldr	r3, [pc, #288]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e18:	2b18      	cmp	r3, #24
 8006e1a:	f000 80bd 	beq.w	8006f98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	f040 809e 	bne.w	8006f64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e28:	4b42      	ldr	r3, [pc, #264]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a41      	ldr	r2, [pc, #260]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fd fdf4 	bl	8004a20 <HAL_GetTick>
 8006e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fd fdf0 	bl	8004a20 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e10e      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e4e:	4b39      	ldr	r3, [pc, #228]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e5a:	4b36      	ldr	r3, [pc, #216]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e5e:	4b37      	ldr	r3, [pc, #220]	@ (8006f3c <HAL_RCC_OscConfig+0x774>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e6a:	0112      	lsls	r2, r2, #4
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	4931      	ldr	r1, [pc, #196]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e82:	3b01      	subs	r3, #1
 8006e84:	025b      	lsls	r3, r3, #9
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	061b      	lsls	r3, r3, #24
 8006ea0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ea4:	4923      	ldr	r1, [pc, #140]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006eaa:	4b22      	ldr	r3, [pc, #136]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	4a21      	ldr	r2, [pc, #132]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eba:	4b21      	ldr	r3, [pc, #132]	@ (8006f40 <HAL_RCC_OscConfig+0x778>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	491b      	ldr	r1, [pc, #108]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006eca:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	f023 020c 	bic.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	4917      	ldr	r1, [pc, #92]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006edc:	4b15      	ldr	r3, [pc, #84]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	f023 0202 	bic.w	r2, r3, #2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee8:	4912      	ldr	r1, [pc, #72]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006eee:	4b11      	ldr	r3, [pc, #68]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	4a10      	ldr	r2, [pc, #64]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efa:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	4a0d      	ldr	r2, [pc, #52]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f06:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f12:	4b08      	ldr	r3, [pc, #32]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	4a07      	ldr	r2, [pc, #28]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f1e:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a04      	ldr	r2, [pc, #16]	@ (8006f34 <HAL_RCC_OscConfig+0x76c>)
 8006f24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2a:	f7fd fd79 	bl	8004a20 <HAL_GetTick>
 8006f2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f30:	e011      	b.n	8006f56 <HAL_RCC_OscConfig+0x78e>
 8006f32:	bf00      	nop
 8006f34:	58024400 	.word	0x58024400
 8006f38:	58024800 	.word	0x58024800
 8006f3c:	fffffc0c 	.word	0xfffffc0c
 8006f40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f44:	f7fd fd6c 	bl	8004a20 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e08a      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f56:	4b47      	ldr	r3, [pc, #284]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x77c>
 8006f62:	e082      	b.n	800706a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f64:	4b43      	ldr	r3, [pc, #268]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a42      	ldr	r2, [pc, #264]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fd fd56 	bl	8004a20 <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f78:	f7fd fd52 	bl	8004a20 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e070      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0x7b0>
 8006f96:	e068      	b.n	800706a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f98:	4b36      	ldr	r3, [pc, #216]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f9e:	4b35      	ldr	r3, [pc, #212]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d031      	beq.n	8007010 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f003 0203 	and.w	r2, r3, #3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d12a      	bne.n	8007010 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d122      	bne.n	8007010 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d11a      	bne.n	8007010 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	0a5b      	lsrs	r3, r3, #9
 8006fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d111      	bne.n	8007010 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d108      	bne.n	8007010 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0e1b      	lsrs	r3, r3, #24
 8007002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d001      	beq.n	8007014 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e02b      	b.n	800706c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007014:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8007016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800701e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d01f      	beq.n	800706a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800702a:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	4a11      	ldr	r2, [pc, #68]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007036:	f7fd fcf3 	bl	8004a20 <HAL_GetTick>
 800703a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800703c:	bf00      	nop
 800703e:	f7fd fcef 	bl	8004a20 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	4293      	cmp	r3, r2
 8007048:	d0f9      	beq.n	800703e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800704a:	4b0a      	ldr	r3, [pc, #40]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 800704c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704e:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <HAL_RCC_OscConfig+0x8b0>)
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007056:	00d2      	lsls	r2, r2, #3
 8007058:	4906      	ldr	r1, [pc, #24]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 800705a:	4313      	orrs	r3, r2
 800705c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800705e:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a04      	ldr	r2, [pc, #16]	@ (8007074 <HAL_RCC_OscConfig+0x8ac>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3730      	adds	r7, #48	@ 0x30
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	58024400 	.word	0x58024400
 8007078:	ffff0007 	.word	0xffff0007

0800707c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e19c      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007090:	4b8a      	ldr	r3, [pc, #552]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d910      	bls.n	80070c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709e:	4b87      	ldr	r3, [pc, #540]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f023 020f 	bic.w	r2, r3, #15
 80070a6:	4985      	ldr	r1, [pc, #532]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ae:	4b83      	ldr	r3, [pc, #524]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d001      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e184      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d010      	beq.n	80070ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	4b7b      	ldr	r3, [pc, #492]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070d8:	429a      	cmp	r2, r3
 80070da:	d908      	bls.n	80070ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070dc:	4b78      	ldr	r3, [pc, #480]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	4975      	ldr	r1, [pc, #468]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d010      	beq.n	800711c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	4b70      	ldr	r3, [pc, #448]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007106:	429a      	cmp	r2, r3
 8007108:	d908      	bls.n	800711c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800710a:	4b6d      	ldr	r3, [pc, #436]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	496a      	ldr	r1, [pc, #424]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007118:	4313      	orrs	r3, r2
 800711a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	4b64      	ldr	r3, [pc, #400]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007134:	429a      	cmp	r2, r3
 8007136:	d908      	bls.n	800714a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007138:	4b61      	ldr	r3, [pc, #388]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	495e      	ldr	r1, [pc, #376]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007146:	4313      	orrs	r3, r2
 8007148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d010      	beq.n	8007178 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	4b59      	ldr	r3, [pc, #356]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007162:	429a      	cmp	r2, r3
 8007164:	d908      	bls.n	8007178 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007166:	4b56      	ldr	r3, [pc, #344]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	4953      	ldr	r1, [pc, #332]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007174:	4313      	orrs	r3, r2
 8007176:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d010      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	4b4d      	ldr	r3, [pc, #308]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	429a      	cmp	r2, r3
 8007192:	d908      	bls.n	80071a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007194:	4b4a      	ldr	r3, [pc, #296]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f023 020f 	bic.w	r2, r3, #15
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	4947      	ldr	r1, [pc, #284]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d055      	beq.n	800725e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071b2:	4b43      	ldr	r3, [pc, #268]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	4940      	ldr	r1, [pc, #256]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d107      	bne.n	80071dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071cc:	4b3c      	ldr	r3, [pc, #240]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d121      	bne.n	800721c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0f6      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d107      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e4:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d115      	bne.n	800721c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0ea      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d107      	bne.n	800720c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071fc:	4b30      	ldr	r3, [pc, #192]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0de      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800720c:	4b2c      	ldr	r3, [pc, #176]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0d6      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800721c:	4b28      	ldr	r3, [pc, #160]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f023 0207 	bic.w	r2, r3, #7
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4925      	ldr	r1, [pc, #148]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800722a:	4313      	orrs	r3, r2
 800722c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722e:	f7fd fbf7 	bl	8004a20 <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007234:	e00a      	b.n	800724c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007236:	f7fd fbf3 	bl	8004a20 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007244:	4293      	cmp	r3, r2
 8007246:	d901      	bls.n	800724c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e0be      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724c:	4b1c      	ldr	r3, [pc, #112]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	429a      	cmp	r2, r3
 800725c:	d1eb      	bne.n	8007236 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d010      	beq.n	800728c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	4b14      	ldr	r3, [pc, #80]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	429a      	cmp	r2, r3
 8007278:	d208      	bcs.n	800728c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800727a:	4b11      	ldr	r3, [pc, #68]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f023 020f 	bic.w	r2, r3, #15
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	490e      	ldr	r1, [pc, #56]	@ (80072c0 <HAL_RCC_ClockConfig+0x244>)
 8007288:	4313      	orrs	r3, r2
 800728a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800728c:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d214      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 020f 	bic.w	r2, r3, #15
 80072a2:	4906      	ldr	r1, [pc, #24]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b04      	ldr	r3, [pc, #16]	@ (80072bc <HAL_RCC_ClockConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d005      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e086      	b.n	80073ca <HAL_RCC_ClockConfig+0x34e>
 80072bc:	52002000 	.word	0x52002000
 80072c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d010      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	4b3f      	ldr	r3, [pc, #252]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072dc:	429a      	cmp	r2, r3
 80072de:	d208      	bcs.n	80072f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072e0:	4b3c      	ldr	r3, [pc, #240]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4939      	ldr	r1, [pc, #228]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d010      	beq.n	8007320 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695a      	ldr	r2, [r3, #20]
 8007302:	4b34      	ldr	r3, [pc, #208]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800730a:	429a      	cmp	r2, r3
 800730c:	d208      	bcs.n	8007320 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800730e:	4b31      	ldr	r3, [pc, #196]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	492e      	ldr	r1, [pc, #184]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 800731c:	4313      	orrs	r3, r2
 800731e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	4b28      	ldr	r3, [pc, #160]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007338:	429a      	cmp	r2, r3
 800733a:	d208      	bcs.n	800734e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800733c:	4b25      	ldr	r3, [pc, #148]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	4922      	ldr	r1, [pc, #136]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 800734a:	4313      	orrs	r3, r2
 800734c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	4b1d      	ldr	r3, [pc, #116]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007366:	429a      	cmp	r2, r3
 8007368:	d208      	bcs.n	800737c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800736a:	4b1a      	ldr	r3, [pc, #104]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	4917      	ldr	r1, [pc, #92]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007378:	4313      	orrs	r3, r2
 800737a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800737c:	f000 f834 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b14      	ldr	r3, [pc, #80]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	4912      	ldr	r1, [pc, #72]	@ (80073d8 <HAL_RCC_ClockConfig+0x35c>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
 8007398:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800739a:	4b0e      	ldr	r3, [pc, #56]	@ (80073d4 <HAL_RCC_ClockConfig+0x358>)
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	4a0d      	ldr	r2, [pc, #52]	@ (80073d8 <HAL_RCC_ClockConfig+0x35c>)
 80073a4:	5cd3      	ldrb	r3, [r2, r3]
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	fa22 f303 	lsr.w	r3, r2, r3
 80073b0:	4a0a      	ldr	r2, [pc, #40]	@ (80073dc <HAL_RCC_ClockConfig+0x360>)
 80073b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073b4:	4a0a      	ldr	r2, [pc, #40]	@ (80073e0 <HAL_RCC_ClockConfig+0x364>)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80073ba:	4b0a      	ldr	r3, [pc, #40]	@ (80073e4 <HAL_RCC_ClockConfig+0x368>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd f952 	bl	8004668 <HAL_InitTick>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
 80073d8:	08016de4 	.word	0x08016de4
 80073dc:	24000004 	.word	0x24000004
 80073e0:	24000000 	.word	0x24000000
 80073e4:	24000014 	.word	0x24000014

080073e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	@ 0x24
 80073ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ee:	4bb3      	ldr	r3, [pc, #716]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073f6:	2b18      	cmp	r3, #24
 80073f8:	f200 8155 	bhi.w	80076a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007469 	.word	0x08007469
 8007408:	080076a7 	.word	0x080076a7
 800740c:	080076a7 	.word	0x080076a7
 8007410:	080076a7 	.word	0x080076a7
 8007414:	080076a7 	.word	0x080076a7
 8007418:	080076a7 	.word	0x080076a7
 800741c:	080076a7 	.word	0x080076a7
 8007420:	080076a7 	.word	0x080076a7
 8007424:	0800748f 	.word	0x0800748f
 8007428:	080076a7 	.word	0x080076a7
 800742c:	080076a7 	.word	0x080076a7
 8007430:	080076a7 	.word	0x080076a7
 8007434:	080076a7 	.word	0x080076a7
 8007438:	080076a7 	.word	0x080076a7
 800743c:	080076a7 	.word	0x080076a7
 8007440:	080076a7 	.word	0x080076a7
 8007444:	08007495 	.word	0x08007495
 8007448:	080076a7 	.word	0x080076a7
 800744c:	080076a7 	.word	0x080076a7
 8007450:	080076a7 	.word	0x080076a7
 8007454:	080076a7 	.word	0x080076a7
 8007458:	080076a7 	.word	0x080076a7
 800745c:	080076a7 	.word	0x080076a7
 8007460:	080076a7 	.word	0x080076a7
 8007464:	0800749b 	.word	0x0800749b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007468:	4b94      	ldr	r3, [pc, #592]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007474:	4b91      	ldr	r3, [pc, #580]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	08db      	lsrs	r3, r3, #3
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	4a90      	ldr	r2, [pc, #576]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
 8007484:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007486:	e111      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007488:	4b8d      	ldr	r3, [pc, #564]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800748a:	61bb      	str	r3, [r7, #24]
      break;
 800748c:	e10e      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800748e:	4b8d      	ldr	r3, [pc, #564]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007490:	61bb      	str	r3, [r7, #24]
      break;
 8007492:	e10b      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007494:	4b8c      	ldr	r3, [pc, #560]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007496:	61bb      	str	r3, [r7, #24]
      break;
 8007498:	e108      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800749a:	4b88      	ldr	r3, [pc, #544]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80074a4:	4b85      	ldr	r3, [pc, #532]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	091b      	lsrs	r3, r3, #4
 80074aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074b0:	4b82      	ldr	r3, [pc, #520]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80074ba:	4b80      	ldr	r3, [pc, #512]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074be:	08db      	lsrs	r3, r3, #3
 80074c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80e1 	beq.w	80076a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	f000 8083 	beq.w	80075ec <HAL_RCC_GetSysClockFreq+0x204>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	f200 80a1 	bhi.w	8007630 <HAL_RCC_GetSysClockFreq+0x248>
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_RCC_GetSysClockFreq+0x114>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d056      	beq.n	80075a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80074fa:	e099      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074fc:	4b6f      	ldr	r3, [pc, #444]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b00      	cmp	r3, #0
 8007506:	d02d      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007508:	4b6c      	ldr	r3, [pc, #432]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	4a6b      	ldr	r2, [pc, #428]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	4b62      	ldr	r3, [pc, #392]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a02 	vldr	s12, [r7, #8]
 8007546:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80076cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007562:	e087      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80076d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007576:	4b51      	ldr	r3, [pc, #324]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007586:	ed97 6a02 	vldr	s12, [r7, #8]
 800758a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80076cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800758e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800759a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075a6:	e065      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80076d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ba:	4b40      	ldr	r3, [pc, #256]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80076cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80075d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075ea:	e043      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80075fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fe:	4b2f      	ldr	r3, [pc, #188]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007612:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80076cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800762e:	e021      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80076d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b1e      	ldr	r3, [pc, #120]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a02 	vldr	s12, [r7, #8]
 8007656:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80076cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007672:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007674:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007678:	0a5b      	lsrs	r3, r3, #9
 800767a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767e:	3301      	adds	r3, #1
 8007680:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800768c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007698:	ee17 3a90 	vmov	r3, s15
 800769c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800769e:	e005      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
      break;
 80076a4:	e002      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80076a6:	4b07      	ldr	r3, [pc, #28]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076a8:	61bb      	str	r3, [r7, #24]
      break;
 80076aa:	bf00      	nop
  }

  return sysclockfreq;
 80076ac:	69bb      	ldr	r3, [r7, #24]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3724      	adds	r7, #36	@ 0x24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	58024400 	.word	0x58024400
 80076c0:	03d09000 	.word	0x03d09000
 80076c4:	003d0900 	.word	0x003d0900
 80076c8:	007a1200 	.word	0x007a1200
 80076cc:	46000000 	.word	0x46000000
 80076d0:	4c742400 	.word	0x4c742400
 80076d4:	4a742400 	.word	0x4a742400
 80076d8:	4af42400 	.word	0x4af42400

080076dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076e2:	f7ff fe81 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 80076e6:	4602      	mov	r2, r0
 80076e8:	4b10      	ldr	r3, [pc, #64]	@ (800772c <HAL_RCC_GetHCLKFreq+0x50>)
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	490f      	ldr	r1, [pc, #60]	@ (8007730 <HAL_RCC_GetHCLKFreq+0x54>)
 80076f4:	5ccb      	ldrb	r3, [r1, r3]
 80076f6:	f003 031f 	and.w	r3, r3, #31
 80076fa:	fa22 f303 	lsr.w	r3, r2, r3
 80076fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_RCC_GetHCLKFreq+0x50>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	4a09      	ldr	r2, [pc, #36]	@ (8007730 <HAL_RCC_GetHCLKFreq+0x54>)
 800770a:	5cd3      	ldrb	r3, [r2, r3]
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	4a07      	ldr	r2, [pc, #28]	@ (8007734 <HAL_RCC_GetHCLKFreq+0x58>)
 8007718:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800771a:	4a07      	ldr	r2, [pc, #28]	@ (8007738 <HAL_RCC_GetHCLKFreq+0x5c>)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007720:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <HAL_RCC_GetHCLKFreq+0x58>)
 8007722:	681b      	ldr	r3, [r3, #0]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	58024400 	.word	0x58024400
 8007730:	08016de4 	.word	0x08016de4
 8007734:	24000004 	.word	0x24000004
 8007738:	24000000 	.word	0x24000000

0800773c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007740:	f7ff ffcc 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 8007744:	4602      	mov	r2, r0
 8007746:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	4904      	ldr	r1, [pc, #16]	@ (8007764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007752:	5ccb      	ldrb	r3, [r1, r3]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800775c:	4618      	mov	r0, r3
 800775e:	bd80      	pop	{r7, pc}
 8007760:	58024400 	.word	0x58024400
 8007764:	08016de4 	.word	0x08016de4

08007768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800776c:	f7ff ffb6 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b06      	ldr	r3, [pc, #24]	@ (800778c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4904      	ldr	r1, [pc, #16]	@ (8007790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	58024400 	.word	0x58024400
 8007790:	08016de4 	.word	0x08016de4

08007794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	223f      	movs	r2, #63	@ 0x3f
 80077a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0207 	and.w	r2, r3, #7
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80077b0:	4b17      	ldr	r3, [pc, #92]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80077bc:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80077c8:	4b11      	ldr	r3, [pc, #68]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80077d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80077ec:	4b08      	ldr	r3, [pc, #32]	@ (8007810 <HAL_RCC_GetClockConfig+0x7c>)
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <HAL_RCC_GetClockConfig+0x80>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	58024400 	.word	0x58024400
 8007814:	52002000 	.word	0x52002000

08007818 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800781c:	b0ca      	sub	sp, #296	@ 0x128
 800781e:	af00      	add	r7, sp, #0
 8007820:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007824:	2300      	movs	r3, #0
 8007826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800782a:	2300      	movs	r3, #0
 800782c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800783c:	2500      	movs	r5, #0
 800783e:	ea54 0305 	orrs.w	r3, r4, r5
 8007842:	d049      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800784a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800784e:	d02f      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007850:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007854:	d828      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785a:	d01a      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800785c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007860:	d822      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800786a:	d007      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800786c:	e01c      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786e:	4bb8      	ldr	r3, [pc, #736]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	4ab7      	ldr	r2, [pc, #732]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800787a:	e01a      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007880:	3308      	adds	r3, #8
 8007882:	2102      	movs	r1, #2
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fc8f 	bl	80091a8 <RCCEx_PLL2_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007890:	e00f      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007896:	3328      	adds	r3, #40	@ 0x28
 8007898:	2102      	movs	r1, #2
 800789a:	4618      	mov	r0, r3
 800789c:	f001 fd36 	bl	800930c <RCCEx_PLL3_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078a6:	e004      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ae:	e000      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80078b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078ba:	4ba5      	ldr	r3, [pc, #660]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078c8:	4aa1      	ldr	r2, [pc, #644]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ca:	430b      	orrs	r3, r1
 80078cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80078ce:	e003      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80078e4:	f04f 0900 	mov.w	r9, #0
 80078e8:	ea58 0309 	orrs.w	r3, r8, r9
 80078ec:	d047      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d82a      	bhi.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007915 	.word	0x08007915
 8007904:	08007923 	.word	0x08007923
 8007908:	08007939 	.word	0x08007939
 800790c:	08007957 	.word	0x08007957
 8007910:	08007957 	.word	0x08007957
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007914:	4b8e      	ldr	r3, [pc, #568]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	4a8d      	ldr	r2, [pc, #564]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800791a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800791e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007920:	e01a      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	3308      	adds	r3, #8
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fc3c 	bl	80091a8 <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007936:	e00f      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	3328      	adds	r3, #40	@ 0x28
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fce3 	bl	800930c <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800794c:	e004      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007954:	e000      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007960:	4b7b      	ldr	r3, [pc, #492]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007964:	f023 0107 	bic.w	r1, r3, #7
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796e:	4a78      	ldr	r2, [pc, #480]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007970:	430b      	orrs	r3, r1
 8007972:	6513      	str	r3, [r2, #80]	@ 0x50
 8007974:	e003      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800798a:	f04f 0b00 	mov.w	fp, #0
 800798e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007992:	d04c      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799e:	d030      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a4:	d829      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a8:	d02d      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80079aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80079ac:	d825      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079ae:	2b80      	cmp	r3, #128	@ 0x80
 80079b0:	d018      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80079b2:	2b80      	cmp	r3, #128	@ 0x80
 80079b4:	d821      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	d007      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80079be:	e01c      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c0:	4b63      	ldr	r3, [pc, #396]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a62      	ldr	r2, [pc, #392]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079cc:	e01c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	3308      	adds	r3, #8
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fbe6 	bl	80091a8 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079e2:	e011      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e8:	3328      	adds	r3, #40	@ 0x28
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fc8d 	bl	800930c <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a10:	4b4f      	ldr	r3, [pc, #316]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a24:	e003      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007a3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d053      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a5a:	d035      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a60:	d82e      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a66:	d031      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a6c:	d828      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a72:	d01a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a78:	d822      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a82:	d007      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007a84:	e01c      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a86:	4b32      	ldr	r3, [pc, #200]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	4a31      	ldr	r2, [pc, #196]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a92:	e01c      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fb83 	bl	80091a8 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007aa8:	e011      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	3328      	adds	r3, #40	@ 0x28
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fc2a 	bl	800930c <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007abe:	e006      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ac6:	e002      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ada:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aec:	e003      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b06:	2300      	movs	r3, #0
 8007b08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b10:	460b      	mov	r3, r1
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d056      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b22:	d038      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b28:	d831      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b2e:	d034      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b34:	d82b      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b3a:	d01d      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b40:	d825      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b4a:	d00a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b4c:	e01f      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b54:	4ba2      	ldr	r3, [pc, #648]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b58:	4aa1      	ldr	r2, [pc, #644]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b60:	e01c      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	3308      	adds	r3, #8
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 fb1c 	bl	80091a8 <RCCEx_PLL2_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b76:	e011      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	3328      	adds	r3, #40	@ 0x28
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fbc3 	bl	800930c <RCCEx_PLL3_Config>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b8c:	e006      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b94:	e002      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bb4:	4a8a      	ldr	r2, [pc, #552]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bba:	e003      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d03a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bea:	2b30      	cmp	r3, #48	@ 0x30
 8007bec:	d01f      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007bee:	2b30      	cmp	r3, #48	@ 0x30
 8007bf0:	d819      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d00c      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d815      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d019      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d111      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c02:	4b77      	ldr	r3, [pc, #476]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	4a76      	ldr	r2, [pc, #472]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c0e:	e011      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	3308      	adds	r3, #8
 8007c16:	2102      	movs	r1, #2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 fac5 	bl	80091a8 <RCCEx_PLL2_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c24:	e006      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c3c:	4b68      	ldr	r3, [pc, #416]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c4a:	4a65      	ldr	r2, [pc, #404]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c50:	e003      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4313      	orrs	r3, r2
 8007c78:	d051      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c84:	d035      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c8a:	d82e      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c90:	d031      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007c92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c96:	d828      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9c:	d01a      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca2:	d822      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cac:	d007      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007cae:	e01c      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cbc:	e01c      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fa6e 	bl	80091a8 <RCCEx_PLL2_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cd2:	e011      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	3328      	adds	r3, #40	@ 0x28
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fb15 	bl	800930c <RCCEx_PLL3_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ce8:	e006      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cf0:	e002      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d00:	4b37      	ldr	r3, [pc, #220]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0e:	4a34      	ldr	r2, [pc, #208]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d14:	e003      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	d056      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d48:	d033      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d4e:	d82c      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d54:	d02f      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d5a:	d826      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d60:	d02b      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d66:	d820      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d6c:	d012      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d72:	d81a      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d022      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d7c:	d115      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	3308      	adds	r3, #8
 8007d84:	2101      	movs	r1, #1
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fa0e 	bl	80091a8 <RCCEx_PLL2_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d92:	e015      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	3328      	adds	r3, #40	@ 0x28
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fab5 	bl	800930c <RCCEx_PLL3_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007db0:	e006      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007db2:	bf00      	nop
 8007db4:	e004      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007db6:	bf00      	nop
 8007db8:	e002      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dc8:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dcc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd6:	4a02      	ldr	r2, [pc, #8]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007dde:	bf00      	nop
 8007de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d055      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e18:	d033      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e1e:	d82c      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e24:	d02f      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2a:	d826      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e30:	d02b      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e36:	d820      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3c:	d012      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e42:	d81a      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d022      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e4c:	d115      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	3308      	adds	r3, #8
 8007e54:	2101      	movs	r1, #1
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 f9a6 	bl	80091a8 <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e62:	e015      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	3328      	adds	r3, #40	@ 0x28
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 fa4d 	bl	800930c <RCCEx_PLL3_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e78:	e00a      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e80:	e006      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e82:	bf00      	nop
 8007e84:	e004      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e86:	bf00      	nop
 8007e88:	e002      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e98:	4ba3      	ldr	r3, [pc, #652]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d037      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ee2:	d00e      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ee8:	d816      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef2:	d111      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	4a8b      	ldr	r2, [pc, #556]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f00:	e00f      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	3308      	adds	r3, #8
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 f94c 	bl	80091a8 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f16:	e004      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1e:	e000      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f38:	4a7b      	ldr	r2, [pc, #492]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4313      	orrs	r3, r2
 8007f66:	d039      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d81c      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007fb5 	.word	0x08007fb5
 8007f7c:	08007f89 	.word	0x08007f89
 8007f80:	08007f97 	.word	0x08007f97
 8007f84:	08007fb5 	.word	0x08007fb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f88:	4b67      	ldr	r3, [pc, #412]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	4a66      	ldr	r2, [pc, #408]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f94:	e00f      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 f902 	bl	80091a8 <RCCEx_PLL2_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007faa:	e004      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fb2:	e000      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc2:	f023 0103 	bic.w	r1, r3, #3
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fcc:	4a56      	ldr	r2, [pc, #344]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fd2:	e003      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fec:	2300      	movs	r3, #0
 8007fee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ff2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f000 809f 	beq.w	800813c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a4a      	ldr	r2, [pc, #296]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800800a:	f7fc fd09 	bl	8004a20 <HAL_GetTick>
 800800e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008012:	e00b      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008014:	f7fc fd04 	bl	8004a20 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b64      	cmp	r3, #100	@ 0x64
 8008022:	d903      	bls.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800802a:	e005      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800802c:	4b3f      	ldr	r3, [pc, #252]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0ed      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800803c:	2b00      	cmp	r3, #0
 800803e:	d179      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008040:	4b39      	ldr	r3, [pc, #228]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008042:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800804c:	4053      	eors	r3, r2
 800804e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d015      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008056:	4b34      	ldr	r3, [pc, #208]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800805e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008062:	4b31      	ldr	r3, [pc, #196]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	4a30      	ldr	r2, [pc, #192]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800806c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800806e:	4b2e      	ldr	r3, [pc, #184]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008072:	4a2d      	ldr	r2, [pc, #180]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008078:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800807a:	4a2b      	ldr	r2, [pc, #172]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800807c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008080:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800808a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808e:	d118      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008090:	f7fc fcc6 	bl	8004a20 <HAL_GetTick>
 8008094:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008098:	e00d      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800809a:	f7fc fcc1 	bl	8004a20 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d903      	bls.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80080b4:	e005      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0eb      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d129      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080da:	d10e      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80080dc:	4b12      	ldr	r3, [pc, #72]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080ec:	091a      	lsrs	r2, r3, #4
 80080ee:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6113      	str	r3, [r2, #16]
 80080f8:	e005      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80080fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008100:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008104:	6113      	str	r3, [r2, #16]
 8008106:	4b08      	ldr	r3, [pc, #32]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008108:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008116:	4a04      	ldr	r2, [pc, #16]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008118:	430b      	orrs	r3, r1
 800811a:	6713      	str	r3, [r2, #112]	@ 0x70
 800811c:	e00e      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008126:	e009      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008128:	58024400 	.word	0x58024400
 800812c:	58024800 	.word	0x58024800
 8008130:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f002 0301 	and.w	r3, r2, #1
 8008148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800814c:	2300      	movs	r3, #0
 800814e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008152:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008156:	460b      	mov	r3, r1
 8008158:	4313      	orrs	r3, r2
 800815a:	f000 8089 	beq.w	8008270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008164:	2b28      	cmp	r3, #40	@ 0x28
 8008166:	d86b      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008168:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008249 	.word	0x08008249
 8008174:	08008241 	.word	0x08008241
 8008178:	08008241 	.word	0x08008241
 800817c:	08008241 	.word	0x08008241
 8008180:	08008241 	.word	0x08008241
 8008184:	08008241 	.word	0x08008241
 8008188:	08008241 	.word	0x08008241
 800818c:	08008241 	.word	0x08008241
 8008190:	08008215 	.word	0x08008215
 8008194:	08008241 	.word	0x08008241
 8008198:	08008241 	.word	0x08008241
 800819c:	08008241 	.word	0x08008241
 80081a0:	08008241 	.word	0x08008241
 80081a4:	08008241 	.word	0x08008241
 80081a8:	08008241 	.word	0x08008241
 80081ac:	08008241 	.word	0x08008241
 80081b0:	0800822b 	.word	0x0800822b
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008241 	.word	0x08008241
 80081bc:	08008241 	.word	0x08008241
 80081c0:	08008241 	.word	0x08008241
 80081c4:	08008241 	.word	0x08008241
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008241 	.word	0x08008241
 80081d0:	08008249 	.word	0x08008249
 80081d4:	08008241 	.word	0x08008241
 80081d8:	08008241 	.word	0x08008241
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008241 	.word	0x08008241
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008241 	.word	0x08008241
 80081f0:	08008249 	.word	0x08008249
 80081f4:	08008241 	.word	0x08008241
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008241 	.word	0x08008241
 8008208:	08008241 	.word	0x08008241
 800820c:	08008241 	.word	0x08008241
 8008210:	08008249 	.word	0x08008249
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	3308      	adds	r3, #8
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f000 ffc3 	bl	80091a8 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008228:	e00f      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	3328      	adds	r3, #40	@ 0x28
 8008230:	2101      	movs	r1, #1
 8008232:	4618      	mov	r0, r3
 8008234:	f001 f86a 	bl	800930c <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800823e:	e004      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008246:	e000      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008252:	4bbf      	ldr	r3, [pc, #764]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008256:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008260:	4abb      	ldr	r2, [pc, #748]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6553      	str	r3, [r2, #84]	@ 0x54
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f002 0302 	and.w	r3, r2, #2
 800827c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008286:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d041      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008296:	2b05      	cmp	r3, #5
 8008298:	d824      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082ed 	.word	0x080082ed
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082cf 	.word	0x080082cf
 80082ac:	080082ed 	.word	0x080082ed
 80082b0:	080082ed 	.word	0x080082ed
 80082b4:	080082ed 	.word	0x080082ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082bc:	3308      	adds	r3, #8
 80082be:	2101      	movs	r1, #1
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 ff71 	bl	80091a8 <RCCEx_PLL2_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082cc:	e00f      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	3328      	adds	r3, #40	@ 0x28
 80082d4:	2101      	movs	r1, #1
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f818 	bl	800930c <RCCEx_PLL3_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082e2:	e004      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ea:	e000      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80082ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082f6:	4b96      	ldr	r3, [pc, #600]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fa:	f023 0107 	bic.w	r1, r3, #7
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008304:	4a92      	ldr	r2, [pc, #584]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008306:	430b      	orrs	r3, r1
 8008308:	6553      	str	r3, [r2, #84]	@ 0x54
 800830a:	e003      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f002 0304 	and.w	r3, r2, #4
 8008320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008324:	2300      	movs	r3, #0
 8008326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800832a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800832e:	460b      	mov	r3, r1
 8008330:	4313      	orrs	r3, r2
 8008332:	d044      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800833c:	2b05      	cmp	r3, #5
 800833e:	d825      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008340:	a201      	add	r2, pc, #4	@ (adr r2, 8008348 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008395 	.word	0x08008395
 800834c:	08008361 	.word	0x08008361
 8008350:	08008377 	.word	0x08008377
 8008354:	08008395 	.word	0x08008395
 8008358:	08008395 	.word	0x08008395
 800835c:	08008395 	.word	0x08008395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	3308      	adds	r3, #8
 8008366:	2101      	movs	r1, #1
 8008368:	4618      	mov	r0, r3
 800836a:	f000 ff1d 	bl	80091a8 <RCCEx_PLL2_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008374:	e00f      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	3328      	adds	r3, #40	@ 0x28
 800837c:	2101      	movs	r1, #1
 800837e:	4618      	mov	r0, r3
 8008380:	f000 ffc4 	bl	800930c <RCCEx_PLL3_Config>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800838a:	e004      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008392:	e000      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800839e:	4b6c      	ldr	r3, [pc, #432]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a2:	f023 0107 	bic.w	r1, r3, #7
 80083a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ae:	4a68      	ldr	r2, [pc, #416]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80083b4:	e003      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f002 0320 	and.w	r3, r2, #32
 80083ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083ce:	2300      	movs	r3, #0
 80083d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083d8:	460b      	mov	r3, r1
 80083da:	4313      	orrs	r3, r2
 80083dc:	d055      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ea:	d033      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80083ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083f0:	d82c      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f6:	d02f      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fc:	d826      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008402:	d02b      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008408:	d820      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800840a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008414:	d81a      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d022      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800841a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800841e:	d115      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	3308      	adds	r3, #8
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f000 febd 	bl	80091a8 <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008434:	e015      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	3328      	adds	r3, #40	@ 0x28
 800843c:	2102      	movs	r1, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f000 ff64 	bl	800930c <RCCEx_PLL3_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800844a:	e00a      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008452:	e006      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008454:	bf00      	nop
 8008456:	e004      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008458:	bf00      	nop
 800845a:	e002      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800845c:	bf00      	nop
 800845e:	e000      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800846a:	4b39      	ldr	r3, [pc, #228]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800847a:	4a35      	ldr	r2, [pc, #212]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800847c:	430b      	orrs	r3, r1
 800847e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008480:	e003      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800849a:	2300      	movs	r3, #0
 800849c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d058      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084b6:	d033      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80084b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084bc:	d82c      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	d02f      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80084c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c8:	d826      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084ce:	d02b      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80084d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084d4:	d820      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084da:	d012      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80084dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084e0:	d81a      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d022      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80084e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ea:	d115      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f0:	3308      	adds	r3, #8
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fe57 	bl	80091a8 <RCCEx_PLL2_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008500:	e015      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	3328      	adds	r3, #40	@ 0x28
 8008508:	2102      	movs	r1, #2
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fefe 	bl	800930c <RCCEx_PLL3_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008516:	e00a      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800851e:	e006      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008520:	bf00      	nop
 8008522:	e004      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008524:	bf00      	nop
 8008526:	e002      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008528:	bf00      	nop
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800852c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10e      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008536:	4b06      	ldr	r3, [pc, #24]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800853a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008546:	4a02      	ldr	r2, [pc, #8]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008548:	430b      	orrs	r3, r1
 800854a:	6593      	str	r3, [r2, #88]	@ 0x58
 800854c:	e006      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800856c:	2300      	movs	r3, #0
 800856e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008572:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008576:	460b      	mov	r3, r1
 8008578:	4313      	orrs	r3, r2
 800857a:	d055      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008584:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008588:	d033      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800858a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800858e:	d82c      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008594:	d02f      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800859a:	d826      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800859c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085a0:	d02b      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80085a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085a6:	d820      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ac:	d012      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80085ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b2:	d81a      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d022      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80085b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085bc:	d115      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	3308      	adds	r3, #8
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fdee 	bl	80091a8 <RCCEx_PLL2_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085d2:	e015      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d8:	3328      	adds	r3, #40	@ 0x28
 80085da:	2102      	movs	r1, #2
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fe95 	bl	800930c <RCCEx_PLL3_Config>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085e8:	e00a      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085f0:	e006      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085f2:	bf00      	nop
 80085f4:	e004      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085f6:	bf00      	nop
 80085f8:	e002      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085fa:	bf00      	nop
 80085fc:	e000      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10b      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008608:	4ba1      	ldr	r3, [pc, #644]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800860a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800860c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008618:	4a9d      	ldr	r2, [pc, #628]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800861a:	430b      	orrs	r3, r1
 800861c:	6593      	str	r3, [r2, #88]	@ 0x58
 800861e:	e003      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f002 0308 	and.w	r3, r2, #8
 8008634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008638:	2300      	movs	r3, #0
 800863a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800863e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d01e      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008654:	d10c      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865a:	3328      	adds	r3, #40	@ 0x28
 800865c:	2102      	movs	r1, #2
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fe54 	bl	800930c <RCCEx_PLL3_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008670:	4b87      	ldr	r3, [pc, #540]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008674:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008680:	4a83      	ldr	r2, [pc, #524]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008682:	430b      	orrs	r3, r1
 8008684:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f002 0310 	and.w	r3, r2, #16
 8008692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008696:	2300      	movs	r3, #0
 8008698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800869c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086a0:	460b      	mov	r3, r1
 80086a2:	4313      	orrs	r3, r2
 80086a4:	d01e      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b2:	d10c      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b8:	3328      	adds	r3, #40	@ 0x28
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fe25 	bl	800930c <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086ce:	4b70      	ldr	r3, [pc, #448]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086de:	4a6c      	ldr	r2, [pc, #432]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086f4:	2300      	movs	r3, #0
 80086f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80086fe:	460b      	mov	r3, r1
 8008700:	4313      	orrs	r3, r2
 8008702:	d03e      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800870c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008710:	d022      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008716:	d81b      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800871c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008720:	d00b      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008722:	e015      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	3308      	adds	r3, #8
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fd3b 	bl	80091a8 <RCCEx_PLL2_Config>
 8008732:	4603      	mov	r3, r0
 8008734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008738:	e00f      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873e:	3328      	adds	r3, #40	@ 0x28
 8008740:	2102      	movs	r1, #2
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fde2 	bl	800930c <RCCEx_PLL3_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800874e:	e004      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008756:	e000      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800875a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10b      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008762:	4b4b      	ldr	r3, [pc, #300]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008766:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008772:	4a47      	ldr	r2, [pc, #284]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008774:	430b      	orrs	r3, r1
 8008776:	6593      	str	r3, [r2, #88]	@ 0x58
 8008778:	e003      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800878e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008790:	2300      	movs	r3, #0
 8008792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008798:	460b      	mov	r3, r1
 800879a:	4313      	orrs	r3, r2
 800879c:	d03b      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087aa:	d01f      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80087ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087b0:	d818      	bhi.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80087b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b6:	d003      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80087b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087bc:	d007      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80087be:	e011      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c0:	4b33      	ldr	r3, [pc, #204]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c4:	4a32      	ldr	r2, [pc, #200]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087cc:	e00f      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d2:	3328      	adds	r3, #40	@ 0x28
 80087d4:	2101      	movs	r1, #1
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fd98 	bl	800930c <RCCEx_PLL3_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80087e2:	e004      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087ea:	e000      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80087ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087f6:	4b26      	ldr	r3, [pc, #152]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008806:	4a22      	ldr	r2, [pc, #136]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008808:	430b      	orrs	r3, r1
 800880a:	6553      	str	r3, [r2, #84]	@ 0x54
 800880c:	e003      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008822:	673b      	str	r3, [r7, #112]	@ 0x70
 8008824:	2300      	movs	r3, #0
 8008826:	677b      	str	r3, [r7, #116]	@ 0x74
 8008828:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800882c:	460b      	mov	r3, r1
 800882e:	4313      	orrs	r3, r2
 8008830:	d034      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008840:	d007      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008842:	e011      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008844:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	4a11      	ldr	r2, [pc, #68]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008850:	e00e      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	3308      	adds	r3, #8
 8008858:	2102      	movs	r1, #2
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fca4 	bl	80091a8 <RCCEx_PLL2_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008866:	e003      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800886e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10d      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008878:	4b05      	ldr	r3, [pc, #20]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800887c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008886:	4a02      	ldr	r2, [pc, #8]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008888:	430b      	orrs	r3, r1
 800888a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800888c:	e006      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80088a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088aa:	2300      	movs	r3, #0
 80088ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80088b2:	460b      	mov	r3, r1
 80088b4:	4313      	orrs	r3, r2
 80088b6:	d00c      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088bc:	3328      	adds	r3, #40	@ 0x28
 80088be:	2102      	movs	r1, #2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fd23 	bl	800930c <RCCEx_PLL3_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088de:	663b      	str	r3, [r7, #96]	@ 0x60
 80088e0:	2300      	movs	r3, #0
 80088e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80088e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80088e8:	460b      	mov	r3, r1
 80088ea:	4313      	orrs	r3, r2
 80088ec:	d038      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088fa:	d018      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80088fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008900:	d811      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008906:	d014      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800890c:	d80b      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d011      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008916:	d106      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008918:	4bc3      	ldr	r3, [pc, #780]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891c:	4ac2      	ldr	r2, [pc, #776]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008924:	e008      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800892c:	e004      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008940:	4bb9      	ldr	r3, [pc, #740]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008944:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008950:	4ab5      	ldr	r2, [pc, #724]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008952:	430b      	orrs	r3, r1
 8008954:	6553      	str	r3, [r2, #84]	@ 0x54
 8008956:	e003      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800896c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800896e:	2300      	movs	r3, #0
 8008970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008972:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008976:	460b      	mov	r3, r1
 8008978:	4313      	orrs	r3, r2
 800897a:	d009      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800897c:	4baa      	ldr	r3, [pc, #680]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800897e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008980:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800898a:	4aa7      	ldr	r2, [pc, #668]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898c:	430b      	orrs	r3, r1
 800898e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800899c:	653b      	str	r3, [r7, #80]	@ 0x50
 800899e:	2300      	movs	r3, #0
 80089a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80089a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80089a6:	460b      	mov	r3, r1
 80089a8:	4313      	orrs	r3, r2
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089ac:	4b9e      	ldr	r3, [pc, #632]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089bc:	4a9a      	ldr	r2, [pc, #616]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089be:	430b      	orrs	r3, r1
 80089c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80089ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d0:	2300      	movs	r3, #0
 80089d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089d8:	460b      	mov	r3, r1
 80089da:	4313      	orrs	r3, r2
 80089dc:	d009      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089de:	4b92      	ldr	r3, [pc, #584]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ec:	4a8e      	ldr	r2, [pc, #568]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ee:	430b      	orrs	r3, r1
 80089f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80089fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a00:	2300      	movs	r3, #0
 8008a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	d00e      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a0e:	4b86      	ldr	r3, [pc, #536]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	4a85      	ldr	r2, [pc, #532]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a18:	6113      	str	r3, [r2, #16]
 8008a1a:	4b83      	ldr	r3, [pc, #524]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a1c:	6919      	ldr	r1, [r3, #16]
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a26:	4a80      	ldr	r2, [pc, #512]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a48:	4b77      	ldr	r3, [pc, #476]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a56:	4a74      	ldr	r2, [pc, #464]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a72:	460b      	mov	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d00a      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a78:	4b6b      	ldr	r3, [pc, #428]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a88:	4a67      	ldr	r2, [pc, #412]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	2100      	movs	r1, #0
 8008a98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aa0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d011      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aae:	3308      	adds	r3, #8
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fb78 	bl	80091a8 <RCCEx_PLL2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6239      	str	r1, [r7, #32]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	d011      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	3308      	adds	r3, #8
 8008af0:	2101      	movs	r1, #1
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fb58 	bl	80091a8 <RCCEx_PLL2_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	2100      	movs	r1, #0
 8008b18:	61b9      	str	r1, [r7, #24]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b24:	460b      	mov	r3, r1
 8008b26:	4313      	orrs	r3, r2
 8008b28:	d011      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2e:	3308      	adds	r3, #8
 8008b30:	2102      	movs	r1, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fb38 	bl	80091a8 <RCCEx_PLL2_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	2100      	movs	r1, #0
 8008b58:	6139      	str	r1, [r7, #16]
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b64:	460b      	mov	r3, r1
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d011      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	3328      	adds	r3, #40	@ 0x28
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fbca 	bl	800930c <RCCEx_PLL3_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	2100      	movs	r1, #0
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	f003 0310 	and.w	r3, r3, #16
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	d011      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bae:	3328      	adds	r3, #40	@ 0x28
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fbaa 	bl	800930c <RCCEx_PLL3_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d011      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	3328      	adds	r3, #40	@ 0x28
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fb8a 	bl	800930c <RCCEx_PLL3_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008c0e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	e000      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c22:	46bd      	mov	sp, r7
 8008c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c28:	58024400 	.word	0x58024400

08008c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c30:	f7fe fd54 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 8008c34:	4602      	mov	r2, r0
 8008c36:	4b06      	ldr	r3, [pc, #24]	@ (8008c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	4904      	ldr	r1, [pc, #16]	@ (8008c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c42:	5ccb      	ldrb	r3, [r1, r3]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	58024400 	.word	0x58024400
 8008c54:	08016de4 	.word	0x08016de4

08008c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b089      	sub	sp, #36	@ 0x24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c60:	4ba1      	ldr	r3, [pc, #644]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	0b1b      	lsrs	r3, r3, #12
 8008c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c76:	4b9c      	ldr	r3, [pc, #624]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7a:	091b      	lsrs	r3, r3, #4
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c82:	4b99      	ldr	r3, [pc, #612]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c86:	08db      	lsrs	r3, r3, #3
 8008c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8111 	beq.w	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	f000 8083 	beq.w	8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	f200 80a1 	bhi.w	8008df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d056      	beq.n	8008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cc2:	e099      	b.n	8008df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cc4:	4b88      	ldr	r3, [pc, #544]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d02d      	beq.n	8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cd0:	4b85      	ldr	r3, [pc, #532]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	08db      	lsrs	r3, r3, #3
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	4a84      	ldr	r2, [pc, #528]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d2a:	e087      	b.n	8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6e:	e065      	b.n	8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d82:	4b59      	ldr	r3, [pc, #356]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db2:	e043      	b.n	8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc6:	4b48      	ldr	r3, [pc, #288]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df6:	e021      	b.n	8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0a:	4b37      	ldr	r3, [pc, #220]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	0a5b      	lsrs	r3, r3, #9
 8008e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e62:	ee17 2a90 	vmov	r2, s15
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e90:	ee17 2a90 	vmov	r2, s15
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e98:	4b13      	ldr	r3, [pc, #76]	@ (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	0e1b      	lsrs	r3, r3, #24
 8008e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ebe:	ee17 2a90 	vmov	r2, s15
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ec6:	e008      	b.n	8008eda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	609a      	str	r2, [r3, #8]
}
 8008eda:	bf00      	nop
 8008edc:	3724      	adds	r7, #36	@ 0x24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	03d09000 	.word	0x03d09000
 8008ef0:	46000000 	.word	0x46000000
 8008ef4:	4c742400 	.word	0x4c742400
 8008ef8:	4a742400 	.word	0x4a742400
 8008efc:	4af42400 	.word	0x4af42400

08008f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b089      	sub	sp, #36	@ 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f08:	4ba1      	ldr	r3, [pc, #644]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f003 0303 	and.w	r3, r3, #3
 8008f10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f12:	4b9f      	ldr	r3, [pc, #636]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f16:	0d1b      	lsrs	r3, r3, #20
 8008f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f2a:	4b99      	ldr	r3, [pc, #612]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2e:	08db      	lsrs	r3, r3, #3
 8008f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	fb02 f303 	mul.w	r3, r2, r3
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8111 	beq.w	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	f000 8083 	beq.w	800905c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	f200 80a1 	bhi.w	80090a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d056      	beq.n	8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f6a:	e099      	b.n	80090a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f6c:	4b88      	ldr	r3, [pc, #544]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d02d      	beq.n	8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f78:	4b85      	ldr	r3, [pc, #532]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	4a84      	ldr	r2, [pc, #528]	@ (8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fd2:	e087      	b.n	80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800919c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009016:	e065      	b.n	80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902a:	4b59      	ldr	r3, [pc, #356]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	ed97 6a03 	vldr	s12, [r7, #12]
 800903e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800904e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800905a:	e043      	b.n	80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	4b48      	ldr	r3, [pc, #288]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009082:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800909e:	e021      	b.n	80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	4b37      	ldr	r3, [pc, #220]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090e4:	4b2a      	ldr	r3, [pc, #168]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e8:	0a5b      	lsrs	r3, r3, #9
 80090ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800910a:	ee17 2a90 	vmov	r2, s15
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009112:	4b1f      	ldr	r3, [pc, #124]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800912c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009138:	ee17 2a90 	vmov	r2, s15
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009140:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	0e1b      	lsrs	r3, r3, #24
 8009146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914a:	ee07 3a90 	vmov	s15, r3
 800914e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800915a:	edd7 6a07 	vldr	s13, [r7, #28]
 800915e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009166:	ee17 2a90 	vmov	r2, s15
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800916e:	e008      	b.n	8009182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	609a      	str	r2, [r3, #8]
}
 8009182:	bf00      	nop
 8009184:	3724      	adds	r7, #36	@ 0x24
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	58024400 	.word	0x58024400
 8009194:	03d09000 	.word	0x03d09000
 8009198:	46000000 	.word	0x46000000
 800919c:	4c742400 	.word	0x4c742400
 80091a0:	4a742400 	.word	0x4a742400
 80091a4:	4af42400 	.word	0x4af42400

080091a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091b6:	4b53      	ldr	r3, [pc, #332]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d101      	bne.n	80091c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e099      	b.n	80092fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a4e      	ldr	r2, [pc, #312]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80091cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091d2:	f7fb fc25 	bl	8004a20 <HAL_GetTick>
 80091d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091d8:	e008      	b.n	80091ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091da:	f7fb fc21 	bl	8004a20 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e086      	b.n	80092fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091ec:	4b45      	ldr	r3, [pc, #276]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1f0      	bne.n	80091da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091f8:	4b42      	ldr	r3, [pc, #264]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80091fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	031b      	lsls	r3, r3, #12
 8009206:	493f      	ldr	r1, [pc, #252]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009208:	4313      	orrs	r3, r2
 800920a:	628b      	str	r3, [r1, #40]	@ 0x28
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	3b01      	subs	r3, #1
 8009212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	3b01      	subs	r3, #1
 800921c:	025b      	lsls	r3, r3, #9
 800921e:	b29b      	uxth	r3, r3
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	3b01      	subs	r3, #1
 8009228:	041b      	lsls	r3, r3, #16
 800922a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800922e:	431a      	orrs	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	3b01      	subs	r3, #1
 8009236:	061b      	lsls	r3, r3, #24
 8009238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800923c:	4931      	ldr	r1, [pc, #196]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 800923e:	4313      	orrs	r3, r2
 8009240:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009242:	4b30      	ldr	r3, [pc, #192]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	492d      	ldr	r1, [pc, #180]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009250:	4313      	orrs	r3, r2
 8009252:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009254:	4b2b      	ldr	r3, [pc, #172]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	f023 0220 	bic.w	r2, r3, #32
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	4928      	ldr	r1, [pc, #160]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009262:	4313      	orrs	r3, r2
 8009264:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009266:	4b27      	ldr	r3, [pc, #156]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926a:	4a26      	ldr	r2, [pc, #152]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 800926c:	f023 0310 	bic.w	r3, r3, #16
 8009270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009272:	4b24      	ldr	r3, [pc, #144]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009276:	4b24      	ldr	r3, [pc, #144]	@ (8009308 <RCCEx_PLL2_Config+0x160>)
 8009278:	4013      	ands	r3, r2
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	69d2      	ldr	r2, [r2, #28]
 800927e:	00d2      	lsls	r2, r2, #3
 8009280:	4920      	ldr	r1, [pc, #128]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009282:	4313      	orrs	r3, r2
 8009284:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009286:	4b1f      	ldr	r3, [pc, #124]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	4a1e      	ldr	r2, [pc, #120]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 800928c:	f043 0310 	orr.w	r3, r3, #16
 8009290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009298:	4b1a      	ldr	r3, [pc, #104]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 800929a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929c:	4a19      	ldr	r2, [pc, #100]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 800929e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092a4:	e00f      	b.n	80092c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d106      	bne.n	80092ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092ac:	4b15      	ldr	r3, [pc, #84]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	4a14      	ldr	r2, [pc, #80]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092b8:	e005      	b.n	80092c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092ba:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092be:	4a11      	ldr	r2, [pc, #68]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d2:	f7fb fba5 	bl	8004a20 <HAL_GetTick>
 80092d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092d8:	e008      	b.n	80092ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092da:	f7fb fba1 	bl	8004a20 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e006      	b.n	80092fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092ec:	4b05      	ldr	r3, [pc, #20]	@ (8009304 <RCCEx_PLL2_Config+0x15c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	58024400 	.word	0x58024400
 8009308:	ffff0007 	.word	0xffff0007

0800930c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800931a:	4b53      	ldr	r3, [pc, #332]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 800931c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d101      	bne.n	800932a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e099      	b.n	800945e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800932a:	4b4f      	ldr	r3, [pc, #316]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a4e      	ldr	r2, [pc, #312]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009336:	f7fb fb73 	bl	8004a20 <HAL_GetTick>
 800933a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800933c:	e008      	b.n	8009350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800933e:	f7fb fb6f 	bl	8004a20 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d901      	bls.n	8009350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e086      	b.n	800945e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009350:	4b45      	ldr	r3, [pc, #276]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f0      	bne.n	800933e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800935c:	4b42      	ldr	r3, [pc, #264]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	051b      	lsls	r3, r3, #20
 800936a:	493f      	ldr	r1, [pc, #252]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 800936c:	4313      	orrs	r3, r2
 800936e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	3b01      	subs	r3, #1
 8009376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	3b01      	subs	r3, #1
 8009380:	025b      	lsls	r3, r3, #9
 8009382:	b29b      	uxth	r3, r3
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	3b01      	subs	r3, #1
 800938c:	041b      	lsls	r3, r3, #16
 800938e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009392:	431a      	orrs	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	3b01      	subs	r3, #1
 800939a:	061b      	lsls	r3, r3, #24
 800939c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093a0:	4931      	ldr	r1, [pc, #196]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093a6:	4b30      	ldr	r3, [pc, #192]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	492d      	ldr	r1, [pc, #180]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	4928      	ldr	r1, [pc, #160]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ca:	4b27      	ldr	r3, [pc, #156]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	4a26      	ldr	r2, [pc, #152]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093d6:	4b24      	ldr	r3, [pc, #144]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093da:	4b24      	ldr	r3, [pc, #144]	@ (800946c <RCCEx_PLL3_Config+0x160>)
 80093dc:	4013      	ands	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	69d2      	ldr	r2, [r2, #28]
 80093e2:	00d2      	lsls	r2, r2, #3
 80093e4:	4920      	ldr	r1, [pc, #128]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009400:	4a19      	ldr	r2, [pc, #100]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009402:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009408:	e00f      	b.n	800942a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d106      	bne.n	800941e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009410:	4b15      	ldr	r3, [pc, #84]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	4a14      	ldr	r2, [pc, #80]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800941a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800941c:	e005      	b.n	800942a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800941e:	4b12      	ldr	r3, [pc, #72]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009422:	4a11      	ldr	r2, [pc, #68]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800942a:	4b0f      	ldr	r3, [pc, #60]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a0e      	ldr	r2, [pc, #56]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009436:	f7fb faf3 	bl	8004a20 <HAL_GetTick>
 800943a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800943c:	e008      	b.n	8009450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800943e:	f7fb faef 	bl	8004a20 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d901      	bls.n	8009450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e006      	b.n	800945e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009450:	4b05      	ldr	r3, [pc, #20]	@ (8009468 <RCCEx_PLL3_Config+0x15c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0f0      	beq.n	800943e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	58024400 	.word	0x58024400
 800946c:	ffff0007 	.word	0xffff0007

08009470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e049      	b.n	8009516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7fa ff44 	bl	8004324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f000 ff32 	bl	800a318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b01      	cmp	r3, #1
 8009532:	d001      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e054      	b.n	80095e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a26      	ldr	r2, [pc, #152]	@ (80095f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d022      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009562:	d01d      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a22      	ldr	r2, [pc, #136]	@ (80095f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d018      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a21      	ldr	r2, [pc, #132]	@ (80095f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d013      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1f      	ldr	r2, [pc, #124]	@ (80095fc <HAL_TIM_Base_Start_IT+0xdc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00e      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1e      	ldr	r2, [pc, #120]	@ (8009600 <HAL_TIM_Base_Start_IT+0xe0>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d009      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1c      	ldr	r2, [pc, #112]	@ (8009604 <HAL_TIM_Base_Start_IT+0xe4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x80>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a1b      	ldr	r2, [pc, #108]	@ (8009608 <HAL_TIM_Base_Start_IT+0xe8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d115      	bne.n	80095cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	4b19      	ldr	r3, [pc, #100]	@ (800960c <HAL_TIM_Base_Start_IT+0xec>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b06      	cmp	r3, #6
 80095b0:	d015      	beq.n	80095de <HAL_TIM_Base_Start_IT+0xbe>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095b8:	d011      	beq.n	80095de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0201 	orr.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ca:	e008      	b.n	80095de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0201 	orr.w	r2, r2, #1
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	e000      	b.n	80095e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40010000 	.word	0x40010000
 80095f4:	40000400 	.word	0x40000400
 80095f8:	40000800 	.word	0x40000800
 80095fc:	40000c00 	.word	0x40000c00
 8009600:	40010400 	.word	0x40010400
 8009604:	40001800 	.word	0x40001800
 8009608:	40014000 	.word	0x40014000
 800960c:	00010007 	.word	0x00010007

08009610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e049      	b.n	80096b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fa fe3a 	bl	80042b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f000 fe62 	bl	800a318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <HAL_TIM_PWM_Start+0x24>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	bf14      	ite	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	2300      	moveq	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	e03c      	b.n	800975e <HAL_TIM_PWM_Start+0x9e>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d109      	bne.n	80096fe <HAL_TIM_PWM_Start+0x3e>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	bf14      	ite	ne
 80096f6:	2301      	movne	r3, #1
 80096f8:	2300      	moveq	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	e02f      	b.n	800975e <HAL_TIM_PWM_Start+0x9e>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d109      	bne.n	8009718 <HAL_TIM_PWM_Start+0x58>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	e022      	b.n	800975e <HAL_TIM_PWM_Start+0x9e>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b0c      	cmp	r3, #12
 800971c:	d109      	bne.n	8009732 <HAL_TIM_PWM_Start+0x72>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b01      	cmp	r3, #1
 8009728:	bf14      	ite	ne
 800972a:	2301      	movne	r3, #1
 800972c:	2300      	moveq	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	e015      	b.n	800975e <HAL_TIM_PWM_Start+0x9e>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b10      	cmp	r3, #16
 8009736:	d109      	bne.n	800974c <HAL_TIM_PWM_Start+0x8c>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b01      	cmp	r3, #1
 8009742:	bf14      	ite	ne
 8009744:	2301      	movne	r3, #1
 8009746:	2300      	moveq	r3, #0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	e008      	b.n	800975e <HAL_TIM_PWM_Start+0x9e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	bf14      	ite	ne
 8009758:	2301      	movne	r3, #1
 800975a:	2300      	moveq	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e0a1      	b.n	80098aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <HAL_TIM_PWM_Start+0xb6>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009774:	e023      	b.n	80097be <HAL_TIM_PWM_Start+0xfe>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d104      	bne.n	8009786 <HAL_TIM_PWM_Start+0xc6>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009784:	e01b      	b.n	80097be <HAL_TIM_PWM_Start+0xfe>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d104      	bne.n	8009796 <HAL_TIM_PWM_Start+0xd6>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009794:	e013      	b.n	80097be <HAL_TIM_PWM_Start+0xfe>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b0c      	cmp	r3, #12
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Start+0xe6>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097a4:	e00b      	b.n	80097be <HAL_TIM_PWM_Start+0xfe>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d104      	bne.n	80097b6 <HAL_TIM_PWM_Start+0xf6>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097b4:	e003      	b.n	80097be <HAL_TIM_PWM_Start+0xfe>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2201      	movs	r2, #1
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 f9c0 	bl	800ab4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a38      	ldr	r2, [pc, #224]	@ (80098b4 <HAL_TIM_PWM_Start+0x1f4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_TIM_PWM_Start+0x13e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a37      	ldr	r2, [pc, #220]	@ (80098b8 <HAL_TIM_PWM_Start+0x1f8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_TIM_PWM_Start+0x13e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a35      	ldr	r2, [pc, #212]	@ (80098bc <HAL_TIM_PWM_Start+0x1fc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIM_PWM_Start+0x13e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a34      	ldr	r2, [pc, #208]	@ (80098c0 <HAL_TIM_PWM_Start+0x200>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIM_PWM_Start+0x13e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a32      	ldr	r2, [pc, #200]	@ (80098c4 <HAL_TIM_PWM_Start+0x204>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d101      	bne.n	8009802 <HAL_TIM_PWM_Start+0x142>
 80097fe:	2301      	movs	r3, #1
 8009800:	e000      	b.n	8009804 <HAL_TIM_PWM_Start+0x144>
 8009802:	2300      	movs	r3, #0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009816:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a25      	ldr	r2, [pc, #148]	@ (80098b4 <HAL_TIM_PWM_Start+0x1f4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d022      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982a:	d01d      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a25      	ldr	r2, [pc, #148]	@ (80098c8 <HAL_TIM_PWM_Start+0x208>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a24      	ldr	r2, [pc, #144]	@ (80098cc <HAL_TIM_PWM_Start+0x20c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a22      	ldr	r2, [pc, #136]	@ (80098d0 <HAL_TIM_PWM_Start+0x210>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1a      	ldr	r2, [pc, #104]	@ (80098b8 <HAL_TIM_PWM_Start+0x1f8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a1e      	ldr	r2, [pc, #120]	@ (80098d4 <HAL_TIM_PWM_Start+0x214>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIM_PWM_Start+0x1a8>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a16      	ldr	r2, [pc, #88]	@ (80098bc <HAL_TIM_PWM_Start+0x1fc>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d115      	bne.n	8009894 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689a      	ldr	r2, [r3, #8]
 800986e:	4b1a      	ldr	r3, [pc, #104]	@ (80098d8 <HAL_TIM_PWM_Start+0x218>)
 8009870:	4013      	ands	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b06      	cmp	r3, #6
 8009878:	d015      	beq.n	80098a6 <HAL_TIM_PWM_Start+0x1e6>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009880:	d011      	beq.n	80098a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f042 0201 	orr.w	r2, r2, #1
 8009890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009892:	e008      	b.n	80098a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0201 	orr.w	r2, r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e000      	b.n	80098a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800
 80098c8:	40000400 	.word	0x40000400
 80098cc:	40000800 	.word	0x40000800
 80098d0:	40000c00 	.word	0x40000c00
 80098d4:	40001800 	.word	0x40001800
 80098d8:	00010007 	.word	0x00010007

080098dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e08f      	b.n	8009a10 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fa fbc1 	bl	800408c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6899      	ldr	r1, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4b3e      	ldr	r3, [pc, #248]	@ (8009a18 <HAL_TIM_Encoder_Init+0x13c>)
 800991e:	400b      	ands	r3, r1
 8009920:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3304      	adds	r3, #4
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f000 fcf3 	bl	800a318 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4b31      	ldr	r3, [pc, #196]	@ (8009a1c <HAL_TIM_Encoder_Init+0x140>)
 8009958:	4013      	ands	r3, r2
 800995a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	4313      	orrs	r3, r2
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	4b2b      	ldr	r3, [pc, #172]	@ (8009a20 <HAL_TIM_Encoder_Init+0x144>)
 8009972:	4013      	ands	r3, r2
 8009974:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	4b2a      	ldr	r3, [pc, #168]	@ (8009a24 <HAL_TIM_Encoder_Init+0x148>)
 800997a:	4013      	ands	r3, r2
 800997c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	4313      	orrs	r3, r2
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	011a      	lsls	r2, r3, #4
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	031b      	lsls	r3, r3, #12
 800999c:	4313      	orrs	r3, r2
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80099aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80099b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	4313      	orrs	r3, r2
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	fffebff8 	.word	0xfffebff8
 8009a1c:	fffffcfc 	.word	0xfffffcfc
 8009a20:	fffff3f3 	.word	0xfffff3f3
 8009a24:	ffff0f0f 	.word	0xffff0f0f

08009a28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d110      	bne.n	8009a7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d102      	bne.n	8009a64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a5e:	7b7b      	ldrb	r3, [r7, #13]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d001      	beq.n	8009a68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e069      	b.n	8009b3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a78:	e031      	b.n	8009ade <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d110      	bne.n	8009aa2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d102      	bne.n	8009a8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a86:	7b3b      	ldrb	r3, [r7, #12]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d001      	beq.n	8009a90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e055      	b.n	8009b3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009aa0:	e01d      	b.n	8009ade <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d108      	bne.n	8009aba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d105      	bne.n	8009aba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009aae:	7b7b      	ldrb	r3, [r7, #13]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d102      	bne.n	8009aba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ab4:	7b3b      	ldrb	r3, [r7, #12]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d001      	beq.n	8009abe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e03e      	b.n	8009b3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_TIM_Encoder_Start+0xc4>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d008      	beq.n	8009afc <HAL_TIM_Encoder_Start+0xd4>
 8009aea:	e00f      	b.n	8009b0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2201      	movs	r2, #1
 8009af2:	2100      	movs	r1, #0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f829 	bl	800ab4c <TIM_CCxChannelCmd>
      break;
 8009afa:	e016      	b.n	8009b2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2201      	movs	r2, #1
 8009b02:	2104      	movs	r1, #4
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f821 	bl	800ab4c <TIM_CCxChannelCmd>
      break;
 8009b0a:	e00e      	b.n	8009b2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2201      	movs	r2, #1
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 f819 	bl	800ab4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	2104      	movs	r1, #4
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 f812 	bl	800ab4c <TIM_CCxChannelCmd>
      break;
 8009b28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d110      	bne.n	8009b96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d102      	bne.n	8009b80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b7a:	7b7b      	ldrb	r3, [r7, #13]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d001      	beq.n	8009b84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e089      	b.n	8009c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b94:	e031      	b.n	8009bfa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d110      	bne.n	8009bbe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d102      	bne.n	8009ba8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ba2:	7b3b      	ldrb	r3, [r7, #12]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d001      	beq.n	8009bac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e075      	b.n	8009c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bbc:	e01d      	b.n	8009bfa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d108      	bne.n	8009bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d105      	bne.n	8009bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bca:	7b7b      	ldrb	r3, [r7, #13]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d102      	bne.n	8009bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bd0:	7b3b      	ldrb	r3, [r7, #12]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d001      	beq.n	8009bda <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e05e      	b.n	8009c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d010      	beq.n	8009c28 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009c06:	e01f      	b.n	8009c48 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 ff9b 	bl	800ab4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0202 	orr.w	r2, r2, #2
 8009c24:	60da      	str	r2, [r3, #12]
      break;
 8009c26:	e02e      	b.n	8009c86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	2104      	movs	r1, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 ff8b 	bl	800ab4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0204 	orr.w	r2, r2, #4
 8009c44:	60da      	str	r2, [r3, #12]
      break;
 8009c46:	e01e      	b.n	8009c86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 ff7b 	bl	800ab4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	2104      	movs	r1, #4
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 ff74 	bl	800ab4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0202 	orr.w	r2, r2, #2
 8009c72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0204 	orr.w	r2, r2, #4
 8009c82:	60da      	str	r2, [r3, #12]
      break;
 8009c84:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f042 0201 	orr.w	r2, r2, #1
 8009c94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d020      	beq.n	8009d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01b      	beq.n	8009d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f06f 0202 	mvn.w	r2, #2
 8009cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 faf6 	bl	800a2dc <HAL_TIM_IC_CaptureCallback>
 8009cf0:	e005      	b.n	8009cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fae8 	bl	800a2c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 faf9 	bl	800a2f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d020      	beq.n	8009d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f06f 0204 	mvn.w	r2, #4
 8009d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2202      	movs	r2, #2
 8009d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fad0 	bl	800a2dc <HAL_TIM_IC_CaptureCallback>
 8009d3c:	e005      	b.n	8009d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fac2 	bl	800a2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fad3 	bl	800a2f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d020      	beq.n	8009d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d01b      	beq.n	8009d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f06f 0208 	mvn.w	r2, #8
 8009d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2204      	movs	r2, #4
 8009d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 faaa 	bl	800a2dc <HAL_TIM_IC_CaptureCallback>
 8009d88:	e005      	b.n	8009d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fa9c 	bl	800a2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 faad 	bl	800a2f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f003 0310 	and.w	r3, r3, #16
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d020      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01b      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0210 	mvn.w	r2, #16
 8009db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa84 	bl	800a2dc <HAL_TIM_IC_CaptureCallback>
 8009dd4:	e005      	b.n	8009de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fa76 	bl	800a2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa87 	bl	800a2f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00c      	beq.n	8009e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0201 	mvn.w	r2, #1
 8009e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7fa f878 	bl	8003efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d104      	bne.n	8009e20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 ffc5 	bl	800adc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 ffbd 	bl	800add8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00c      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa41 	bl	800a304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00c      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f06f 0220 	mvn.w	r2, #32
 8009e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 ff85 	bl	800adb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e0ff      	b.n	800a0ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b14      	cmp	r3, #20
 8009eda:	f200 80f0 	bhi.w	800a0be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ede:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	0800a0bf 	.word	0x0800a0bf
 8009eec:	0800a0bf 	.word	0x0800a0bf
 8009ef0:	0800a0bf 	.word	0x0800a0bf
 8009ef4:	08009f79 	.word	0x08009f79
 8009ef8:	0800a0bf 	.word	0x0800a0bf
 8009efc:	0800a0bf 	.word	0x0800a0bf
 8009f00:	0800a0bf 	.word	0x0800a0bf
 8009f04:	08009fbb 	.word	0x08009fbb
 8009f08:	0800a0bf 	.word	0x0800a0bf
 8009f0c:	0800a0bf 	.word	0x0800a0bf
 8009f10:	0800a0bf 	.word	0x0800a0bf
 8009f14:	08009ffb 	.word	0x08009ffb
 8009f18:	0800a0bf 	.word	0x0800a0bf
 8009f1c:	0800a0bf 	.word	0x0800a0bf
 8009f20:	0800a0bf 	.word	0x0800a0bf
 8009f24:	0800a03d 	.word	0x0800a03d
 8009f28:	0800a0bf 	.word	0x0800a0bf
 8009f2c:	0800a0bf 	.word	0x0800a0bf
 8009f30:	0800a0bf 	.word	0x0800a0bf
 8009f34:	0800a07d 	.word	0x0800a07d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fa90 	bl	800a464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0208 	orr.w	r2, r2, #8
 8009f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 0204 	bic.w	r2, r2, #4
 8009f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6999      	ldr	r1, [r3, #24]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	619a      	str	r2, [r3, #24]
      break;
 8009f76:	e0a5      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fb00 	bl	800a584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6999      	ldr	r1, [r3, #24]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	021a      	lsls	r2, r3, #8
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	619a      	str	r2, [r3, #24]
      break;
 8009fb8:	e084      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fb69 	bl	800a698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f042 0208 	orr.w	r2, r2, #8
 8009fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0204 	bic.w	r2, r2, #4
 8009fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69d9      	ldr	r1, [r3, #28]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	61da      	str	r2, [r3, #28]
      break;
 8009ff8:	e064      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fbd1 	bl	800a7a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69d9      	ldr	r1, [r3, #28]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	021a      	lsls	r2, r3, #8
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	61da      	str	r2, [r3, #28]
      break;
 800a03a:	e043      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fc1a 	bl	800a87c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0208 	orr.w	r2, r2, #8
 800a056:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0204 	bic.w	r2, r2, #4
 800a066:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a07a:	e023      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fc5e 	bl	800a944 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a096:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	021a      	lsls	r2, r3, #8
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a0bc:	e002      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d101      	bne.n	800a0f4 <HAL_TIM_ConfigClockSource+0x1c>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	e0dc      	b.n	800a2ae <HAL_TIM_ConfigClockSource+0x1d6>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	4b6a      	ldr	r3, [pc, #424]	@ (800a2b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a110:	4013      	ands	r3, r2
 800a112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a11a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a64      	ldr	r2, [pc, #400]	@ (800a2bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	f000 80a9 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a130:	4a62      	ldr	r2, [pc, #392]	@ (800a2bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	f200 80ae 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a138:	4a61      	ldr	r2, [pc, #388]	@ (800a2c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	f000 80a1 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a140:	4a5f      	ldr	r2, [pc, #380]	@ (800a2c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	f200 80a6 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a148:	4a5e      	ldr	r2, [pc, #376]	@ (800a2c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	f000 8099 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a150:	4a5c      	ldr	r2, [pc, #368]	@ (800a2c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a152:	4293      	cmp	r3, r2
 800a154:	f200 809e 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a158:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a15c:	f000 8091 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a160:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a164:	f200 8096 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a16c:	f000 8089 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a174:	f200 808e 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17c:	d03e      	beq.n	800a1fc <HAL_TIM_ConfigClockSource+0x124>
 800a17e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a182:	f200 8087 	bhi.w	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a18a:	f000 8086 	beq.w	800a29a <HAL_TIM_ConfigClockSource+0x1c2>
 800a18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a192:	d87f      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a194:	2b70      	cmp	r3, #112	@ 0x70
 800a196:	d01a      	beq.n	800a1ce <HAL_TIM_ConfigClockSource+0xf6>
 800a198:	2b70      	cmp	r3, #112	@ 0x70
 800a19a:	d87b      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a19c:	2b60      	cmp	r3, #96	@ 0x60
 800a19e:	d050      	beq.n	800a242 <HAL_TIM_ConfigClockSource+0x16a>
 800a1a0:	2b60      	cmp	r3, #96	@ 0x60
 800a1a2:	d877      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a1a4:	2b50      	cmp	r3, #80	@ 0x50
 800a1a6:	d03c      	beq.n	800a222 <HAL_TIM_ConfigClockSource+0x14a>
 800a1a8:	2b50      	cmp	r3, #80	@ 0x50
 800a1aa:	d873      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a1ac:	2b40      	cmp	r3, #64	@ 0x40
 800a1ae:	d058      	beq.n	800a262 <HAL_TIM_ConfigClockSource+0x18a>
 800a1b0:	2b40      	cmp	r3, #64	@ 0x40
 800a1b2:	d86f      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a1b4:	2b30      	cmp	r3, #48	@ 0x30
 800a1b6:	d064      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a1b8:	2b30      	cmp	r3, #48	@ 0x30
 800a1ba:	d86b      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d060      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d867      	bhi.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d05c      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a1c8:	2b10      	cmp	r3, #16
 800a1ca:	d05a      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x1aa>
 800a1cc:	e062      	b.n	800a294 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1de:	f000 fc95 	bl	800ab0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a1f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	609a      	str	r2, [r3, #8]
      break;
 800a1fa:	e04f      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a20c:	f000 fc7e 	bl	800ab0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a21e:	609a      	str	r2, [r3, #8]
      break;
 800a220:	e03c      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a22e:	461a      	mov	r2, r3
 800a230:	f000 fbee 	bl	800aa10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2150      	movs	r1, #80	@ 0x50
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fc48 	bl	800aad0 <TIM_ITRx_SetConfig>
      break;
 800a240:	e02c      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a24e:	461a      	mov	r2, r3
 800a250:	f000 fc0d 	bl	800aa6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2160      	movs	r1, #96	@ 0x60
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fc38 	bl	800aad0 <TIM_ITRx_SetConfig>
      break;
 800a260:	e01c      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a26e:	461a      	mov	r2, r3
 800a270:	f000 fbce 	bl	800aa10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2140      	movs	r1, #64	@ 0x40
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fc28 	bl	800aad0 <TIM_ITRx_SetConfig>
      break;
 800a280:	e00c      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f000 fc1f 	bl	800aad0 <TIM_ITRx_SetConfig>
      break;
 800a292:	e003      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	73fb      	strb	r3, [r7, #15]
      break;
 800a298:	e000      	b.n	800a29c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	ffceff88 	.word	0xffceff88
 800a2bc:	00100040 	.word	0x00100040
 800a2c0:	00100030 	.word	0x00100030
 800a2c4:	00100020 	.word	0x00100020

0800a2c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a46      	ldr	r2, [pc, #280]	@ (800a444 <TIM_Base_SetConfig+0x12c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d013      	beq.n	800a358 <TIM_Base_SetConfig+0x40>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a336:	d00f      	beq.n	800a358 <TIM_Base_SetConfig+0x40>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a43      	ldr	r2, [pc, #268]	@ (800a448 <TIM_Base_SetConfig+0x130>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d00b      	beq.n	800a358 <TIM_Base_SetConfig+0x40>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a42      	ldr	r2, [pc, #264]	@ (800a44c <TIM_Base_SetConfig+0x134>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d007      	beq.n	800a358 <TIM_Base_SetConfig+0x40>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a41      	ldr	r2, [pc, #260]	@ (800a450 <TIM_Base_SetConfig+0x138>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d003      	beq.n	800a358 <TIM_Base_SetConfig+0x40>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a40      	ldr	r2, [pc, #256]	@ (800a454 <TIM_Base_SetConfig+0x13c>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d108      	bne.n	800a36a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a35e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a35      	ldr	r2, [pc, #212]	@ (800a444 <TIM_Base_SetConfig+0x12c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d01f      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a378:	d01b      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a32      	ldr	r2, [pc, #200]	@ (800a448 <TIM_Base_SetConfig+0x130>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d017      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a31      	ldr	r2, [pc, #196]	@ (800a44c <TIM_Base_SetConfig+0x134>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d013      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a30      	ldr	r2, [pc, #192]	@ (800a450 <TIM_Base_SetConfig+0x138>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00f      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a2f      	ldr	r2, [pc, #188]	@ (800a454 <TIM_Base_SetConfig+0x13c>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d00b      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a2e      	ldr	r2, [pc, #184]	@ (800a458 <TIM_Base_SetConfig+0x140>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d007      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a2d      	ldr	r2, [pc, #180]	@ (800a45c <TIM_Base_SetConfig+0x144>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d003      	beq.n	800a3b2 <TIM_Base_SetConfig+0x9a>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a2c      	ldr	r2, [pc, #176]	@ (800a460 <TIM_Base_SetConfig+0x148>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d108      	bne.n	800a3c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a16      	ldr	r2, [pc, #88]	@ (800a444 <TIM_Base_SetConfig+0x12c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00f      	beq.n	800a410 <TIM_Base_SetConfig+0xf8>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a18      	ldr	r2, [pc, #96]	@ (800a454 <TIM_Base_SetConfig+0x13c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d00b      	beq.n	800a410 <TIM_Base_SetConfig+0xf8>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a17      	ldr	r2, [pc, #92]	@ (800a458 <TIM_Base_SetConfig+0x140>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d007      	beq.n	800a410 <TIM_Base_SetConfig+0xf8>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a16      	ldr	r2, [pc, #88]	@ (800a45c <TIM_Base_SetConfig+0x144>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d003      	beq.n	800a410 <TIM_Base_SetConfig+0xf8>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a15      	ldr	r2, [pc, #84]	@ (800a460 <TIM_Base_SetConfig+0x148>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d103      	bne.n	800a418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b01      	cmp	r3, #1
 800a428:	d105      	bne.n	800a436 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	f023 0201 	bic.w	r2, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	611a      	str	r2, [r3, #16]
  }
}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000
 800a448:	40000400 	.word	0x40000400
 800a44c:	40000800 	.word	0x40000800
 800a450:	40000c00 	.word	0x40000c00
 800a454:	40010400 	.word	0x40010400
 800a458:	40014000 	.word	0x40014000
 800a45c:	40014400 	.word	0x40014400
 800a460:	40014800 	.word	0x40014800

0800a464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	f023 0201 	bic.w	r2, r3, #1
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4b37      	ldr	r3, [pc, #220]	@ (800a56c <TIM_OC1_SetConfig+0x108>)
 800a490:	4013      	ands	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0303 	bic.w	r3, r3, #3
 800a49a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f023 0302 	bic.w	r3, r3, #2
 800a4ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a2d      	ldr	r2, [pc, #180]	@ (800a570 <TIM_OC1_SetConfig+0x10c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00f      	beq.n	800a4e0 <TIM_OC1_SetConfig+0x7c>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a2c      	ldr	r2, [pc, #176]	@ (800a574 <TIM_OC1_SetConfig+0x110>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_OC1_SetConfig+0x7c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a2b      	ldr	r2, [pc, #172]	@ (800a578 <TIM_OC1_SetConfig+0x114>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_OC1_SetConfig+0x7c>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a57c <TIM_OC1_SetConfig+0x118>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_OC1_SetConfig+0x7c>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a29      	ldr	r2, [pc, #164]	@ (800a580 <TIM_OC1_SetConfig+0x11c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10c      	bne.n	800a4fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f023 0308 	bic.w	r3, r3, #8
 800a4e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f023 0304 	bic.w	r3, r3, #4
 800a4f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a570 <TIM_OC1_SetConfig+0x10c>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00f      	beq.n	800a522 <TIM_OC1_SetConfig+0xbe>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a1b      	ldr	r2, [pc, #108]	@ (800a574 <TIM_OC1_SetConfig+0x110>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00b      	beq.n	800a522 <TIM_OC1_SetConfig+0xbe>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a1a      	ldr	r2, [pc, #104]	@ (800a578 <TIM_OC1_SetConfig+0x114>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d007      	beq.n	800a522 <TIM_OC1_SetConfig+0xbe>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a19      	ldr	r2, [pc, #100]	@ (800a57c <TIM_OC1_SetConfig+0x118>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d003      	beq.n	800a522 <TIM_OC1_SetConfig+0xbe>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a18      	ldr	r2, [pc, #96]	@ (800a580 <TIM_OC1_SetConfig+0x11c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d111      	bne.n	800a546 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	4313      	orrs	r3, r2
 800a53a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	621a      	str	r2, [r3, #32]
}
 800a560:	bf00      	nop
 800a562:	371c      	adds	r7, #28
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	fffeff8f 	.word	0xfffeff8f
 800a570:	40010000 	.word	0x40010000
 800a574:	40010400 	.word	0x40010400
 800a578:	40014000 	.word	0x40014000
 800a57c:	40014400 	.word	0x40014400
 800a580:	40014800 	.word	0x40014800

0800a584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	f023 0210 	bic.w	r2, r3, #16
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4b34      	ldr	r3, [pc, #208]	@ (800a680 <TIM_OC2_SetConfig+0xfc>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f023 0320 	bic.w	r3, r3, #32
 800a5ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a29      	ldr	r2, [pc, #164]	@ (800a684 <TIM_OC2_SetConfig+0x100>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d003      	beq.n	800a5ec <TIM_OC2_SetConfig+0x68>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a28      	ldr	r2, [pc, #160]	@ (800a688 <TIM_OC2_SetConfig+0x104>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d10d      	bne.n	800a608 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a1e      	ldr	r2, [pc, #120]	@ (800a684 <TIM_OC2_SetConfig+0x100>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00f      	beq.n	800a630 <TIM_OC2_SetConfig+0xac>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <TIM_OC2_SetConfig+0x104>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00b      	beq.n	800a630 <TIM_OC2_SetConfig+0xac>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a1c      	ldr	r2, [pc, #112]	@ (800a68c <TIM_OC2_SetConfig+0x108>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d007      	beq.n	800a630 <TIM_OC2_SetConfig+0xac>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a1b      	ldr	r2, [pc, #108]	@ (800a690 <TIM_OC2_SetConfig+0x10c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_OC2_SetConfig+0xac>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a1a      	ldr	r2, [pc, #104]	@ (800a694 <TIM_OC2_SetConfig+0x110>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d113      	bne.n	800a658 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a63e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	621a      	str	r2, [r3, #32]
}
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	feff8fff 	.word	0xfeff8fff
 800a684:	40010000 	.word	0x40010000
 800a688:	40010400 	.word	0x40010400
 800a68c:	40014000 	.word	0x40014000
 800a690:	40014400 	.word	0x40014400
 800a694:	40014800 	.word	0x40014800

0800a698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4b33      	ldr	r3, [pc, #204]	@ (800a790 <TIM_OC3_SetConfig+0xf8>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a28      	ldr	r2, [pc, #160]	@ (800a794 <TIM_OC3_SetConfig+0xfc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC3_SetConfig+0x66>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a27      	ldr	r2, [pc, #156]	@ (800a798 <TIM_OC3_SetConfig+0x100>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d10d      	bne.n	800a71a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a1d      	ldr	r2, [pc, #116]	@ (800a794 <TIM_OC3_SetConfig+0xfc>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00f      	beq.n	800a742 <TIM_OC3_SetConfig+0xaa>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a1c      	ldr	r2, [pc, #112]	@ (800a798 <TIM_OC3_SetConfig+0x100>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d00b      	beq.n	800a742 <TIM_OC3_SetConfig+0xaa>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a1b      	ldr	r2, [pc, #108]	@ (800a79c <TIM_OC3_SetConfig+0x104>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d007      	beq.n	800a742 <TIM_OC3_SetConfig+0xaa>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a1a      	ldr	r2, [pc, #104]	@ (800a7a0 <TIM_OC3_SetConfig+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d003      	beq.n	800a742 <TIM_OC3_SetConfig+0xaa>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a19      	ldr	r2, [pc, #100]	@ (800a7a4 <TIM_OC3_SetConfig+0x10c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d113      	bne.n	800a76a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	621a      	str	r2, [r3, #32]
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	fffeff8f 	.word	0xfffeff8f
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800

0800a7a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4b24      	ldr	r3, [pc, #144]	@ (800a864 <TIM_OC4_SetConfig+0xbc>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a7f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	031b      	lsls	r3, r3, #12
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a19      	ldr	r2, [pc, #100]	@ (800a868 <TIM_OC4_SetConfig+0xc0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00f      	beq.n	800a828 <TIM_OC4_SetConfig+0x80>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a18      	ldr	r2, [pc, #96]	@ (800a86c <TIM_OC4_SetConfig+0xc4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00b      	beq.n	800a828 <TIM_OC4_SetConfig+0x80>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a17      	ldr	r2, [pc, #92]	@ (800a870 <TIM_OC4_SetConfig+0xc8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d007      	beq.n	800a828 <TIM_OC4_SetConfig+0x80>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a16      	ldr	r2, [pc, #88]	@ (800a874 <TIM_OC4_SetConfig+0xcc>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_OC4_SetConfig+0x80>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a15      	ldr	r2, [pc, #84]	@ (800a878 <TIM_OC4_SetConfig+0xd0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d109      	bne.n	800a83c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a82e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	019b      	lsls	r3, r3, #6
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	621a      	str	r2, [r3, #32]
}
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	feff8fff 	.word	0xfeff8fff
 800a868:	40010000 	.word	0x40010000
 800a86c:	40010400 	.word	0x40010400
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800

0800a87c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4b21      	ldr	r3, [pc, #132]	@ (800a92c <TIM_OC5_SetConfig+0xb0>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a8bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a18      	ldr	r2, [pc, #96]	@ (800a930 <TIM_OC5_SetConfig+0xb4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00f      	beq.n	800a8f2 <TIM_OC5_SetConfig+0x76>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a17      	ldr	r2, [pc, #92]	@ (800a934 <TIM_OC5_SetConfig+0xb8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00b      	beq.n	800a8f2 <TIM_OC5_SetConfig+0x76>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a16      	ldr	r2, [pc, #88]	@ (800a938 <TIM_OC5_SetConfig+0xbc>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d007      	beq.n	800a8f2 <TIM_OC5_SetConfig+0x76>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a15      	ldr	r2, [pc, #84]	@ (800a93c <TIM_OC5_SetConfig+0xc0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d003      	beq.n	800a8f2 <TIM_OC5_SetConfig+0x76>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a14      	ldr	r2, [pc, #80]	@ (800a940 <TIM_OC5_SetConfig+0xc4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d109      	bne.n	800a906 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	4313      	orrs	r3, r2
 800a904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	621a      	str	r2, [r3, #32]
}
 800a920:	bf00      	nop
 800a922:	371c      	adds	r7, #28
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	fffeff8f 	.word	0xfffeff8f
 800a930:	40010000 	.word	0x40010000
 800a934:	40010400 	.word	0x40010400
 800a938:	40014000 	.word	0x40014000
 800a93c:	40014400 	.word	0x40014400
 800a940:	40014800 	.word	0x40014800

0800a944 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4b22      	ldr	r3, [pc, #136]	@ (800a9f8 <TIM_OC6_SetConfig+0xb4>)
 800a970:	4013      	ands	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	051b      	lsls	r3, r3, #20
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a19      	ldr	r2, [pc, #100]	@ (800a9fc <TIM_OC6_SetConfig+0xb8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d00f      	beq.n	800a9bc <TIM_OC6_SetConfig+0x78>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a18      	ldr	r2, [pc, #96]	@ (800aa00 <TIM_OC6_SetConfig+0xbc>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d00b      	beq.n	800a9bc <TIM_OC6_SetConfig+0x78>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a17      	ldr	r2, [pc, #92]	@ (800aa04 <TIM_OC6_SetConfig+0xc0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d007      	beq.n	800a9bc <TIM_OC6_SetConfig+0x78>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a16      	ldr	r2, [pc, #88]	@ (800aa08 <TIM_OC6_SetConfig+0xc4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_OC6_SetConfig+0x78>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a15      	ldr	r2, [pc, #84]	@ (800aa0c <TIM_OC6_SetConfig+0xc8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d109      	bne.n	800a9d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	029b      	lsls	r3, r3, #10
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	621a      	str	r2, [r3, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	feff8fff 	.word	0xfeff8fff
 800a9fc:	40010000 	.word	0x40010000
 800aa00:	40010400 	.word	0x40010400
 800aa04:	40014000 	.word	0x40014000
 800aa08:	40014400 	.word	0x40014400
 800aa0c:	40014800 	.word	0x40014800

0800aa10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	f023 0201 	bic.w	r2, r3, #1
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f023 030a 	bic.w	r3, r3, #10
 800aa4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	621a      	str	r2, [r3, #32]
}
 800aa62:	bf00      	nop
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b087      	sub	sp, #28
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	60b9      	str	r1, [r7, #8]
 800aa78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	f023 0210 	bic.w	r2, r3, #16
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	031b      	lsls	r3, r3, #12
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aaaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	621a      	str	r2, [r3, #32]
}
 800aac2:	bf00      	nop
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b09      	ldr	r3, [pc, #36]	@ (800ab08 <TIM_ITRx_SetConfig+0x38>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f043 0307 	orr.w	r3, r3, #7
 800aaf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	609a      	str	r2, [r3, #8]
}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	ffcfff8f 	.word	0xffcfff8f

0800ab0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	021a      	lsls	r2, r3, #8
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	609a      	str	r2, [r3, #8]
}
 800ab40:	bf00      	nop
 800ab42:	371c      	adds	r7, #28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	2201      	movs	r2, #1
 800ab60:	fa02 f303 	lsl.w	r3, r2, r3
 800ab64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	401a      	ands	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	fa01 f303 	lsl.w	r3, r1, r3
 800ab84:	431a      	orrs	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	621a      	str	r2, [r3, #32]
}
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
	...

0800ab98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abac:	2302      	movs	r3, #2
 800abae:	e06d      	b.n	800ac8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a30      	ldr	r2, [pc, #192]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a2f      	ldr	r2, [pc, #188]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d108      	bne.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a20      	ldr	r2, [pc, #128]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d022      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac22:	d01d      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d018      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a1c      	ldr	r2, [pc, #112]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d013      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d00e      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a15      	ldr	r2, [pc, #84]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d009      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a16      	ldr	r2, [pc, #88]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d004      	beq.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a15      	ldr	r2, [pc, #84]	@ (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d10c      	bne.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40010400 	.word	0x40010400
 800aca0:	40000400 	.word	0x40000400
 800aca4:	40000800 	.word	0x40000800
 800aca8:	40000c00 	.word	0x40000c00
 800acac:	40001800 	.word	0x40001800
 800acb0:	40014000 	.word	0x40014000

0800acb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800accc:	2302      	movs	r3, #2
 800acce:	e065      	b.n	800ad9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	041b      	lsls	r3, r3, #16
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a16      	ldr	r2, [pc, #88]	@ (800ada8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d004      	beq.n	800ad5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a14      	ldr	r2, [pc, #80]	@ (800adac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d115      	bne.n	800ad8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad68:	051b      	lsls	r3, r3, #20
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	40010000 	.word	0x40010000
 800adac:	40010400 	.word	0x40010400

0800adb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e042      	b.n	800ae84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d106      	bne.n	800ae16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7f9 fbb7 	bl	8004584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2224      	movs	r2, #36	@ 0x24
 800ae1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0201 	bic.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fb0c 	bl	800c454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fda1 	bl	800b984 <UART_SetConfig>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e01b      	b.n	800ae84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 fb8b 	bl	800c598 <UART_CheckIdleState>
 800ae82:	4603      	mov	r3, r0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	@ 0x28
 800ae90:	af02      	add	r7, sp, #8
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d17b      	bne.n	800af9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <HAL_UART_Transmit+0x26>
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e074      	b.n	800afa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2221      	movs	r2, #33	@ 0x21
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aec6:	f7f9 fdab 	bl	8004a20 <HAL_GetTick>
 800aeca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	88fa      	ldrh	r2, [r7, #6]
 800aed0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	88fa      	ldrh	r2, [r7, #6]
 800aed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aee4:	d108      	bne.n	800aef8 <HAL_UART_Transmit+0x6c>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d104      	bne.n	800aef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e003      	b.n	800af00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aefc:	2300      	movs	r3, #0
 800aefe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af00:	e030      	b.n	800af64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	2180      	movs	r1, #128	@ 0x80
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f001 fbed 	bl	800c6ec <UART_WaitOnFlagUntilTimeout>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e03d      	b.n	800afa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	3302      	adds	r3, #2
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e007      	b.n	800af52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	3301      	adds	r3, #1
 800af50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1c8      	bne.n	800af02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2200      	movs	r2, #0
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f001 fbb6 	bl	800c6ec <UART_WaitOnFlagUntilTimeout>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e006      	b.n	800afa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e000      	b.n	800afa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af9e:	2302      	movs	r3, #2
  }
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3720      	adds	r7, #32
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	@ 0x28
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	603b      	str	r3, [r7, #0]
 800afb4:	4613      	mov	r3, r2
 800afb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	f040 80b5 	bne.w	800b12e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <HAL_UART_Receive+0x28>
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e0ad      	b.n	800b130 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2222      	movs	r2, #34	@ 0x22
 800afe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afea:	f7f9 fd19 	bl	8004a20 <HAL_GetTick>
 800afee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	88fa      	ldrh	r2, [r7, #6]
 800aff4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	88fa      	ldrh	r2, [r7, #6]
 800affc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b008:	d10e      	bne.n	800b028 <HAL_UART_Receive+0x80>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d105      	bne.n	800b01e <HAL_UART_Receive+0x76>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b018:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b01c:	e02d      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	22ff      	movs	r2, #255	@ 0xff
 800b022:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b026:	e028      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10d      	bne.n	800b04c <HAL_UART_Receive+0xa4>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d104      	bne.n	800b042 <HAL_UART_Receive+0x9a>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	22ff      	movs	r2, #255	@ 0xff
 800b03c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b040:	e01b      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	227f      	movs	r2, #127	@ 0x7f
 800b046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b04a:	e016      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b054:	d10d      	bne.n	800b072 <HAL_UART_Receive+0xca>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d104      	bne.n	800b068 <HAL_UART_Receive+0xc0>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	227f      	movs	r2, #127	@ 0x7f
 800b062:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b066:	e008      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	223f      	movs	r2, #63	@ 0x3f
 800b06c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b070:	e003      	b.n	800b07a <HAL_UART_Receive+0xd2>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b080:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08a:	d108      	bne.n	800b09e <HAL_UART_Receive+0xf6>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	e003      	b.n	800b0a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b0a6:	e036      	b.n	800b116 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2120      	movs	r1, #32
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f001 fb1a 	bl	800c6ec <UART_WaitOnFlagUntilTimeout>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d005      	beq.n	800b0ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e032      	b.n	800b130 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10c      	bne.n	800b0ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	8a7b      	ldrh	r3, [r7, #18]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	3302      	adds	r3, #2
 800b0e6:	61bb      	str	r3, [r7, #24]
 800b0e8:	e00c      	b.n	800b104 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	8a7b      	ldrh	r3, [r7, #18]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	3301      	adds	r3, #1
 800b102:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1c2      	bne.n	800b0a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e000      	b.n	800b130 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b12e:	2302      	movs	r3, #2
  }
}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	@ 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	4613      	mov	r3, r2
 800b144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b14c:	2b20      	cmp	r3, #32
 800b14e:	d137      	bne.n	800b1c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <HAL_UART_Receive_IT+0x24>
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e030      	b.n	800b1c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a18      	ldr	r2, [pc, #96]	@ (800b1cc <HAL_UART_Receive_IT+0x94>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d01f      	beq.n	800b1b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d018      	beq.n	800b1b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	613b      	str	r3, [r7, #16]
   return(result);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	623b      	str	r3, [r7, #32]
 800b19e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	69f9      	ldr	r1, [r7, #28]
 800b1a2:	6a3a      	ldr	r2, [r7, #32]
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1e6      	bne.n	800b17e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b1b0:	88fb      	ldrh	r3, [r7, #6]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f001 fb06 	bl	800c7c8 <UART_Start_Receive_IT>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	e000      	b.n	800b1c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1c0:	2302      	movs	r3, #2
  }
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3728      	adds	r7, #40	@ 0x28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	58000c00 	.word	0x58000c00

0800b1d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b0ba      	sub	sp, #232	@ 0xe8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1fe:	4013      	ands	r3, r2
 800b200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d11b      	bne.n	800b244 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d015      	beq.n	800b244 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d009      	beq.n	800b244 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8377 	beq.w	800b928 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	4798      	blx	r3
      }
      return;
 800b242:	e371      	b.n	800b928 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 8123 	beq.w	800b494 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b24e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b252:	4b8d      	ldr	r3, [pc, #564]	@ (800b488 <HAL_UART_IRQHandler+0x2b8>)
 800b254:	4013      	ands	r3, r2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d106      	bne.n	800b268 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b25a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b25e:	4b8b      	ldr	r3, [pc, #556]	@ (800b48c <HAL_UART_IRQHandler+0x2bc>)
 800b260:	4013      	ands	r3, r2
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 8116 	beq.w	800b494 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d011      	beq.n	800b298 <HAL_UART_IRQHandler+0xc8>
 800b274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2201      	movs	r2, #1
 800b286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b28e:	f043 0201 	orr.w	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d011      	beq.n	800b2c8 <HAL_UART_IRQHandler+0xf8>
 800b2a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2be:	f043 0204 	orr.w	r2, r3, #4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d011      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x128>
 800b2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ee:	f043 0202 	orr.w	r2, r3, #2
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2fc:	f003 0308 	and.w	r3, r3, #8
 800b300:	2b00      	cmp	r3, #0
 800b302:	d017      	beq.n	800b334 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b308:	f003 0320 	and.w	r3, r3, #32
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b310:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b314:	4b5c      	ldr	r3, [pc, #368]	@ (800b488 <HAL_UART_IRQHandler+0x2b8>)
 800b316:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2208      	movs	r2, #8
 800b322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b32a:	f043 0208 	orr.w	r2, r3, #8
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d012      	beq.n	800b366 <HAL_UART_IRQHandler+0x196>
 800b340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00c      	beq.n	800b366 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b35c:	f043 0220 	orr.w	r2, r3, #32
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 82dd 	beq.w	800b92c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d013      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b00      	cmp	r3, #0
 800b388:	d105      	bne.n	800b396 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b38a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b38e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d007      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ba:	2b40      	cmp	r3, #64	@ 0x40
 800b3bc:	d005      	beq.n	800b3ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d054      	beq.n	800b474 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fb1e 	bl	800ca0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3da:	2b40      	cmp	r3, #64	@ 0x40
 800b3dc:	d146      	bne.n	800b46c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3ec:	e853 3f00 	ldrex	r3, [r3]
 800b3f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3308      	adds	r3, #8
 800b406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b40a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b40e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b41a:	e841 2300 	strex	r3, r2, [r1]
 800b41e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1d9      	bne.n	800b3de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b430:	2b00      	cmp	r3, #0
 800b432:	d017      	beq.n	800b464 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b43a:	4a15      	ldr	r2, [pc, #84]	@ (800b490 <HAL_UART_IRQHandler+0x2c0>)
 800b43c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b444:	4618      	mov	r0, r3
 800b446:	f7f9 ff25 	bl	8005294 <HAL_DMA_Abort_IT>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d019      	beq.n	800b484 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b45e:	4610      	mov	r0, r2
 800b460:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b462:	e00f      	b.n	800b484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa77 	bl	800b958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46a:	e00b      	b.n	800b484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa73 	bl	800b958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b472:	e007      	b.n	800b484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa6f 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b482:	e253      	b.n	800b92c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	bf00      	nop
    return;
 800b486:	e251      	b.n	800b92c <HAL_UART_IRQHandler+0x75c>
 800b488:	10000001 	.word	0x10000001
 800b48c:	04000120 	.word	0x04000120
 800b490:	0800cad9 	.word	0x0800cad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	f040 81e7 	bne.w	800b86c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a2:	f003 0310 	and.w	r3, r3, #16
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 81e0 	beq.w	800b86c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b0:	f003 0310 	and.w	r3, r3, #16
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 81d9 	beq.w	800b86c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2210      	movs	r2, #16
 800b4c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4cc:	2b40      	cmp	r3, #64	@ 0x40
 800b4ce:	f040 8151 	bne.w	800b774 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a96      	ldr	r2, [pc, #600]	@ (800b734 <HAL_UART_IRQHandler+0x564>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d068      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a93      	ldr	r2, [pc, #588]	@ (800b738 <HAL_UART_IRQHandler+0x568>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d061      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a91      	ldr	r2, [pc, #580]	@ (800b73c <HAL_UART_IRQHandler+0x56c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d05a      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a8e      	ldr	r2, [pc, #568]	@ (800b740 <HAL_UART_IRQHandler+0x570>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d053      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a8c      	ldr	r2, [pc, #560]	@ (800b744 <HAL_UART_IRQHandler+0x574>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d04c      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a89      	ldr	r2, [pc, #548]	@ (800b748 <HAL_UART_IRQHandler+0x578>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d045      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a87      	ldr	r2, [pc, #540]	@ (800b74c <HAL_UART_IRQHandler+0x57c>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d03e      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a84      	ldr	r2, [pc, #528]	@ (800b750 <HAL_UART_IRQHandler+0x580>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d037      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a82      	ldr	r2, [pc, #520]	@ (800b754 <HAL_UART_IRQHandler+0x584>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d030      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a7f      	ldr	r2, [pc, #508]	@ (800b758 <HAL_UART_IRQHandler+0x588>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d029      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a7d      	ldr	r2, [pc, #500]	@ (800b75c <HAL_UART_IRQHandler+0x58c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d022      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a7a      	ldr	r2, [pc, #488]	@ (800b760 <HAL_UART_IRQHandler+0x590>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d01b      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a78      	ldr	r2, [pc, #480]	@ (800b764 <HAL_UART_IRQHandler+0x594>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d014      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a75      	ldr	r2, [pc, #468]	@ (800b768 <HAL_UART_IRQHandler+0x598>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00d      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a73      	ldr	r2, [pc, #460]	@ (800b76c <HAL_UART_IRQHandler+0x59c>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d006      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x3e2>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a70      	ldr	r2, [pc, #448]	@ (800b770 <HAL_UART_IRQHandler+0x5a0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d106      	bne.n	800b5c0 <HAL_UART_IRQHandler+0x3f0>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	e005      	b.n	800b5cc <HAL_UART_IRQHandler+0x3fc>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 81ab 	beq.w	800b930 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	f080 81a3 	bcs.w	800b930 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b600:	f000 8087 	beq.w	800b712 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b61c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b62e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b632:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b63a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1da      	bne.n	800b604 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3308      	adds	r3, #8
 800b654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b65e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b660:	f023 0301 	bic.w	r3, r3, #1
 800b664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3308      	adds	r3, #8
 800b66e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b67a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e1      	bne.n	800b64e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b69c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b6ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e3      	bne.n	800b68a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e0:	f023 0310 	bic.w	r3, r3, #16
 800b6e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e4      	bne.n	800b6d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f9 faa3 	bl	8004c58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2202      	movs	r2, #2
 800b716:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b724:	b29b      	uxth	r3, r3
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	b29b      	uxth	r3, r3
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f91d 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b732:	e0fd      	b.n	800b930 <HAL_UART_IRQHandler+0x760>
 800b734:	40020010 	.word	0x40020010
 800b738:	40020028 	.word	0x40020028
 800b73c:	40020040 	.word	0x40020040
 800b740:	40020058 	.word	0x40020058
 800b744:	40020070 	.word	0x40020070
 800b748:	40020088 	.word	0x40020088
 800b74c:	400200a0 	.word	0x400200a0
 800b750:	400200b8 	.word	0x400200b8
 800b754:	40020410 	.word	0x40020410
 800b758:	40020428 	.word	0x40020428
 800b75c:	40020440 	.word	0x40020440
 800b760:	40020458 	.word	0x40020458
 800b764:	40020470 	.word	0x40020470
 800b768:	40020488 	.word	0x40020488
 800b76c:	400204a0 	.word	0x400204a0
 800b770:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b780:	b29b      	uxth	r3, r3
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 80cf 	beq.w	800b934 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 80ca 	beq.w	800b934 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e4      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3308      	adds	r3, #8
 800b7dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	4b55      	ldr	r3, [pc, #340]	@ (800b940 <HAL_UART_IRQHandler+0x770>)
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b802:	e841 2300 	strex	r3, r2, [r1]
 800b806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1e3      	bne.n	800b7d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2220      	movs	r2, #32
 800b812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	e853 3f00 	ldrex	r3, [r3]
 800b82e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 0310 	bic.w	r3, r3, #16
 800b836:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b844:	61fb      	str	r3, [r7, #28]
 800b846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	69b9      	ldr	r1, [r7, #24]
 800b84a:	69fa      	ldr	r2, [r7, #28]
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	617b      	str	r3, [r7, #20]
   return(result);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e4      	bne.n	800b822 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2202      	movs	r2, #2
 800b85c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b85e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f881 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b86a:	e063      	b.n	800b934 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <HAL_UART_IRQHandler+0x6c6>
 800b878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b87c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d008      	beq.n	800b896 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b88c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 fe80 	bl	800d594 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b894:	e051      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d014      	beq.n	800b8cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d105      	bne.n	800b8ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d008      	beq.n	800b8cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d03a      	beq.n	800b938 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	4798      	blx	r3
    }
    return;
 800b8ca:	e035      	b.n	800b938 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d009      	beq.n	800b8ec <HAL_UART_IRQHandler+0x71c>
 800b8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 f90d 	bl	800cb04 <UART_EndTransmit_IT>
    return;
 800b8ea:	e026      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d009      	beq.n	800b90c <HAL_UART_IRQHandler+0x73c>
 800b8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 fe59 	bl	800d5bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b90a:	e016      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d010      	beq.n	800b93a <HAL_UART_IRQHandler+0x76a>
 800b918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	da0c      	bge.n	800b93a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f001 fe41 	bl	800d5a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b926:	e008      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
      return;
 800b928:	bf00      	nop
 800b92a:	e006      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
    return;
 800b92c:	bf00      	nop
 800b92e:	e004      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
      return;
 800b930:	bf00      	nop
 800b932:	e002      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
      return;
 800b934:	bf00      	nop
 800b936:	e000      	b.n	800b93a <HAL_UART_IRQHandler+0x76a>
    return;
 800b938:	bf00      	nop
  }
}
 800b93a:	37e8      	adds	r7, #232	@ 0xe8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	effffffe 	.word	0xeffffffe

0800b944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b988:	b092      	sub	sp, #72	@ 0x48
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	431a      	orrs	r2, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4bbe      	ldr	r3, [pc, #760]	@ (800bcac <UART_SetConfig+0x328>)
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4ab3      	ldr	r2, [pc, #716]	@ (800bcb0 <UART_SetConfig+0x32c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d004      	beq.n	800b9f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	4baf      	ldr	r3, [pc, #700]	@ (800bcb4 <UART_SetConfig+0x330>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	6812      	ldr	r2, [r2, #0]
 800b9fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0a:	f023 010f 	bic.w	r1, r3, #15
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4aa6      	ldr	r2, [pc, #664]	@ (800bcb8 <UART_SetConfig+0x334>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d177      	bne.n	800bb14 <UART_SetConfig+0x190>
 800ba24:	4ba5      	ldr	r3, [pc, #660]	@ (800bcbc <UART_SetConfig+0x338>)
 800ba26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba2c:	2b28      	cmp	r3, #40	@ 0x28
 800ba2e:	d86d      	bhi.n	800bb0c <UART_SetConfig+0x188>
 800ba30:	a201      	add	r2, pc, #4	@ (adr r2, 800ba38 <UART_SetConfig+0xb4>)
 800ba32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba36:	bf00      	nop
 800ba38:	0800badd 	.word	0x0800badd
 800ba3c:	0800bb0d 	.word	0x0800bb0d
 800ba40:	0800bb0d 	.word	0x0800bb0d
 800ba44:	0800bb0d 	.word	0x0800bb0d
 800ba48:	0800bb0d 	.word	0x0800bb0d
 800ba4c:	0800bb0d 	.word	0x0800bb0d
 800ba50:	0800bb0d 	.word	0x0800bb0d
 800ba54:	0800bb0d 	.word	0x0800bb0d
 800ba58:	0800bae5 	.word	0x0800bae5
 800ba5c:	0800bb0d 	.word	0x0800bb0d
 800ba60:	0800bb0d 	.word	0x0800bb0d
 800ba64:	0800bb0d 	.word	0x0800bb0d
 800ba68:	0800bb0d 	.word	0x0800bb0d
 800ba6c:	0800bb0d 	.word	0x0800bb0d
 800ba70:	0800bb0d 	.word	0x0800bb0d
 800ba74:	0800bb0d 	.word	0x0800bb0d
 800ba78:	0800baed 	.word	0x0800baed
 800ba7c:	0800bb0d 	.word	0x0800bb0d
 800ba80:	0800bb0d 	.word	0x0800bb0d
 800ba84:	0800bb0d 	.word	0x0800bb0d
 800ba88:	0800bb0d 	.word	0x0800bb0d
 800ba8c:	0800bb0d 	.word	0x0800bb0d
 800ba90:	0800bb0d 	.word	0x0800bb0d
 800ba94:	0800bb0d 	.word	0x0800bb0d
 800ba98:	0800baf5 	.word	0x0800baf5
 800ba9c:	0800bb0d 	.word	0x0800bb0d
 800baa0:	0800bb0d 	.word	0x0800bb0d
 800baa4:	0800bb0d 	.word	0x0800bb0d
 800baa8:	0800bb0d 	.word	0x0800bb0d
 800baac:	0800bb0d 	.word	0x0800bb0d
 800bab0:	0800bb0d 	.word	0x0800bb0d
 800bab4:	0800bb0d 	.word	0x0800bb0d
 800bab8:	0800bafd 	.word	0x0800bafd
 800babc:	0800bb0d 	.word	0x0800bb0d
 800bac0:	0800bb0d 	.word	0x0800bb0d
 800bac4:	0800bb0d 	.word	0x0800bb0d
 800bac8:	0800bb0d 	.word	0x0800bb0d
 800bacc:	0800bb0d 	.word	0x0800bb0d
 800bad0:	0800bb0d 	.word	0x0800bb0d
 800bad4:	0800bb0d 	.word	0x0800bb0d
 800bad8:	0800bb05 	.word	0x0800bb05
 800badc:	2301      	movs	r3, #1
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae2:	e222      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bae4:	2304      	movs	r3, #4
 800bae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baea:	e21e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800baec:	2308      	movs	r3, #8
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf2:	e21a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800baf4:	2310      	movs	r3, #16
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafa:	e216      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bafc:	2320      	movs	r3, #32
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb02:	e212      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb04:	2340      	movs	r3, #64	@ 0x40
 800bb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0a:	e20e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb0c:	2380      	movs	r3, #128	@ 0x80
 800bb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb12:	e20a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a69      	ldr	r2, [pc, #420]	@ (800bcc0 <UART_SetConfig+0x33c>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d130      	bne.n	800bb80 <UART_SetConfig+0x1fc>
 800bb1e:	4b67      	ldr	r3, [pc, #412]	@ (800bcbc <UART_SetConfig+0x338>)
 800bb20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	2b05      	cmp	r3, #5
 800bb28:	d826      	bhi.n	800bb78 <UART_SetConfig+0x1f4>
 800bb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb30 <UART_SetConfig+0x1ac>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb49 	.word	0x0800bb49
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb59 	.word	0x0800bb59
 800bb3c:	0800bb61 	.word	0x0800bb61
 800bb40:	0800bb69 	.word	0x0800bb69
 800bb44:	0800bb71 	.word	0x0800bb71
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4e:	e1ec      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb50:	2304      	movs	r3, #4
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb56:	e1e8      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb58:	2308      	movs	r3, #8
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5e:	e1e4      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb60:	2310      	movs	r3, #16
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb66:	e1e0      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6e:	e1dc      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb70:	2340      	movs	r3, #64	@ 0x40
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb76:	e1d8      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb78:	2380      	movs	r3, #128	@ 0x80
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	e1d4      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a4f      	ldr	r2, [pc, #316]	@ (800bcc4 <UART_SetConfig+0x340>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d130      	bne.n	800bbec <UART_SetConfig+0x268>
 800bb8a:	4b4c      	ldr	r3, [pc, #304]	@ (800bcbc <UART_SetConfig+0x338>)
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb8e:	f003 0307 	and.w	r3, r3, #7
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d826      	bhi.n	800bbe4 <UART_SetConfig+0x260>
 800bb96:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <UART_SetConfig+0x218>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbb5 	.word	0x0800bbb5
 800bba0:	0800bbbd 	.word	0x0800bbbd
 800bba4:	0800bbc5 	.word	0x0800bbc5
 800bba8:	0800bbcd 	.word	0x0800bbcd
 800bbac:	0800bbd5 	.word	0x0800bbd5
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbba:	e1b6      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc2:	e1b2      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbca:	e1ae      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd2:	e1aa      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbd4:	2320      	movs	r3, #32
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbda:	e1a6      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbdc:	2340      	movs	r3, #64	@ 0x40
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe2:	e1a2      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbe4:	2380      	movs	r3, #128	@ 0x80
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbea:	e19e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a35      	ldr	r2, [pc, #212]	@ (800bcc8 <UART_SetConfig+0x344>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d130      	bne.n	800bc58 <UART_SetConfig+0x2d4>
 800bbf6:	4b31      	ldr	r3, [pc, #196]	@ (800bcbc <UART_SetConfig+0x338>)
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbfa:	f003 0307 	and.w	r3, r3, #7
 800bbfe:	2b05      	cmp	r3, #5
 800bc00:	d826      	bhi.n	800bc50 <UART_SetConfig+0x2cc>
 800bc02:	a201      	add	r2, pc, #4	@ (adr r2, 800bc08 <UART_SetConfig+0x284>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc21 	.word	0x0800bc21
 800bc0c:	0800bc29 	.word	0x0800bc29
 800bc10:	0800bc31 	.word	0x0800bc31
 800bc14:	0800bc39 	.word	0x0800bc39
 800bc18:	0800bc41 	.word	0x0800bc41
 800bc1c:	0800bc49 	.word	0x0800bc49
 800bc20:	2300      	movs	r3, #0
 800bc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc26:	e180      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc28:	2304      	movs	r3, #4
 800bc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc2e:	e17c      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc30:	2308      	movs	r3, #8
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc36:	e178      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc38:	2310      	movs	r3, #16
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3e:	e174      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc40:	2320      	movs	r3, #32
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc46:	e170      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc48:	2340      	movs	r3, #64	@ 0x40
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4e:	e16c      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc50:	2380      	movs	r3, #128	@ 0x80
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	e168      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bccc <UART_SetConfig+0x348>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d142      	bne.n	800bce8 <UART_SetConfig+0x364>
 800bc62:	4b16      	ldr	r3, [pc, #88]	@ (800bcbc <UART_SetConfig+0x338>)
 800bc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	2b05      	cmp	r3, #5
 800bc6c:	d838      	bhi.n	800bce0 <UART_SetConfig+0x35c>
 800bc6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc74 <UART_SetConfig+0x2f0>)
 800bc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bc95 	.word	0x0800bc95
 800bc7c:	0800bc9d 	.word	0x0800bc9d
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bcd1 	.word	0x0800bcd1
 800bc88:	0800bcd9 	.word	0x0800bcd9
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc92:	e14a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc94:	2304      	movs	r3, #4
 800bc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc9a:	e146      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bc9c:	2308      	movs	r3, #8
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca2:	e142      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bca4:	2310      	movs	r3, #16
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcaa:	e13e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bcac:	cfff69f3 	.word	0xcfff69f3
 800bcb0:	58000c00 	.word	0x58000c00
 800bcb4:	11fff4ff 	.word	0x11fff4ff
 800bcb8:	40011000 	.word	0x40011000
 800bcbc:	58024400 	.word	0x58024400
 800bcc0:	40004400 	.word	0x40004400
 800bcc4:	40004800 	.word	0x40004800
 800bcc8:	40004c00 	.word	0x40004c00
 800bccc:	40005000 	.word	0x40005000
 800bcd0:	2320      	movs	r3, #32
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e128      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bcd8:	2340      	movs	r3, #64	@ 0x40
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e124      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bce0:	2380      	movs	r3, #128	@ 0x80
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e120      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4acb      	ldr	r2, [pc, #812]	@ (800c01c <UART_SetConfig+0x698>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d176      	bne.n	800bde0 <UART_SetConfig+0x45c>
 800bcf2:	4bcb      	ldr	r3, [pc, #812]	@ (800c020 <UART_SetConfig+0x69c>)
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bcfa:	2b28      	cmp	r3, #40	@ 0x28
 800bcfc:	d86c      	bhi.n	800bdd8 <UART_SetConfig+0x454>
 800bcfe:	a201      	add	r2, pc, #4	@ (adr r2, 800bd04 <UART_SetConfig+0x380>)
 800bd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd04:	0800bda9 	.word	0x0800bda9
 800bd08:	0800bdd9 	.word	0x0800bdd9
 800bd0c:	0800bdd9 	.word	0x0800bdd9
 800bd10:	0800bdd9 	.word	0x0800bdd9
 800bd14:	0800bdd9 	.word	0x0800bdd9
 800bd18:	0800bdd9 	.word	0x0800bdd9
 800bd1c:	0800bdd9 	.word	0x0800bdd9
 800bd20:	0800bdd9 	.word	0x0800bdd9
 800bd24:	0800bdb1 	.word	0x0800bdb1
 800bd28:	0800bdd9 	.word	0x0800bdd9
 800bd2c:	0800bdd9 	.word	0x0800bdd9
 800bd30:	0800bdd9 	.word	0x0800bdd9
 800bd34:	0800bdd9 	.word	0x0800bdd9
 800bd38:	0800bdd9 	.word	0x0800bdd9
 800bd3c:	0800bdd9 	.word	0x0800bdd9
 800bd40:	0800bdd9 	.word	0x0800bdd9
 800bd44:	0800bdb9 	.word	0x0800bdb9
 800bd48:	0800bdd9 	.word	0x0800bdd9
 800bd4c:	0800bdd9 	.word	0x0800bdd9
 800bd50:	0800bdd9 	.word	0x0800bdd9
 800bd54:	0800bdd9 	.word	0x0800bdd9
 800bd58:	0800bdd9 	.word	0x0800bdd9
 800bd5c:	0800bdd9 	.word	0x0800bdd9
 800bd60:	0800bdd9 	.word	0x0800bdd9
 800bd64:	0800bdc1 	.word	0x0800bdc1
 800bd68:	0800bdd9 	.word	0x0800bdd9
 800bd6c:	0800bdd9 	.word	0x0800bdd9
 800bd70:	0800bdd9 	.word	0x0800bdd9
 800bd74:	0800bdd9 	.word	0x0800bdd9
 800bd78:	0800bdd9 	.word	0x0800bdd9
 800bd7c:	0800bdd9 	.word	0x0800bdd9
 800bd80:	0800bdd9 	.word	0x0800bdd9
 800bd84:	0800bdc9 	.word	0x0800bdc9
 800bd88:	0800bdd9 	.word	0x0800bdd9
 800bd8c:	0800bdd9 	.word	0x0800bdd9
 800bd90:	0800bdd9 	.word	0x0800bdd9
 800bd94:	0800bdd9 	.word	0x0800bdd9
 800bd98:	0800bdd9 	.word	0x0800bdd9
 800bd9c:	0800bdd9 	.word	0x0800bdd9
 800bda0:	0800bdd9 	.word	0x0800bdd9
 800bda4:	0800bdd1 	.word	0x0800bdd1
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdae:	e0bc      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb6:	e0b8      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdb8:	2308      	movs	r3, #8
 800bdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdbe:	e0b4      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc6:	e0b0      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdc8:	2320      	movs	r3, #32
 800bdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdce:	e0ac      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdd0:	2340      	movs	r3, #64	@ 0x40
 800bdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd6:	e0a8      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bdd8:	2380      	movs	r3, #128	@ 0x80
 800bdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdde:	e0a4      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a8f      	ldr	r2, [pc, #572]	@ (800c024 <UART_SetConfig+0x6a0>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d130      	bne.n	800be4c <UART_SetConfig+0x4c8>
 800bdea:	4b8d      	ldr	r3, [pc, #564]	@ (800c020 <UART_SetConfig+0x69c>)
 800bdec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d826      	bhi.n	800be44 <UART_SetConfig+0x4c0>
 800bdf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdfc <UART_SetConfig+0x478>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be15 	.word	0x0800be15
 800be00:	0800be1d 	.word	0x0800be1d
 800be04:	0800be25 	.word	0x0800be25
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be35 	.word	0x0800be35
 800be10:	0800be3d 	.word	0x0800be3d
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1a:	e086      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be22:	e082      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2a:	e07e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be32:	e07a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3a:	e076      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be3c:	2340      	movs	r3, #64	@ 0x40
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be42:	e072      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be44:	2380      	movs	r3, #128	@ 0x80
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4a:	e06e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a75      	ldr	r2, [pc, #468]	@ (800c028 <UART_SetConfig+0x6a4>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d130      	bne.n	800beb8 <UART_SetConfig+0x534>
 800be56:	4b72      	ldr	r3, [pc, #456]	@ (800c020 <UART_SetConfig+0x69c>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d826      	bhi.n	800beb0 <UART_SetConfig+0x52c>
 800be62:	a201      	add	r2, pc, #4	@ (adr r2, 800be68 <UART_SetConfig+0x4e4>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be81 	.word	0x0800be81
 800be6c:	0800be89 	.word	0x0800be89
 800be70:	0800be91 	.word	0x0800be91
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be86:	e050      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be88:	2304      	movs	r3, #4
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be8e:	e04c      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be90:	2308      	movs	r3, #8
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be96:	e048      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800be98:	2310      	movs	r3, #16
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9e:	e044      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bea0:	2320      	movs	r3, #32
 800bea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea6:	e040      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bea8:	2340      	movs	r3, #64	@ 0x40
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beae:	e03c      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800beb0:	2380      	movs	r3, #128	@ 0x80
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb6:	e038      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a5b      	ldr	r2, [pc, #364]	@ (800c02c <UART_SetConfig+0x6a8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d130      	bne.n	800bf24 <UART_SetConfig+0x5a0>
 800bec2:	4b57      	ldr	r3, [pc, #348]	@ (800c020 <UART_SetConfig+0x69c>)
 800bec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b05      	cmp	r3, #5
 800becc:	d826      	bhi.n	800bf1c <UART_SetConfig+0x598>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <UART_SetConfig+0x550>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800beed 	.word	0x0800beed
 800bed8:	0800bef5 	.word	0x0800bef5
 800bedc:	0800befd 	.word	0x0800befd
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf15 	.word	0x0800bf15
 800beec:	2302      	movs	r3, #2
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bef2:	e01a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bef4:	2304      	movs	r3, #4
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800befa:	e016      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800befc:	2308      	movs	r3, #8
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf02:	e012      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bf04:	2310      	movs	r3, #16
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0a:	e00e      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bf0c:	2320      	movs	r3, #32
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf12:	e00a      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bf14:	2340      	movs	r3, #64	@ 0x40
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1a:	e006      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bf1c:	2380      	movs	r3, #128	@ 0x80
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf22:	e002      	b.n	800bf2a <UART_SetConfig+0x5a6>
 800bf24:	2380      	movs	r3, #128	@ 0x80
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a3f      	ldr	r2, [pc, #252]	@ (800c02c <UART_SetConfig+0x6a8>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	f040 80f8 	bne.w	800c126 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	2b20      	cmp	r3, #32
 800bf3c:	dc46      	bgt.n	800bfcc <UART_SetConfig+0x648>
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	f2c0 8082 	blt.w	800c048 <UART_SetConfig+0x6c4>
 800bf44:	3b02      	subs	r3, #2
 800bf46:	2b1e      	cmp	r3, #30
 800bf48:	d87e      	bhi.n	800c048 <UART_SetConfig+0x6c4>
 800bf4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf50 <UART_SetConfig+0x5cc>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bfd3 	.word	0x0800bfd3
 800bf54:	0800c049 	.word	0x0800c049
 800bf58:	0800bfdb 	.word	0x0800bfdb
 800bf5c:	0800c049 	.word	0x0800c049
 800bf60:	0800c049 	.word	0x0800c049
 800bf64:	0800c049 	.word	0x0800c049
 800bf68:	0800bfeb 	.word	0x0800bfeb
 800bf6c:	0800c049 	.word	0x0800c049
 800bf70:	0800c049 	.word	0x0800c049
 800bf74:	0800c049 	.word	0x0800c049
 800bf78:	0800c049 	.word	0x0800c049
 800bf7c:	0800c049 	.word	0x0800c049
 800bf80:	0800c049 	.word	0x0800c049
 800bf84:	0800c049 	.word	0x0800c049
 800bf88:	0800bffb 	.word	0x0800bffb
 800bf8c:	0800c049 	.word	0x0800c049
 800bf90:	0800c049 	.word	0x0800c049
 800bf94:	0800c049 	.word	0x0800c049
 800bf98:	0800c049 	.word	0x0800c049
 800bf9c:	0800c049 	.word	0x0800c049
 800bfa0:	0800c049 	.word	0x0800c049
 800bfa4:	0800c049 	.word	0x0800c049
 800bfa8:	0800c049 	.word	0x0800c049
 800bfac:	0800c049 	.word	0x0800c049
 800bfb0:	0800c049 	.word	0x0800c049
 800bfb4:	0800c049 	.word	0x0800c049
 800bfb8:	0800c049 	.word	0x0800c049
 800bfbc:	0800c049 	.word	0x0800c049
 800bfc0:	0800c049 	.word	0x0800c049
 800bfc4:	0800c049 	.word	0x0800c049
 800bfc8:	0800c03b 	.word	0x0800c03b
 800bfcc:	2b40      	cmp	r3, #64	@ 0x40
 800bfce:	d037      	beq.n	800c040 <UART_SetConfig+0x6bc>
 800bfd0:	e03a      	b.n	800c048 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bfd2:	f7fc fe2b 	bl	8008c2c <HAL_RCCEx_GetD3PCLK1Freq>
 800bfd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfd8:	e03c      	b.n	800c054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fc fe3a 	bl	8008c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfe8:	e034      	b.n	800c054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfea:	f107 0318 	add.w	r3, r7, #24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fc ff86 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bff8:	e02c      	b.n	800c054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bffa:	4b09      	ldr	r3, [pc, #36]	@ (800c020 <UART_SetConfig+0x69c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b00      	cmp	r3, #0
 800c004:	d016      	beq.n	800c034 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c006:	4b06      	ldr	r3, [pc, #24]	@ (800c020 <UART_SetConfig+0x69c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	08db      	lsrs	r3, r3, #3
 800c00c:	f003 0303 	and.w	r3, r3, #3
 800c010:	4a07      	ldr	r2, [pc, #28]	@ (800c030 <UART_SetConfig+0x6ac>)
 800c012:	fa22 f303 	lsr.w	r3, r2, r3
 800c016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c018:	e01c      	b.n	800c054 <UART_SetConfig+0x6d0>
 800c01a:	bf00      	nop
 800c01c:	40011400 	.word	0x40011400
 800c020:	58024400 	.word	0x58024400
 800c024:	40007800 	.word	0x40007800
 800c028:	40007c00 	.word	0x40007c00
 800c02c:	58000c00 	.word	0x58000c00
 800c030:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c034:	4b9d      	ldr	r3, [pc, #628]	@ (800c2ac <UART_SetConfig+0x928>)
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c038:	e00c      	b.n	800c054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c03a:	4b9d      	ldr	r3, [pc, #628]	@ (800c2b0 <UART_SetConfig+0x92c>)
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c03e:	e009      	b.n	800c054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c046:	e005      	b.n	800c054 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c048:	2300      	movs	r3, #0
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 81de 	beq.w	800c418 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c060:	4a94      	ldr	r2, [pc, #592]	@ (800c2b4 <UART_SetConfig+0x930>)
 800c062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c066:	461a      	mov	r2, r3
 800c068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4613      	mov	r3, r2
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d305      	bcc.n	800c08c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c088:	429a      	cmp	r2, r3
 800c08a:	d903      	bls.n	800c094 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c092:	e1c1      	b.n	800c418 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c096:	2200      	movs	r2, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	60fa      	str	r2, [r7, #12]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a0:	4a84      	ldr	r2, [pc, #528]	@ (800c2b4 <UART_SetConfig+0x930>)
 800c0a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c0b6:	f7f4 fb27 	bl	8000708 <__aeabi_uldivmod>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	020b      	lsls	r3, r1, #8
 800c0cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c0d0:	0202      	lsls	r2, r0, #8
 800c0d2:	6979      	ldr	r1, [r7, #20]
 800c0d4:	6849      	ldr	r1, [r1, #4]
 800c0d6:	0849      	lsrs	r1, r1, #1
 800c0d8:	2000      	movs	r0, #0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	4605      	mov	r5, r0
 800c0de:	eb12 0804 	adds.w	r8, r2, r4
 800c0e2:	eb43 0905 	adc.w	r9, r3, r5
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	469a      	mov	sl, r3
 800c0ee:	4693      	mov	fp, r2
 800c0f0:	4652      	mov	r2, sl
 800c0f2:	465b      	mov	r3, fp
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	f7f4 fb06 	bl	8000708 <__aeabi_uldivmod>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4613      	mov	r3, r2
 800c102:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c10a:	d308      	bcc.n	800c11e <UART_SetConfig+0x79a>
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c112:	d204      	bcs.n	800c11e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c11a:	60da      	str	r2, [r3, #12]
 800c11c:	e17c      	b.n	800c418 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c124:	e178      	b.n	800c418 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c12e:	f040 80c5 	bne.w	800c2bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c132:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c136:	2b20      	cmp	r3, #32
 800c138:	dc48      	bgt.n	800c1cc <UART_SetConfig+0x848>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	db7b      	blt.n	800c236 <UART_SetConfig+0x8b2>
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d879      	bhi.n	800c236 <UART_SetConfig+0x8b2>
 800c142:	a201      	add	r2, pc, #4	@ (adr r2, 800c148 <UART_SetConfig+0x7c4>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c1d3 	.word	0x0800c1d3
 800c14c:	0800c1db 	.word	0x0800c1db
 800c150:	0800c237 	.word	0x0800c237
 800c154:	0800c237 	.word	0x0800c237
 800c158:	0800c1e3 	.word	0x0800c1e3
 800c15c:	0800c237 	.word	0x0800c237
 800c160:	0800c237 	.word	0x0800c237
 800c164:	0800c237 	.word	0x0800c237
 800c168:	0800c1f3 	.word	0x0800c1f3
 800c16c:	0800c237 	.word	0x0800c237
 800c170:	0800c237 	.word	0x0800c237
 800c174:	0800c237 	.word	0x0800c237
 800c178:	0800c237 	.word	0x0800c237
 800c17c:	0800c237 	.word	0x0800c237
 800c180:	0800c237 	.word	0x0800c237
 800c184:	0800c237 	.word	0x0800c237
 800c188:	0800c203 	.word	0x0800c203
 800c18c:	0800c237 	.word	0x0800c237
 800c190:	0800c237 	.word	0x0800c237
 800c194:	0800c237 	.word	0x0800c237
 800c198:	0800c237 	.word	0x0800c237
 800c19c:	0800c237 	.word	0x0800c237
 800c1a0:	0800c237 	.word	0x0800c237
 800c1a4:	0800c237 	.word	0x0800c237
 800c1a8:	0800c237 	.word	0x0800c237
 800c1ac:	0800c237 	.word	0x0800c237
 800c1b0:	0800c237 	.word	0x0800c237
 800c1b4:	0800c237 	.word	0x0800c237
 800c1b8:	0800c237 	.word	0x0800c237
 800c1bc:	0800c237 	.word	0x0800c237
 800c1c0:	0800c237 	.word	0x0800c237
 800c1c4:	0800c237 	.word	0x0800c237
 800c1c8:	0800c229 	.word	0x0800c229
 800c1cc:	2b40      	cmp	r3, #64	@ 0x40
 800c1ce:	d02e      	beq.n	800c22e <UART_SetConfig+0x8aa>
 800c1d0:	e031      	b.n	800c236 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1d2:	f7fb fab3 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 800c1d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1d8:	e033      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1da:	f7fb fac5 	bl	8007768 <HAL_RCC_GetPCLK2Freq>
 800c1de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1e0:	e02f      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fc fd36 	bl	8008c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1f0:	e027      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1f2:	f107 0318 	add.w	r3, r7, #24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fc fe82 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c200:	e01f      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c202:	4b2d      	ldr	r3, [pc, #180]	@ (800c2b8 <UART_SetConfig+0x934>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0320 	and.w	r3, r3, #32
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c20e:	4b2a      	ldr	r3, [pc, #168]	@ (800c2b8 <UART_SetConfig+0x934>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	08db      	lsrs	r3, r3, #3
 800c214:	f003 0303 	and.w	r3, r3, #3
 800c218:	4a24      	ldr	r2, [pc, #144]	@ (800c2ac <UART_SetConfig+0x928>)
 800c21a:	fa22 f303 	lsr.w	r3, r2, r3
 800c21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c220:	e00f      	b.n	800c242 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c222:	4b22      	ldr	r3, [pc, #136]	@ (800c2ac <UART_SetConfig+0x928>)
 800c224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c226:	e00c      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c228:	4b21      	ldr	r3, [pc, #132]	@ (800c2b0 <UART_SetConfig+0x92c>)
 800c22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c22c:	e009      	b.n	800c242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c22e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c234:	e005      	b.n	800c242 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 80e7 	beq.w	800c418 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	4a19      	ldr	r2, [pc, #100]	@ (800c2b4 <UART_SetConfig+0x930>)
 800c250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c254:	461a      	mov	r2, r3
 800c256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c258:	fbb3 f3f2 	udiv	r3, r3, r2
 800c25c:	005a      	lsls	r2, r3, #1
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	085b      	lsrs	r3, r3, #1
 800c264:	441a      	add	r2, r3
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c26e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	2b0f      	cmp	r3, #15
 800c274:	d916      	bls.n	800c2a4 <UART_SetConfig+0x920>
 800c276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c27c:	d212      	bcs.n	800c2a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c280:	b29b      	uxth	r3, r3
 800c282:	f023 030f 	bic.w	r3, r3, #15
 800c286:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28a:	085b      	lsrs	r3, r3, #1
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	b29a      	uxth	r2, r3
 800c294:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c296:	4313      	orrs	r3, r2
 800c298:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c2a0:	60da      	str	r2, [r3, #12]
 800c2a2:	e0b9      	b.n	800c418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c2aa:	e0b5      	b.n	800c418 <UART_SetConfig+0xa94>
 800c2ac:	03d09000 	.word	0x03d09000
 800c2b0:	003d0900 	.word	0x003d0900
 800c2b4:	08016f0c 	.word	0x08016f0c
 800c2b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	dc49      	bgt.n	800c358 <UART_SetConfig+0x9d4>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	db7c      	blt.n	800c3c2 <UART_SetConfig+0xa3e>
 800c2c8:	2b20      	cmp	r3, #32
 800c2ca:	d87a      	bhi.n	800c3c2 <UART_SetConfig+0xa3e>
 800c2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d4 <UART_SetConfig+0x950>)
 800c2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d2:	bf00      	nop
 800c2d4:	0800c35f 	.word	0x0800c35f
 800c2d8:	0800c367 	.word	0x0800c367
 800c2dc:	0800c3c3 	.word	0x0800c3c3
 800c2e0:	0800c3c3 	.word	0x0800c3c3
 800c2e4:	0800c36f 	.word	0x0800c36f
 800c2e8:	0800c3c3 	.word	0x0800c3c3
 800c2ec:	0800c3c3 	.word	0x0800c3c3
 800c2f0:	0800c3c3 	.word	0x0800c3c3
 800c2f4:	0800c37f 	.word	0x0800c37f
 800c2f8:	0800c3c3 	.word	0x0800c3c3
 800c2fc:	0800c3c3 	.word	0x0800c3c3
 800c300:	0800c3c3 	.word	0x0800c3c3
 800c304:	0800c3c3 	.word	0x0800c3c3
 800c308:	0800c3c3 	.word	0x0800c3c3
 800c30c:	0800c3c3 	.word	0x0800c3c3
 800c310:	0800c3c3 	.word	0x0800c3c3
 800c314:	0800c38f 	.word	0x0800c38f
 800c318:	0800c3c3 	.word	0x0800c3c3
 800c31c:	0800c3c3 	.word	0x0800c3c3
 800c320:	0800c3c3 	.word	0x0800c3c3
 800c324:	0800c3c3 	.word	0x0800c3c3
 800c328:	0800c3c3 	.word	0x0800c3c3
 800c32c:	0800c3c3 	.word	0x0800c3c3
 800c330:	0800c3c3 	.word	0x0800c3c3
 800c334:	0800c3c3 	.word	0x0800c3c3
 800c338:	0800c3c3 	.word	0x0800c3c3
 800c33c:	0800c3c3 	.word	0x0800c3c3
 800c340:	0800c3c3 	.word	0x0800c3c3
 800c344:	0800c3c3 	.word	0x0800c3c3
 800c348:	0800c3c3 	.word	0x0800c3c3
 800c34c:	0800c3c3 	.word	0x0800c3c3
 800c350:	0800c3c3 	.word	0x0800c3c3
 800c354:	0800c3b5 	.word	0x0800c3b5
 800c358:	2b40      	cmp	r3, #64	@ 0x40
 800c35a:	d02e      	beq.n	800c3ba <UART_SetConfig+0xa36>
 800c35c:	e031      	b.n	800c3c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c35e:	f7fb f9ed 	bl	800773c <HAL_RCC_GetPCLK1Freq>
 800c362:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c364:	e033      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c366:	f7fb f9ff 	bl	8007768 <HAL_RCC_GetPCLK2Freq>
 800c36a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c36c:	e02f      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c36e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c372:	4618      	mov	r0, r3
 800c374:	f7fc fc70 	bl	8008c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c37c:	e027      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c37e:	f107 0318 	add.w	r3, r7, #24
 800c382:	4618      	mov	r0, r3
 800c384:	f7fc fdbc 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c38c:	e01f      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c38e:	4b2d      	ldr	r3, [pc, #180]	@ (800c444 <UART_SetConfig+0xac0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	d009      	beq.n	800c3ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c39a:	4b2a      	ldr	r3, [pc, #168]	@ (800c444 <UART_SetConfig+0xac0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	08db      	lsrs	r3, r3, #3
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	4a28      	ldr	r2, [pc, #160]	@ (800c448 <UART_SetConfig+0xac4>)
 800c3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3ac:	e00f      	b.n	800c3ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c3ae:	4b26      	ldr	r3, [pc, #152]	@ (800c448 <UART_SetConfig+0xac4>)
 800c3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b2:	e00c      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3b4:	4b25      	ldr	r3, [pc, #148]	@ (800c44c <UART_SetConfig+0xac8>)
 800c3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b8:	e009      	b.n	800c3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3c0:	e005      	b.n	800c3ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c3cc:	bf00      	nop
    }

    if (pclk != 0U)
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d021      	beq.n	800c418 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c450 <UART_SetConfig+0xacc>)
 800c3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	085b      	lsrs	r3, r3, #1
 800c3ec:	441a      	add	r2, r3
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fa:	2b0f      	cmp	r3, #15
 800c3fc:	d909      	bls.n	800c412 <UART_SetConfig+0xa8e>
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c404:	d205      	bcs.n	800c412 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	b29a      	uxth	r2, r3
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	60da      	str	r2, [r3, #12]
 800c410:	e002      	b.n	800c418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	2201      	movs	r2, #1
 800c424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2200      	movs	r2, #0
 800c42c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2200      	movs	r2, #0
 800c432:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c434:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3748      	adds	r7, #72	@ 0x48
 800c43c:	46bd      	mov	sp, r7
 800c43e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c442:	bf00      	nop
 800c444:	58024400 	.word	0x58024400
 800c448:	03d09000 	.word	0x03d09000
 800c44c:	003d0900 	.word	0x003d0900
 800c450:	08016f0c 	.word	0x08016f0c

0800c454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c460:	f003 0308 	and.w	r3, r3, #8
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00a      	beq.n	800c47e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	430a      	orrs	r2, r1
 800c49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a4:	f003 0302 	and.w	r3, r3, #2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00a      	beq.n	800c4c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c6:	f003 0304 	and.w	r3, r3, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00a      	beq.n	800c4e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e8:	f003 0310 	and.w	r3, r3, #16
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00a      	beq.n	800c506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	430a      	orrs	r2, r1
 800c504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50a:	f003 0320 	and.w	r3, r3, #32
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c530:	2b00      	cmp	r3, #0
 800c532:	d01a      	beq.n	800c56a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c54e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c552:	d10a      	bne.n	800c56a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	430a      	orrs	r2, r1
 800c568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	430a      	orrs	r2, r1
 800c58a:	605a      	str	r2, [r3, #4]
  }
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b098      	sub	sp, #96	@ 0x60
 800c59c:	af02      	add	r7, sp, #8
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5a8:	f7f8 fa3a 	bl	8004a20 <HAL_GetTick>
 800c5ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0308 	and.w	r3, r3, #8
 800c5b8:	2b08      	cmp	r3, #8
 800c5ba:	d12f      	bne.n	800c61c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f88e 	bl	800c6ec <UART_WaitOnFlagUntilTimeout>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d022      	beq.n	800c61c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e6      	bne.n	800c5d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e063      	b.n	800c6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b04      	cmp	r3, #4
 800c628:	d149      	bne.n	800c6be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c62a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c632:	2200      	movs	r2, #0
 800c634:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f857 	bl	800c6ec <UART_WaitOnFlagUntilTimeout>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d03c      	beq.n	800c6be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	623b      	str	r3, [r7, #32]
   return(result);
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c662:	633b      	str	r3, [r7, #48]	@ 0x30
 800c664:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c66a:	e841 2300 	strex	r3, r2, [r1]
 800c66e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1e6      	bne.n	800c644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	60fb      	str	r3, [r7, #12]
   return(result);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f023 0301 	bic.w	r3, r3, #1
 800c68c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3308      	adds	r3, #8
 800c694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c696:	61fa      	str	r2, [r7, #28]
 800c698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	69b9      	ldr	r1, [r7, #24]
 800c69c:	69fa      	ldr	r2, [r7, #28]
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e5      	bne.n	800c676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e012      	b.n	800c6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2220      	movs	r2, #32
 800c6c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3758      	adds	r7, #88	@ 0x58
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6fc:	e04f      	b.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d04b      	beq.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c706:	f7f8 f98b 	bl	8004a20 <HAL_GetTick>
 800c70a:	4602      	mov	r2, r0
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	429a      	cmp	r2, r3
 800c714:	d302      	bcc.n	800c71c <UART_WaitOnFlagUntilTimeout+0x30>
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e04e      	b.n	800c7be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 0304 	and.w	r3, r3, #4
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d037      	beq.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b80      	cmp	r3, #128	@ 0x80
 800c732:	d034      	beq.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b40      	cmp	r3, #64	@ 0x40
 800c738:	d031      	beq.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f003 0308 	and.w	r3, r3, #8
 800c744:	2b08      	cmp	r3, #8
 800c746:	d110      	bne.n	800c76a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2208      	movs	r2, #8
 800c74e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 f95b 	bl	800ca0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2208      	movs	r2, #8
 800c75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e029      	b.n	800c7be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69db      	ldr	r3, [r3, #28]
 800c770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c778:	d111      	bne.n	800c79e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f941 	bl	800ca0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e00f      	b.n	800c7be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	69da      	ldr	r2, [r3, #28]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	bf0c      	ite	eq
 800c7ae:	2301      	moveq	r3, #1
 800c7b0:	2300      	movne	r3, #0
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d0a0      	beq.n	800c6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b0a3      	sub	sp, #140	@ 0x8c
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	88fa      	ldrh	r2, [r7, #6]
 800c7e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	88fa      	ldrh	r2, [r7, #6]
 800c7e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7fa:	d10e      	bne.n	800c81a <UART_Start_Receive_IT+0x52>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d105      	bne.n	800c810 <UART_Start_Receive_IT+0x48>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c80a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c80e:	e02d      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	22ff      	movs	r2, #255	@ 0xff
 800c814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c818:	e028      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10d      	bne.n	800c83e <UART_Start_Receive_IT+0x76>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d104      	bne.n	800c834 <UART_Start_Receive_IT+0x6c>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	22ff      	movs	r2, #255	@ 0xff
 800c82e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c832:	e01b      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	227f      	movs	r2, #127	@ 0x7f
 800c838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c83c:	e016      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c846:	d10d      	bne.n	800c864 <UART_Start_Receive_IT+0x9c>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <UART_Start_Receive_IT+0x92>
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	227f      	movs	r2, #127	@ 0x7f
 800c854:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c858:	e008      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	223f      	movs	r2, #63	@ 0x3f
 800c85e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c862:	e003      	b.n	800c86c <UART_Start_Receive_IT+0xa4>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2222      	movs	r2, #34	@ 0x22
 800c878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3308      	adds	r3, #8
 800c882:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c886:	e853 3f00 	ldrex	r3, [r3]
 800c88a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c88c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c88e:	f043 0301 	orr.w	r3, r3, #1
 800c892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3308      	adds	r3, #8
 800c89c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c8a0:	673a      	str	r2, [r7, #112]	@ 0x70
 800c8a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c8a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c8a8:	e841 2300 	strex	r3, r2, [r1]
 800c8ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c8ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e3      	bne.n	800c87c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8bc:	d14f      	bne.n	800c95e <UART_Start_Receive_IT+0x196>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c8c4:	88fa      	ldrh	r2, [r7, #6]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d349      	bcc.n	800c95e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8d2:	d107      	bne.n	800c8e4 <UART_Start_Receive_IT+0x11c>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d103      	bne.n	800c8e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4a47      	ldr	r2, [pc, #284]	@ (800c9fc <UART_Start_Receive_IT+0x234>)
 800c8e0:	675a      	str	r2, [r3, #116]	@ 0x74
 800c8e2:	e002      	b.n	800c8ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4a46      	ldr	r2, [pc, #280]	@ (800ca00 <UART_Start_Receive_IT+0x238>)
 800c8e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d01a      	beq.n	800c928 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c916:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c918:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c91a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c91c:	e841 2300 	strex	r3, r2, [r1]
 800c920:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1e4      	bne.n	800c8f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3308      	adds	r3, #8
 800c92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c932:	e853 3f00 	ldrex	r3, [r3]
 800c936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c93e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3308      	adds	r3, #8
 800c946:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c948:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c94a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c94e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c950:	e841 2300 	strex	r3, r2, [r1]
 800c954:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1e5      	bne.n	800c928 <UART_Start_Receive_IT+0x160>
 800c95c:	e046      	b.n	800c9ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c966:	d107      	bne.n	800c978 <UART_Start_Receive_IT+0x1b0>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	4a24      	ldr	r2, [pc, #144]	@ (800ca04 <UART_Start_Receive_IT+0x23c>)
 800c974:	675a      	str	r2, [r3, #116]	@ 0x74
 800c976:	e002      	b.n	800c97e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	4a23      	ldr	r2, [pc, #140]	@ (800ca08 <UART_Start_Receive_IT+0x240>)
 800c97c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d019      	beq.n	800c9ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c996:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c99a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c9aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1e6      	bne.n	800c986 <UART_Start_Receive_IT+0x1be>
 800c9b8:	e018      	b.n	800c9ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	e853 3f00 	ldrex	r3, [r3]
 800c9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f043 0320 	orr.w	r3, r3, #32
 800c9ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9d8:	623b      	str	r3, [r7, #32]
 800c9da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	69f9      	ldr	r1, [r7, #28]
 800c9de:	6a3a      	ldr	r2, [r7, #32]
 800c9e0:	e841 2300 	strex	r3, r2, [r1]
 800c9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e6      	bne.n	800c9ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	378c      	adds	r7, #140	@ 0x8c
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	0800d22d 	.word	0x0800d22d
 800ca00:	0800cecd 	.word	0x0800cecd
 800ca04:	0800cd15 	.word	0x0800cd15
 800ca08:	0800cb5d 	.word	0x0800cb5d

0800ca0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b095      	sub	sp, #84	@ 0x54
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca32:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e6      	bne.n	800ca14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	e853 3f00 	ldrex	r3, [r3]
 800ca54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca56:	69fa      	ldr	r2, [r7, #28]
 800ca58:	4b1e      	ldr	r3, [pc, #120]	@ (800cad4 <UART_EndRxTransfer+0xc8>)
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3308      	adds	r3, #8
 800ca64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e5      	bne.n	800ca46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d118      	bne.n	800cab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	e853 3f00 	ldrex	r3, [r3]
 800ca8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	f023 0310 	bic.w	r3, r3, #16
 800ca96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caa0:	61bb      	str	r3, [r7, #24]
 800caa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa4:	6979      	ldr	r1, [r7, #20]
 800caa6:	69ba      	ldr	r2, [r7, #24]
 800caa8:	e841 2300 	strex	r3, r2, [r1]
 800caac:	613b      	str	r3, [r7, #16]
   return(result);
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e6      	bne.n	800ca82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2220      	movs	r2, #32
 800cab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cac8:	bf00      	nop
 800caca:	3754      	adds	r7, #84	@ 0x54
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	effffffe 	.word	0xeffffffe

0800cad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7fe ff2e 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafc:	bf00      	nop
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	61bb      	str	r3, [r7, #24]
 800cb2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	6979      	ldr	r1, [r7, #20]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	613b      	str	r3, [r7, #16]
   return(result);
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e6      	bne.n	800cb0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2220      	movs	r2, #32
 800cb42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7fe fef9 	bl	800b944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb52:	bf00      	nop
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b09c      	sub	sp, #112	@ 0x70
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb74:	2b22      	cmp	r3, #34	@ 0x22
 800cb76:	f040 80be 	bne.w	800ccf6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cb88:	b2d9      	uxtb	r1, r3
 800cb8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb94:	400a      	ands	r2, r1
 800cb96:	b2d2      	uxtb	r2, r2
 800cb98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	3b01      	subs	r3, #1
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f040 80a1 	bne.w	800cd06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbcc:	e853 3f00 	ldrex	r3, [r3]
 800cbd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cbd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cbe4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cbe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbea:	e841 2300 	strex	r3, r2, [r1]
 800cbee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1e6      	bne.n	800cbc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc00:	e853 3f00 	ldrex	r3, [r3]
 800cc04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc08:	f023 0301 	bic.w	r3, r3, #1
 800cc0c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cc16:	647a      	str	r2, [r7, #68]	@ 0x44
 800cc18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc1e:	e841 2300 	strex	r3, r2, [r1]
 800cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e5      	bne.n	800cbf6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2220      	movs	r2, #32
 800cc2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a33      	ldr	r2, [pc, #204]	@ (800cd10 <UART_RxISR_8BIT+0x1b4>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d01f      	beq.n	800cc88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d018      	beq.n	800cc88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	623b      	str	r3, [r7, #32]
   return(result);
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc6a:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc74:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e6      	bne.n	800cc56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d12e      	bne.n	800ccee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f023 0310 	bic.w	r3, r3, #16
 800ccaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	69b9      	ldr	r1, [r7, #24]
 800ccba:	69fa      	ldr	r2, [r7, #28]
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	617b      	str	r3, [r7, #20]
   return(result);
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e6      	bne.n	800cc96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	f003 0310 	and.w	r3, r3, #16
 800ccd2:	2b10      	cmp	r3, #16
 800ccd4:	d103      	bne.n	800ccde <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2210      	movs	r2, #16
 800ccdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7fe fe40 	bl	800b96c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccec:	e00b      	b.n	800cd06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7f5 faaa 	bl	8002248 <HAL_UART_RxCpltCallback>
}
 800ccf4:	e007      	b.n	800cd06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	699a      	ldr	r2, [r3, #24]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f042 0208 	orr.w	r2, r2, #8
 800cd04:	619a      	str	r2, [r3, #24]
}
 800cd06:	bf00      	nop
 800cd08:	3770      	adds	r7, #112	@ 0x70
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	58000c00 	.word	0x58000c00

0800cd14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b09c      	sub	sp, #112	@ 0x70
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd2c:	2b22      	cmp	r3, #34	@ 0x22
 800cd2e:	f040 80be 	bne.w	800ceae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cd42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cd46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd56:	1c9a      	adds	r2, r3, #2
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	3b01      	subs	r3, #1
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f040 80a1 	bne.w	800cebe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd84:	e853 3f00 	ldrex	r3, [r3]
 800cd88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cd8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd90:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cda0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cda2:	e841 2300 	strex	r3, r2, [r1]
 800cda6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cda8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1e6      	bne.n	800cd7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb8:	e853 3f00 	ldrex	r3, [r3]
 800cdbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc0:	f023 0301 	bic.w	r3, r3, #1
 800cdc4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3308      	adds	r3, #8
 800cdcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cdce:	643a      	str	r2, [r7, #64]	@ 0x40
 800cdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cdd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdd6:	e841 2300 	strex	r3, r2, [r1]
 800cdda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1e5      	bne.n	800cdae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2220      	movs	r2, #32
 800cde6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a33      	ldr	r2, [pc, #204]	@ (800cec8 <UART_RxISR_16BIT+0x1b4>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d01f      	beq.n	800ce40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d018      	beq.n	800ce40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	e853 3f00 	ldrex	r3, [r3]
 800ce1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce34:	e841 2300 	strex	r3, r2, [r1]
 800ce38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1e6      	bne.n	800ce0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d12e      	bne.n	800cea6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	e853 3f00 	ldrex	r3, [r3]
 800ce5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	f023 0310 	bic.w	r3, r3, #16
 800ce62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce6c:	61bb      	str	r3, [r7, #24]
 800ce6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce70:	6979      	ldr	r1, [r7, #20]
 800ce72:	69ba      	ldr	r2, [r7, #24]
 800ce74:	e841 2300 	strex	r3, r2, [r1]
 800ce78:	613b      	str	r3, [r7, #16]
   return(result);
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1e6      	bne.n	800ce4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	69db      	ldr	r3, [r3, #28]
 800ce86:	f003 0310 	and.w	r3, r3, #16
 800ce8a:	2b10      	cmp	r3, #16
 800ce8c:	d103      	bne.n	800ce96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2210      	movs	r2, #16
 800ce94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7fe fd64 	bl	800b96c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cea4:	e00b      	b.n	800cebe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f5 f9ce 	bl	8002248 <HAL_UART_RxCpltCallback>
}
 800ceac:	e007      	b.n	800cebe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	699a      	ldr	r2, [r3, #24]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f042 0208 	orr.w	r2, r2, #8
 800cebc:	619a      	str	r2, [r3, #24]
}
 800cebe:	bf00      	nop
 800cec0:	3770      	adds	r7, #112	@ 0x70
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	58000c00 	.word	0x58000c00

0800cecc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b0ac      	sub	sp, #176	@ 0xb0
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ceda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf02:	2b22      	cmp	r3, #34	@ 0x22
 800cf04:	f040 8180 	bne.w	800d208 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf12:	e123      	b.n	800d15c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cf1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800cf22:	b2d9      	uxtb	r1, r3
 800cf24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf2e:	400a      	ands	r2, r1
 800cf30:	b2d2      	uxtb	r2, r2
 800cf32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	3b01      	subs	r3, #1
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cf5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d053      	beq.n	800d00e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d011      	beq.n	800cf96 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cf72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2201      	movs	r2, #1
 800cf84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf8c:	f043 0201 	orr.w	r2, r3, #1
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d011      	beq.n	800cfc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cfa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00b      	beq.n	800cfc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfbc:	f043 0204 	orr.w	r2, r3, #4
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfca:	f003 0304 	and.w	r3, r3, #4
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d011      	beq.n	800cff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cfd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00b      	beq.n	800cff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2204      	movs	r2, #4
 800cfe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfec:	f043 0202 	orr.w	r2, r3, #2
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d006      	beq.n	800d00e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7fe fca9 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d014:	b29b      	uxth	r3, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	f040 80a0 	bne.w	800d15c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d024:	e853 3f00 	ldrex	r3, [r3]
 800d028:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d02c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	461a      	mov	r2, r3
 800d03a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d03e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d040:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d042:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d044:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d046:	e841 2300 	strex	r3, r2, [r1]
 800d04a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d04c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1e4      	bne.n	800d01c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3308      	adds	r3, #8
 800d058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d05c:	e853 3f00 	ldrex	r3, [r3]
 800d060:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d062:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d064:	4b6e      	ldr	r3, [pc, #440]	@ (800d220 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d066:	4013      	ands	r3, r2
 800d068:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3308      	adds	r3, #8
 800d072:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d076:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d078:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d07c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d07e:	e841 2300 	strex	r3, r2, [r1]
 800d082:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e3      	bne.n	800d052 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a60      	ldr	r2, [pc, #384]	@ (800d224 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d021      	beq.n	800d0ec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d01a      	beq.n	800d0ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0be:	e853 3f00 	ldrex	r3, [r3]
 800d0c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d0ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d0d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0da:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d0e0:	e841 2300 	strex	r3, r2, [r1]
 800d0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1e4      	bne.n	800d0b6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d130      	bne.n	800d156 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d102:	e853 3f00 	ldrex	r3, [r3]
 800d106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10a:	f023 0310 	bic.w	r3, r3, #16
 800d10e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d11c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d11e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e4      	bne.n	800d0fa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	f003 0310 	and.w	r3, r3, #16
 800d13a:	2b10      	cmp	r3, #16
 800d13c:	d103      	bne.n	800d146 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2210      	movs	r2, #16
 800d144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7fe fc0c 	bl	800b96c <HAL_UARTEx_RxEventCallback>
 800d154:	e002      	b.n	800d15c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7f5 f876 	bl	8002248 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d15c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d168:	f003 0320 	and.w	r3, r3, #32
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f47f aed1 	bne.w	800cf14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d178:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d17c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d180:	2b00      	cmp	r3, #0
 800d182:	d049      	beq.n	800d218 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d18a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d18e:	429a      	cmp	r2, r3
 800d190:	d242      	bcs.n	800d218 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3308      	adds	r3, #8
 800d198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	e853 3f00 	ldrex	r3, [r3]
 800d1a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d1a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d1b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1be:	e841 2300 	strex	r3, r2, [r1]
 800d1c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1e3      	bne.n	800d192 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4a16      	ldr	r2, [pc, #88]	@ (800d228 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d1ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	e853 3f00 	ldrex	r3, [r3]
 800d1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	f043 0320 	orr.w	r3, r3, #32
 800d1e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	6979      	ldr	r1, [r7, #20]
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e4      	bne.n	800d1d0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d206:	e007      	b.n	800d218 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	699a      	ldr	r2, [r3, #24]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0208 	orr.w	r2, r2, #8
 800d216:	619a      	str	r2, [r3, #24]
}
 800d218:	bf00      	nop
 800d21a:	37b0      	adds	r7, #176	@ 0xb0
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	effffffe 	.word	0xeffffffe
 800d224:	58000c00 	.word	0x58000c00
 800d228:	0800cb5d 	.word	0x0800cb5d

0800d22c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b0ae      	sub	sp, #184	@ 0xb8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d23a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d262:	2b22      	cmp	r3, #34	@ 0x22
 800d264:	f040 8184 	bne.w	800d570 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d26e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d272:	e127      	b.n	800d4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d282:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d286:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d28a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d28e:	4013      	ands	r3, r2
 800d290:	b29a      	uxth	r2, r3
 800d292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d296:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d29c:	1c9a      	adds	r2, r3, #2
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d2be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2c2:	f003 0307 	and.w	r3, r3, #7
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d053      	beq.n	800d372 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d011      	beq.n	800d2fa <UART_RxISR_16BIT_FIFOEN+0xce>
 800d2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2f0:	f043 0201 	orr.w	r2, r3, #1
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d011      	beq.n	800d32a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00b      	beq.n	800d32a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2202      	movs	r2, #2
 800d318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d320:	f043 0204 	orr.w	r2, r3, #4
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d32a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	2b00      	cmp	r3, #0
 800d334:	d011      	beq.n	800d35a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00b      	beq.n	800d35a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2204      	movs	r2, #4
 800d348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d350:	f043 0202 	orr.w	r2, r3, #2
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d360:	2b00      	cmp	r3, #0
 800d362:	d006      	beq.n	800d372 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7fe faf7 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d378:	b29b      	uxth	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f040 80a2 	bne.w	800d4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d38e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	461a      	mov	r2, r3
 800d39e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d3a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d3aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d3ae:	e841 2300 	strex	r3, r2, [r1]
 800d3b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d3b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1e2      	bne.n	800d380 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3c4:	e853 3f00 	ldrex	r3, [r3]
 800d3c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d3ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d3cc:	4b6e      	ldr	r3, [pc, #440]	@ (800d588 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3308      	adds	r3, #8
 800d3da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d3de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d3e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d3e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d3e6:	e841 2300 	strex	r3, r2, [r1]
 800d3ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d3ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1e3      	bne.n	800d3ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2220      	movs	r2, #32
 800d3f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a60      	ldr	r2, [pc, #384]	@ (800d58c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d021      	beq.n	800d454 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01a      	beq.n	800d454 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d426:	e853 3f00 	ldrex	r3, [r3]
 800d42a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d42c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d42e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d440:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d442:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d448:	e841 2300 	strex	r3, r2, [r1]
 800d44c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e4      	bne.n	800d41e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d130      	bne.n	800d4be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46a:	e853 3f00 	ldrex	r3, [r3]
 800d46e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d472:	f023 0310 	bic.w	r3, r3, #16
 800d476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	461a      	mov	r2, r3
 800d480:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d484:	647b      	str	r3, [r7, #68]	@ 0x44
 800d486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d48a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d48c:	e841 2300 	strex	r3, r2, [r1]
 800d490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e4      	bne.n	800d462 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	f003 0310 	and.w	r3, r3, #16
 800d4a2:	2b10      	cmp	r3, #16
 800d4a4:	d103      	bne.n	800d4ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2210      	movs	r2, #16
 800d4ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7fe fa58 	bl	800b96c <HAL_UARTEx_RxEventCallback>
 800d4bc:	e002      	b.n	800d4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7f4 fec2 	bl	8002248 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d006      	beq.n	800d4da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d4cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4d0:	f003 0320 	and.w	r3, r3, #32
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f47f aecd 	bne.w	800d274 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d4e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d049      	beq.n	800d580 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d242      	bcs.n	800d580 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3308      	adds	r3, #8
 800d500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	623b      	str	r3, [r7, #32]
   return(result);
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3308      	adds	r3, #8
 800d51a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d51e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d526:	e841 2300 	strex	r3, r2, [r1]
 800d52a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1e3      	bne.n	800d4fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a16      	ldr	r2, [pc, #88]	@ (800d590 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d536:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	e853 3f00 	ldrex	r3, [r3]
 800d544:	60fb      	str	r3, [r7, #12]
   return(result);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f043 0320 	orr.w	r3, r3, #32
 800d54c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	461a      	mov	r2, r3
 800d556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d55a:	61fb      	str	r3, [r7, #28]
 800d55c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55e:	69b9      	ldr	r1, [r7, #24]
 800d560:	69fa      	ldr	r2, [r7, #28]
 800d562:	e841 2300 	strex	r3, r2, [r1]
 800d566:	617b      	str	r3, [r7, #20]
   return(result);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e4      	bne.n	800d538 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d56e:	e007      	b.n	800d580 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699a      	ldr	r2, [r3, #24]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f042 0208 	orr.w	r2, r2, #8
 800d57e:	619a      	str	r2, [r3, #24]
}
 800d580:	bf00      	nop
 800d582:	37b8      	adds	r7, #184	@ 0xb8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	effffffe 	.word	0xeffffffe
 800d58c:	58000c00 	.word	0x58000c00
 800d590:	0800cd15 	.word	0x0800cd15

0800d594 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5c4:	bf00      	nop
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d101      	bne.n	800d5e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	e027      	b.n	800d636 <HAL_UARTEx_DisableFifoMode+0x66>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2224      	movs	r2, #36	@ 0x24
 800d5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f022 0201 	bic.w	r2, r2, #1
 800d60c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d614:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2220      	movs	r2, #32
 800d628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b084      	sub	sp, #16
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d652:	2b01      	cmp	r3, #1
 800d654:	d101      	bne.n	800d65a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d656:	2302      	movs	r3, #2
 800d658:	e02d      	b.n	800d6b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2224      	movs	r2, #36	@ 0x24
 800d666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f022 0201 	bic.w	r2, r2, #1
 800d680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f850 	bl	800d73c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2220      	movs	r2, #32
 800d6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e02d      	b.n	800d732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2224      	movs	r2, #36	@ 0x24
 800d6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f022 0201 	bic.w	r2, r2, #1
 800d6fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f812 	bl	800d73c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2220      	movs	r2, #32
 800d724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d108      	bne.n	800d75e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d75c:	e031      	b.n	800d7c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d75e:	2310      	movs	r3, #16
 800d760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d762:	2310      	movs	r3, #16
 800d764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	0e5b      	lsrs	r3, r3, #25
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	f003 0307 	and.w	r3, r3, #7
 800d774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	0f5b      	lsrs	r3, r3, #29
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 0307 	and.w	r3, r3, #7
 800d784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d786:	7bbb      	ldrb	r3, [r7, #14]
 800d788:	7b3a      	ldrb	r2, [r7, #12]
 800d78a:	4911      	ldr	r1, [pc, #68]	@ (800d7d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d78c:	5c8a      	ldrb	r2, [r1, r2]
 800d78e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d792:	7b3a      	ldrb	r2, [r7, #12]
 800d794:	490f      	ldr	r1, [pc, #60]	@ (800d7d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d798:	fb93 f3f2 	sdiv	r3, r3, r2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	7b7a      	ldrb	r2, [r7, #13]
 800d7a8:	4909      	ldr	r1, [pc, #36]	@ (800d7d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d7aa:	5c8a      	ldrb	r2, [r1, r2]
 800d7ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7b0:	7b7a      	ldrb	r2, [r7, #13]
 800d7b2:	4908      	ldr	r1, [pc, #32]	@ (800d7d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d7b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d7c2:	bf00      	nop
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	08016f24 	.word	0x08016f24
 800d7d4:	08016f2c 	.word	0x08016f2c

0800d7d8 <__NVIC_SetPriority>:
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	6039      	str	r1, [r7, #0]
 800d7e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d7e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	db0a      	blt.n	800d802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	490c      	ldr	r1, [pc, #48]	@ (800d824 <__NVIC_SetPriority+0x4c>)
 800d7f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7f6:	0112      	lsls	r2, r2, #4
 800d7f8:	b2d2      	uxtb	r2, r2
 800d7fa:	440b      	add	r3, r1
 800d7fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d800:	e00a      	b.n	800d818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	b2da      	uxtb	r2, r3
 800d806:	4908      	ldr	r1, [pc, #32]	@ (800d828 <__NVIC_SetPriority+0x50>)
 800d808:	88fb      	ldrh	r3, [r7, #6]
 800d80a:	f003 030f 	and.w	r3, r3, #15
 800d80e:	3b04      	subs	r3, #4
 800d810:	0112      	lsls	r2, r2, #4
 800d812:	b2d2      	uxtb	r2, r2
 800d814:	440b      	add	r3, r1
 800d816:	761a      	strb	r2, [r3, #24]
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	e000e100 	.word	0xe000e100
 800d828:	e000ed00 	.word	0xe000ed00

0800d82c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d830:	4b05      	ldr	r3, [pc, #20]	@ (800d848 <SysTick_Handler+0x1c>)
 800d832:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d834:	f002 fc70 	bl	8010118 <xTaskGetSchedulerState>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d001      	beq.n	800d842 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d83e:	f000 ff6b 	bl	800e718 <xPortSysTickHandler>
  }
}
 800d842:	bf00      	nop
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	e000e010 	.word	0xe000e010

0800d84c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d850:	2100      	movs	r1, #0
 800d852:	f06f 0004 	mvn.w	r0, #4
 800d856:	f7ff ffbf 	bl	800d7d8 <__NVIC_SetPriority>
#endif
}
 800d85a:	bf00      	nop
 800d85c:	bd80      	pop	{r7, pc}
	...

0800d860 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d866:	f3ef 8305 	mrs	r3, IPSR
 800d86a:	603b      	str	r3, [r7, #0]
  return(result);
 800d86c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d872:	f06f 0305 	mvn.w	r3, #5
 800d876:	607b      	str	r3, [r7, #4]
 800d878:	e00c      	b.n	800d894 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d87a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a4 <osKernelInitialize+0x44>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d882:	4b08      	ldr	r3, [pc, #32]	@ (800d8a4 <osKernelInitialize+0x44>)
 800d884:	2201      	movs	r2, #1
 800d886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d888:	2300      	movs	r3, #0
 800d88a:	607b      	str	r3, [r7, #4]
 800d88c:	e002      	b.n	800d894 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d88e:	f04f 33ff 	mov.w	r3, #4294967295
 800d892:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d894:	687b      	ldr	r3, [r7, #4]
}
 800d896:	4618      	mov	r0, r3
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	24000724 	.word	0x24000724

0800d8a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ae:	f3ef 8305 	mrs	r3, IPSR
 800d8b2:	603b      	str	r3, [r7, #0]
  return(result);
 800d8b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d8ba:	f06f 0305 	mvn.w	r3, #5
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	e010      	b.n	800d8e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f0 <osKernelStart+0x48>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d109      	bne.n	800d8de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d8ca:	f7ff ffbf 	bl	800d84c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d8ce:	4b08      	ldr	r3, [pc, #32]	@ (800d8f0 <osKernelStart+0x48>)
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d8d4:	f001 ffaa 	bl	800f82c <vTaskStartScheduler>
      stat = osOK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	607b      	str	r3, [r7, #4]
 800d8dc:	e002      	b.n	800d8e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8e4:	687b      	ldr	r3, [r7, #4]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	24000724 	.word	0x24000724

0800d8f4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8fa:	f3ef 8305 	mrs	r3, IPSR
 800d8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800d900:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d906:	f002 f8bd 	bl	800fa84 <xTaskGetTickCountFromISR>
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	e002      	b.n	800d914 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d90e:	f002 f8a9 	bl	800fa64 <xTaskGetTickCount>
 800d912:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d914:	687b      	ldr	r3, [r7, #4]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d91e:	b580      	push	{r7, lr}
 800d920:	b08e      	sub	sp, #56	@ 0x38
 800d922:	af04      	add	r7, sp, #16
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d92e:	f3ef 8305 	mrs	r3, IPSR
 800d932:	617b      	str	r3, [r7, #20]
  return(result);
 800d934:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d936:	2b00      	cmp	r3, #0
 800d938:	d17e      	bne.n	800da38 <osThreadNew+0x11a>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d07b      	beq.n	800da38 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d940:	2380      	movs	r3, #128	@ 0x80
 800d942:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d944:	2318      	movs	r3, #24
 800d946:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d045      	beq.n	800d9e4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <osThreadNew+0x48>
        name = attr->name;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d008      	beq.n	800d98c <osThreadNew+0x6e>
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b38      	cmp	r3, #56	@ 0x38
 800d97e:	d805      	bhi.n	800d98c <osThreadNew+0x6e>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	f003 0301 	and.w	r3, r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <osThreadNew+0x72>
        return (NULL);
 800d98c:	2300      	movs	r3, #0
 800d98e:	e054      	b.n	800da3a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	089b      	lsrs	r3, r3, #2
 800d99e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00e      	beq.n	800d9c6 <osThreadNew+0xa8>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2ba7      	cmp	r3, #167	@ 0xa7
 800d9ae:	d90a      	bls.n	800d9c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d006      	beq.n	800d9c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d002      	beq.n	800d9c6 <osThreadNew+0xa8>
        mem = 1;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	61bb      	str	r3, [r7, #24]
 800d9c4:	e010      	b.n	800d9e8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10c      	bne.n	800d9e8 <osThreadNew+0xca>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d108      	bne.n	800d9e8 <osThreadNew+0xca>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d104      	bne.n	800d9e8 <osThreadNew+0xca>
          mem = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	61bb      	str	r3, [r7, #24]
 800d9e2:	e001      	b.n	800d9e8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d110      	bne.n	800da10 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d9f6:	9202      	str	r2, [sp, #8]
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	6a3a      	ldr	r2, [r7, #32]
 800da02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f001 fd1d 	bl	800f444 <xTaskCreateStatic>
 800da0a:	4603      	mov	r3, r0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	e013      	b.n	800da38 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d110      	bne.n	800da38 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	b29a      	uxth	r2, r3
 800da1a:	f107 0310 	add.w	r3, r7, #16
 800da1e:	9301      	str	r3, [sp, #4]
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 fd6b 	bl	800f504 <xTaskCreate>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b01      	cmp	r3, #1
 800da32:	d001      	beq.n	800da38 <osThreadNew+0x11a>
            hTask = NULL;
 800da34:	2300      	movs	r3, #0
 800da36:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da38:	693b      	ldr	r3, [r7, #16]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3728      	adds	r7, #40	@ 0x28
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da4a:	f3ef 8305 	mrs	r3, IPSR
 800da4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da52:	2b00      	cmp	r3, #0
 800da54:	d003      	beq.n	800da5e <osDelay+0x1c>
    stat = osErrorISR;
 800da56:	f06f 0305 	mvn.w	r3, #5
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e007      	b.n	800da6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da5e:	2300      	movs	r3, #0
 800da60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <osDelay+0x2c>
      vTaskDelay(ticks);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 fea9 	bl	800f7c0 <vTaskDelay>
    }
  }

  return (stat);
 800da6e:	68fb      	ldr	r3, [r7, #12]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800da80:	2300      	movs	r3, #0
 800da82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da84:	f3ef 8305 	mrs	r3, IPSR
 800da88:	60bb      	str	r3, [r7, #8]
  return(result);
 800da8a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d174      	bne.n	800db7a <osMutexNew+0x102>
    if (attr != NULL) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <osMutexNew+0x26>
      type = attr->attr_bits;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	61bb      	str	r3, [r7, #24]
 800da9c:	e001      	b.n	800daa2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <osMutexNew+0x3a>
      rmtx = 1U;
 800daac:	2301      	movs	r3, #1
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	e001      	b.n	800dab6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	f003 0308 	and.w	r3, r3, #8
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d15c      	bne.n	800db7a <osMutexNew+0x102>
      mem = -1;
 800dac0:	f04f 33ff 	mov.w	r3, #4294967295
 800dac4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d015      	beq.n	800daf8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <osMutexNew+0x6a>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	2b4f      	cmp	r3, #79	@ 0x4f
 800dada:	d902      	bls.n	800dae2 <osMutexNew+0x6a>
          mem = 1;
 800dadc:	2301      	movs	r3, #1
 800dade:	613b      	str	r3, [r7, #16]
 800dae0:	e00c      	b.n	800dafc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d108      	bne.n	800dafc <osMutexNew+0x84>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d104      	bne.n	800dafc <osMutexNew+0x84>
            mem = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	613b      	str	r3, [r7, #16]
 800daf6:	e001      	b.n	800dafc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800daf8:	2300      	movs	r3, #0
 800dafa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d112      	bne.n	800db28 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d007      	beq.n	800db18 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	4619      	mov	r1, r3
 800db0e:	2004      	movs	r0, #4
 800db10:	f001 f80b 	bl	800eb2a <xQueueCreateMutexStatic>
 800db14:	61f8      	str	r0, [r7, #28]
 800db16:	e016      	b.n	800db46 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	4619      	mov	r1, r3
 800db1e:	2001      	movs	r0, #1
 800db20:	f001 f803 	bl	800eb2a <xQueueCreateMutexStatic>
 800db24:	61f8      	str	r0, [r7, #28]
 800db26:	e00e      	b.n	800db46 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10b      	bne.n	800db46 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d004      	beq.n	800db3e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800db34:	2004      	movs	r0, #4
 800db36:	f000 ffe0 	bl	800eafa <xQueueCreateMutex>
 800db3a:	61f8      	str	r0, [r7, #28]
 800db3c:	e003      	b.n	800db46 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800db3e:	2001      	movs	r0, #1
 800db40:	f000 ffdb 	bl	800eafa <xQueueCreateMutex>
 800db44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00c      	beq.n	800db66 <osMutexNew+0xee>
        if (attr != NULL) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <osMutexNew+0xe2>
          name = attr->name;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	e001      	b.n	800db5e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800db5e:	68f9      	ldr	r1, [r7, #12]
 800db60:	69f8      	ldr	r0, [r7, #28]
 800db62:	f001 fc11 	bl	800f388 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d006      	beq.n	800db7a <osMutexNew+0x102>
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	f043 0301 	orr.w	r3, r3, #1
 800db78:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800db7a:	69fb      	ldr	r3, [r7, #28]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3720      	adds	r7, #32
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db84:	b580      	push	{r7, lr}
 800db86:	b08a      	sub	sp, #40	@ 0x28
 800db88:	af02      	add	r7, sp, #8
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800db90:	2300      	movs	r3, #0
 800db92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db94:	f3ef 8305 	mrs	r3, IPSR
 800db98:	613b      	str	r3, [r7, #16]
  return(result);
 800db9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d15f      	bne.n	800dc60 <osMessageQueueNew+0xdc>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d05c      	beq.n	800dc60 <osMessageQueueNew+0xdc>
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d059      	beq.n	800dc60 <osMessageQueueNew+0xdc>
    mem = -1;
 800dbac:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d029      	beq.n	800dc0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d012      	beq.n	800dbe6 <osMessageQueueNew+0x62>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	2b4f      	cmp	r3, #79	@ 0x4f
 800dbc6:	d90e      	bls.n	800dbe6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	695a      	ldr	r2, [r3, #20]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	68b9      	ldr	r1, [r7, #8]
 800dbd8:	fb01 f303 	mul.w	r3, r1, r3
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d302      	bcc.n	800dbe6 <osMessageQueueNew+0x62>
        mem = 1;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	e014      	b.n	800dc10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d110      	bne.n	800dc10 <osMessageQueueNew+0x8c>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10c      	bne.n	800dc10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d108      	bne.n	800dc10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	695b      	ldr	r3, [r3, #20]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d104      	bne.n	800dc10 <osMessageQueueNew+0x8c>
          mem = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	61bb      	str	r3, [r7, #24]
 800dc0a:	e001      	b.n	800dc10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d10b      	bne.n	800dc2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	691a      	ldr	r2, [r3, #16]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	2100      	movs	r1, #0
 800dc20:	9100      	str	r1, [sp, #0]
 800dc22:	68b9      	ldr	r1, [r7, #8]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 fe73 	bl	800e910 <xQueueGenericCreateStatic>
 800dc2a:	61f8      	str	r0, [r7, #28]
 800dc2c:	e008      	b.n	800dc40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d105      	bne.n	800dc40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dc34:	2200      	movs	r2, #0
 800dc36:	68b9      	ldr	r1, [r7, #8]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fee6 	bl	800ea0a <xQueueGenericCreate>
 800dc3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00c      	beq.n	800dc60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e001      	b.n	800dc58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dc58:	6979      	ldr	r1, [r7, #20]
 800dc5a:	69f8      	ldr	r0, [r7, #28]
 800dc5c:	f001 fb94 	bl	800f388 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dc60:	69fb      	ldr	r3, [r7, #28]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
	...

0800dc6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc84:	f3ef 8305 	mrs	r3, IPSR
 800dc88:	617b      	str	r3, [r7, #20]
  return(result);
 800dc8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d028      	beq.n	800dce2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d005      	beq.n	800dca2 <osMessageQueuePut+0x36>
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <osMessageQueuePut+0x36>
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dca2:	f06f 0303 	mvn.w	r3, #3
 800dca6:	61fb      	str	r3, [r7, #28]
 800dca8:	e038      	b.n	800dd1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dcae:	f107 0210 	add.w	r2, r7, #16
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	68b9      	ldr	r1, [r7, #8]
 800dcb6:	69b8      	ldr	r0, [r7, #24]
 800dcb8:	f001 f854 	bl	800ed64 <xQueueGenericSendFromISR>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d003      	beq.n	800dcca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dcc2:	f06f 0302 	mvn.w	r3, #2
 800dcc6:	61fb      	str	r3, [r7, #28]
 800dcc8:	e028      	b.n	800dd1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d025      	beq.n	800dd1c <osMessageQueuePut+0xb0>
 800dcd0:	4b15      	ldr	r3, [pc, #84]	@ (800dd28 <osMessageQueuePut+0xbc>)
 800dcd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcd6:	601a      	str	r2, [r3, #0]
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	e01c      	b.n	800dd1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <osMessageQueuePut+0x82>
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d103      	bne.n	800dcf6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dcee:	f06f 0303 	mvn.w	r3, #3
 800dcf2:	61fb      	str	r3, [r7, #28]
 800dcf4:	e012      	b.n	800dd1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	69b8      	ldr	r0, [r7, #24]
 800dcfe:	f000 ff2f 	bl	800eb60 <xQueueGenericSend>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d009      	beq.n	800dd1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d003      	beq.n	800dd16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd0e:	f06f 0301 	mvn.w	r3, #1
 800dd12:	61fb      	str	r3, [r7, #28]
 800dd14:	e002      	b.n	800dd1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd16:	f06f 0302 	mvn.w	r3, #2
 800dd1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd1c:	69fb      	ldr	r3, [r7, #28]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3720      	adds	r7, #32
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	e000ed04 	.word	0xe000ed04

0800dd2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b088      	sub	sp, #32
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
 800dd38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd42:	f3ef 8305 	mrs	r3, IPSR
 800dd46:	617b      	str	r3, [r7, #20]
  return(result);
 800dd48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d028      	beq.n	800dda0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d005      	beq.n	800dd60 <osMessageQueueGet+0x34>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <osMessageQueueGet+0x34>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d003      	beq.n	800dd68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dd60:	f06f 0303 	mvn.w	r3, #3
 800dd64:	61fb      	str	r3, [r7, #28]
 800dd66:	e037      	b.n	800ddd8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dd6c:	f107 0310 	add.w	r3, r7, #16
 800dd70:	461a      	mov	r2, r3
 800dd72:	68b9      	ldr	r1, [r7, #8]
 800dd74:	69b8      	ldr	r0, [r7, #24]
 800dd76:	f001 f975 	bl	800f064 <xQueueReceiveFromISR>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d003      	beq.n	800dd88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dd80:	f06f 0302 	mvn.w	r3, #2
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	e027      	b.n	800ddd8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d024      	beq.n	800ddd8 <osMessageQueueGet+0xac>
 800dd8e:	4b15      	ldr	r3, [pc, #84]	@ (800dde4 <osMessageQueueGet+0xb8>)
 800dd90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	e01b      	b.n	800ddd8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <osMessageQueueGet+0x80>
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d103      	bne.n	800ddb4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ddac:	f06f 0303 	mvn.w	r3, #3
 800ddb0:	61fb      	str	r3, [r7, #28]
 800ddb2:	e011      	b.n	800ddd8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	69b8      	ldr	r0, [r7, #24]
 800ddba:	f001 f871 	bl	800eea0 <xQueueReceive>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d009      	beq.n	800ddd8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ddca:	f06f 0301 	mvn.w	r3, #1
 800ddce:	61fb      	str	r3, [r7, #28]
 800ddd0:	e002      	b.n	800ddd8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ddd2:	f06f 0302 	mvn.w	r3, #2
 800ddd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ddd8:	69fb      	ldr	r3, [r7, #28]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	e000ed04 	.word	0xe000ed04

0800dde8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	4a07      	ldr	r2, [pc, #28]	@ (800de14 <vApplicationGetIdleTaskMemory+0x2c>)
 800ddf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	4a06      	ldr	r2, [pc, #24]	@ (800de18 <vApplicationGetIdleTaskMemory+0x30>)
 800ddfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2280      	movs	r2, #128	@ 0x80
 800de04:	601a      	str	r2, [r3, #0]
}
 800de06:	bf00      	nop
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	24000728 	.word	0x24000728
 800de18:	240007d0 	.word	0x240007d0

0800de1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	4a07      	ldr	r2, [pc, #28]	@ (800de48 <vApplicationGetTimerTaskMemory+0x2c>)
 800de2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	4a06      	ldr	r2, [pc, #24]	@ (800de4c <vApplicationGetTimerTaskMemory+0x30>)
 800de32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800de3a:	601a      	str	r2, [r3, #0]
}
 800de3c:	bf00      	nop
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	240009d0 	.word	0x240009d0
 800de4c:	24000a78 	.word	0x24000a78

0800de50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b08a      	sub	sp, #40	@ 0x28
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de58:	2300      	movs	r3, #0
 800de5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de5c:	f001 fd56 	bl	800f90c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de60:	4b5c      	ldr	r3, [pc, #368]	@ (800dfd4 <pvPortMalloc+0x184>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de68:	f000 f924 	bl	800e0b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de6c:	4b5a      	ldr	r3, [pc, #360]	@ (800dfd8 <pvPortMalloc+0x188>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4013      	ands	r3, r2
 800de74:	2b00      	cmp	r3, #0
 800de76:	f040 8095 	bne.w	800dfa4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01e      	beq.n	800debe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800de80:	2208      	movs	r2, #8
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4413      	add	r3, r2
 800de86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f003 0307 	and.w	r3, r3, #7
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d015      	beq.n	800debe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f023 0307 	bic.w	r3, r3, #7
 800de98:	3308      	adds	r3, #8
 800de9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00b      	beq.n	800debe <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deaa:	f383 8811 	msr	BASEPRI, r3
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	e7fd      	b.n	800deba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d06f      	beq.n	800dfa4 <pvPortMalloc+0x154>
 800dec4:	4b45      	ldr	r3, [pc, #276]	@ (800dfdc <pvPortMalloc+0x18c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	429a      	cmp	r2, r3
 800decc:	d86a      	bhi.n	800dfa4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dece:	4b44      	ldr	r3, [pc, #272]	@ (800dfe0 <pvPortMalloc+0x190>)
 800ded0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ded2:	4b43      	ldr	r3, [pc, #268]	@ (800dfe0 <pvPortMalloc+0x190>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ded8:	e004      	b.n	800dee4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dedc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	429a      	cmp	r2, r3
 800deec:	d903      	bls.n	800def6 <pvPortMalloc+0xa6>
 800deee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1f1      	bne.n	800deda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800def6:	4b37      	ldr	r3, [pc, #220]	@ (800dfd4 <pvPortMalloc+0x184>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800defc:	429a      	cmp	r2, r3
 800defe:	d051      	beq.n	800dfa4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2208      	movs	r2, #8
 800df06:	4413      	add	r3, r2
 800df08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	6a3b      	ldr	r3, [r7, #32]
 800df10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	1ad2      	subs	r2, r2, r3
 800df1a:	2308      	movs	r3, #8
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	429a      	cmp	r2, r3
 800df20:	d920      	bls.n	800df64 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4413      	add	r3, r2
 800df28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	f003 0307 	and.w	r3, r3, #7
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <pvPortMalloc+0xfc>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	613b      	str	r3, [r7, #16]
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	e7fd      	b.n	800df48 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	1ad2      	subs	r2, r2, r3
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df5e:	69b8      	ldr	r0, [r7, #24]
 800df60:	f000 f90a 	bl	800e178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df64:	4b1d      	ldr	r3, [pc, #116]	@ (800dfdc <pvPortMalloc+0x18c>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	4a1b      	ldr	r2, [pc, #108]	@ (800dfdc <pvPortMalloc+0x18c>)
 800df70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df72:	4b1a      	ldr	r3, [pc, #104]	@ (800dfdc <pvPortMalloc+0x18c>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	4b1b      	ldr	r3, [pc, #108]	@ (800dfe4 <pvPortMalloc+0x194>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d203      	bcs.n	800df86 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df7e:	4b17      	ldr	r3, [pc, #92]	@ (800dfdc <pvPortMalloc+0x18c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a18      	ldr	r2, [pc, #96]	@ (800dfe4 <pvPortMalloc+0x194>)
 800df84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	4b13      	ldr	r3, [pc, #76]	@ (800dfd8 <pvPortMalloc+0x188>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	431a      	orrs	r2, r3
 800df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df9a:	4b13      	ldr	r3, [pc, #76]	@ (800dfe8 <pvPortMalloc+0x198>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	4a11      	ldr	r2, [pc, #68]	@ (800dfe8 <pvPortMalloc+0x198>)
 800dfa2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfa4:	f001 fcc0 	bl	800f928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f003 0307 	and.w	r3, r3, #7
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00b      	beq.n	800dfca <pvPortMalloc+0x17a>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	60fb      	str	r3, [r7, #12]
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop
 800dfc8:	e7fd      	b.n	800dfc6 <pvPortMalloc+0x176>
	return pvReturn;
 800dfca:	69fb      	ldr	r3, [r7, #28]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3728      	adds	r7, #40	@ 0x28
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	24004a80 	.word	0x24004a80
 800dfd8:	24004a94 	.word	0x24004a94
 800dfdc:	24004a84 	.word	0x24004a84
 800dfe0:	24004a78 	.word	0x24004a78
 800dfe4:	24004a88 	.word	0x24004a88
 800dfe8:	24004a8c 	.word	0x24004a8c

0800dfec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d04f      	beq.n	800e09e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dffe:	2308      	movs	r3, #8
 800e000:	425b      	negs	r3, r3
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4413      	add	r3, r2
 800e006:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	4b25      	ldr	r3, [pc, #148]	@ (800e0a8 <vPortFree+0xbc>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4013      	ands	r3, r2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10b      	bne.n	800e032 <vPortFree+0x46>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	60fb      	str	r3, [r7, #12]
}
 800e02c:	bf00      	nop
 800e02e:	bf00      	nop
 800e030:	e7fd      	b.n	800e02e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00b      	beq.n	800e052 <vPortFree+0x66>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	60bb      	str	r3, [r7, #8]
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	e7fd      	b.n	800e04e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	4b14      	ldr	r3, [pc, #80]	@ (800e0a8 <vPortFree+0xbc>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4013      	ands	r3, r2
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d01e      	beq.n	800e09e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d11a      	bne.n	800e09e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	685a      	ldr	r2, [r3, #4]
 800e06c:	4b0e      	ldr	r3, [pc, #56]	@ (800e0a8 <vPortFree+0xbc>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	43db      	mvns	r3, r3
 800e072:	401a      	ands	r2, r3
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e078:	f001 fc48 	bl	800f90c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	4b0a      	ldr	r3, [pc, #40]	@ (800e0ac <vPortFree+0xc0>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4413      	add	r3, r2
 800e086:	4a09      	ldr	r2, [pc, #36]	@ (800e0ac <vPortFree+0xc0>)
 800e088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e08a:	6938      	ldr	r0, [r7, #16]
 800e08c:	f000 f874 	bl	800e178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e090:	4b07      	ldr	r3, [pc, #28]	@ (800e0b0 <vPortFree+0xc4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3301      	adds	r3, #1
 800e096:	4a06      	ldr	r2, [pc, #24]	@ (800e0b0 <vPortFree+0xc4>)
 800e098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e09a:	f001 fc45 	bl	800f928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e09e:	bf00      	nop
 800e0a0:	3718      	adds	r7, #24
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	24004a94 	.word	0x24004a94
 800e0ac:	24004a84 	.word	0x24004a84
 800e0b0:	24004a90 	.word	0x24004a90

0800e0b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e0be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0c0:	4b27      	ldr	r3, [pc, #156]	@ (800e160 <prvHeapInit+0xac>)
 800e0c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00c      	beq.n	800e0e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f023 0307 	bic.w	r3, r3, #7
 800e0da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e160 <prvHeapInit+0xac>)
 800e0e4:	4413      	add	r3, r2
 800e0e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800e164 <prvHeapInit+0xb0>)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800e164 <prvHeapInit+0xb0>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e100:	2208      	movs	r2, #8
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	1a9b      	subs	r3, r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f023 0307 	bic.w	r3, r3, #7
 800e10e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4a15      	ldr	r2, [pc, #84]	@ (800e168 <prvHeapInit+0xb4>)
 800e114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e116:	4b14      	ldr	r3, [pc, #80]	@ (800e168 <prvHeapInit+0xb4>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2200      	movs	r2, #0
 800e11c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e11e:	4b12      	ldr	r3, [pc, #72]	@ (800e168 <prvHeapInit+0xb4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e134:	4b0c      	ldr	r3, [pc, #48]	@ (800e168 <prvHeapInit+0xb4>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4a0a      	ldr	r2, [pc, #40]	@ (800e16c <prvHeapInit+0xb8>)
 800e142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4a09      	ldr	r2, [pc, #36]	@ (800e170 <prvHeapInit+0xbc>)
 800e14a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e14c:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <prvHeapInit+0xc0>)
 800e14e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e152:	601a      	str	r2, [r3, #0]
}
 800e154:	bf00      	nop
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	24000e78 	.word	0x24000e78
 800e164:	24004a78 	.word	0x24004a78
 800e168:	24004a80 	.word	0x24004a80
 800e16c:	24004a88 	.word	0x24004a88
 800e170:	24004a84 	.word	0x24004a84
 800e174:	24004a94 	.word	0x24004a94

0800e178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e180:	4b28      	ldr	r3, [pc, #160]	@ (800e224 <prvInsertBlockIntoFreeList+0xac>)
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e002      	b.n	800e18c <prvInsertBlockIntoFreeList+0x14>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	429a      	cmp	r2, r3
 800e194:	d8f7      	bhi.n	800e186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d108      	bne.n	800e1ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	441a      	add	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	441a      	add	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d118      	bne.n	800e200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	4b15      	ldr	r3, [pc, #84]	@ (800e228 <prvInsertBlockIntoFreeList+0xb0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d00d      	beq.n	800e1f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	441a      	add	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	e008      	b.n	800e208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e228 <prvInsertBlockIntoFreeList+0xb0>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	e003      	b.n	800e208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d002      	beq.n	800e216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e216:	bf00      	nop
 800e218:	3714      	adds	r7, #20
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	24004a78 	.word	0x24004a78
 800e228:	24004a80 	.word	0x24004a80

0800e22c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f103 0208 	add.w	r2, r3, #8
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f04f 32ff 	mov.w	r2, #4294967295
 800e244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f103 0208 	add.w	r2, r3, #8
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f103 0208 	add.w	r2, r3, #8
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e27a:	bf00      	nop
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e286:	b480      	push	{r7}
 800e288:	b085      	sub	sp, #20
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	689a      	ldr	r2, [r3, #8]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	601a      	str	r2, [r3, #0]
}
 800e2c2:	bf00      	nop
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e4:	d103      	bne.n	800e2ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	e00c      	b.n	800e308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	e002      	b.n	800e2fc <vListInsert+0x2e>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	429a      	cmp	r2, r3
 800e306:	d2f6      	bcs.n	800e2f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1c5a      	adds	r2, r3, #1
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	601a      	str	r2, [r3, #0]
}
 800e334:	bf00      	nop
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	6892      	ldr	r2, [r2, #8]
 800e356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	6852      	ldr	r2, [r2, #4]
 800e360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d103      	bne.n	800e374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	1e5a      	subs	r2, r3, #1
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3b04      	subs	r3, #4
 800e3a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e3ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3b04      	subs	r3, #4
 800e3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	f023 0201 	bic.w	r2, r3, #1
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3b04      	subs	r3, #4
 800e3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e3f8 <pxPortInitialiseStack+0x64>)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3b14      	subs	r3, #20
 800e3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3b04      	subs	r3, #4
 800e3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f06f 0202 	mvn.w	r2, #2
 800e3e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3b20      	subs	r3, #32
 800e3e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	0800e3fd 	.word	0x0800e3fd

0800e3fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e402:	2300      	movs	r3, #0
 800e404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e406:	4b13      	ldr	r3, [pc, #76]	@ (800e454 <prvTaskExitError+0x58>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d00b      	beq.n	800e428 <prvTaskExitError+0x2c>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	60fb      	str	r3, [r7, #12]
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	e7fd      	b.n	800e424 <prvTaskExitError+0x28>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	60bb      	str	r3, [r7, #8]
}
 800e43a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e43c:	bf00      	nop
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d0fc      	beq.n	800e43e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop
 800e448:	3714      	adds	r7, #20
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	2400001c 	.word	0x2400001c
	...

0800e460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e460:	4b07      	ldr	r3, [pc, #28]	@ (800e480 <pxCurrentTCBConst2>)
 800e462:	6819      	ldr	r1, [r3, #0]
 800e464:	6808      	ldr	r0, [r1, #0]
 800e466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	f380 8809 	msr	PSP, r0
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	f380 8811 	msr	BASEPRI, r0
 800e47a:	4770      	bx	lr
 800e47c:	f3af 8000 	nop.w

0800e480 <pxCurrentTCBConst2>:
 800e480:	24004ae0 	.word	0x24004ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop

0800e488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e488:	4808      	ldr	r0, [pc, #32]	@ (800e4ac <prvPortStartFirstTask+0x24>)
 800e48a:	6800      	ldr	r0, [r0, #0]
 800e48c:	6800      	ldr	r0, [r0, #0]
 800e48e:	f380 8808 	msr	MSP, r0
 800e492:	f04f 0000 	mov.w	r0, #0
 800e496:	f380 8814 	msr	CONTROL, r0
 800e49a:	b662      	cpsie	i
 800e49c:	b661      	cpsie	f
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	df00      	svc	0
 800e4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4aa:	bf00      	nop
 800e4ac:	e000ed08 	.word	0xe000ed08

0800e4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4b6:	4b47      	ldr	r3, [pc, #284]	@ (800e5d4 <xPortStartScheduler+0x124>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a47      	ldr	r2, [pc, #284]	@ (800e5d8 <xPortStartScheduler+0x128>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d10b      	bne.n	800e4d8 <xPortStartScheduler+0x28>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	613b      	str	r3, [r7, #16]
}
 800e4d2:	bf00      	nop
 800e4d4:	bf00      	nop
 800e4d6:	e7fd      	b.n	800e4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e5d4 <xPortStartScheduler+0x124>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800e5dc <xPortStartScheduler+0x12c>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d10b      	bne.n	800e4fa <xPortStartScheduler+0x4a>
	__asm volatile
 800e4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e6:	f383 8811 	msr	BASEPRI, r3
 800e4ea:	f3bf 8f6f 	isb	sy
 800e4ee:	f3bf 8f4f 	dsb	sy
 800e4f2:	60fb      	str	r3, [r7, #12]
}
 800e4f4:	bf00      	nop
 800e4f6:	bf00      	nop
 800e4f8:	e7fd      	b.n	800e4f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4fa:	4b39      	ldr	r3, [pc, #228]	@ (800e5e0 <xPortStartScheduler+0x130>)
 800e4fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	22ff      	movs	r2, #255	@ 0xff
 800e50a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	b2db      	uxtb	r3, r3
 800e512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	b2db      	uxtb	r3, r3
 800e518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	4b31      	ldr	r3, [pc, #196]	@ (800e5e4 <xPortStartScheduler+0x134>)
 800e520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e522:	4b31      	ldr	r3, [pc, #196]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e524:	2207      	movs	r2, #7
 800e526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e528:	e009      	b.n	800e53e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e52a:	4b2f      	ldr	r3, [pc, #188]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3b01      	subs	r3, #1
 800e530:	4a2d      	ldr	r2, [pc, #180]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	005b      	lsls	r3, r3, #1
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e53e:	78fb      	ldrb	r3, [r7, #3]
 800e540:	b2db      	uxtb	r3, r3
 800e542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e546:	2b80      	cmp	r3, #128	@ 0x80
 800e548:	d0ef      	beq.n	800e52a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e54a:	4b27      	ldr	r3, [pc, #156]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f1c3 0307 	rsb	r3, r3, #7
 800e552:	2b04      	cmp	r3, #4
 800e554:	d00b      	beq.n	800e56e <xPortStartScheduler+0xbe>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60bb      	str	r3, [r7, #8]
}
 800e568:	bf00      	nop
 800e56a:	bf00      	nop
 800e56c:	e7fd      	b.n	800e56a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e56e:	4b1e      	ldr	r3, [pc, #120]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	021b      	lsls	r3, r3, #8
 800e574:	4a1c      	ldr	r2, [pc, #112]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e578:	4b1b      	ldr	r3, [pc, #108]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e580:	4a19      	ldr	r2, [pc, #100]	@ (800e5e8 <xPortStartScheduler+0x138>)
 800e582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	b2da      	uxtb	r2, r3
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e58c:	4b17      	ldr	r3, [pc, #92]	@ (800e5ec <xPortStartScheduler+0x13c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a16      	ldr	r2, [pc, #88]	@ (800e5ec <xPortStartScheduler+0x13c>)
 800e592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e598:	4b14      	ldr	r3, [pc, #80]	@ (800e5ec <xPortStartScheduler+0x13c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a13      	ldr	r2, [pc, #76]	@ (800e5ec <xPortStartScheduler+0x13c>)
 800e59e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e5a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5a4:	f000 f8da 	bl	800e75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5a8:	4b11      	ldr	r3, [pc, #68]	@ (800e5f0 <xPortStartScheduler+0x140>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5ae:	f000 f8f9 	bl	800e7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5b2:	4b10      	ldr	r3, [pc, #64]	@ (800e5f4 <xPortStartScheduler+0x144>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e5f4 <xPortStartScheduler+0x144>)
 800e5b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e5bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5be:	f7ff ff63 	bl	800e488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5c2:	f001 fb2b 	bl	800fc1c <vTaskSwitchContext>
	prvTaskExitError();
 800e5c6:	f7ff ff19 	bl	800e3fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	e000ed00 	.word	0xe000ed00
 800e5d8:	410fc271 	.word	0x410fc271
 800e5dc:	410fc270 	.word	0x410fc270
 800e5e0:	e000e400 	.word	0xe000e400
 800e5e4:	24004a98 	.word	0x24004a98
 800e5e8:	24004a9c 	.word	0x24004a9c
 800e5ec:	e000ed20 	.word	0xe000ed20
 800e5f0:	2400001c 	.word	0x2400001c
 800e5f4:	e000ef34 	.word	0xe000ef34

0800e5f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e612:	4b10      	ldr	r3, [pc, #64]	@ (800e654 <vPortEnterCritical+0x5c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3301      	adds	r3, #1
 800e618:	4a0e      	ldr	r2, [pc, #56]	@ (800e654 <vPortEnterCritical+0x5c>)
 800e61a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e61c:	4b0d      	ldr	r3, [pc, #52]	@ (800e654 <vPortEnterCritical+0x5c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d110      	bne.n	800e646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e624:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <vPortEnterCritical+0x60>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00b      	beq.n	800e646 <vPortEnterCritical+0x4e>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	603b      	str	r3, [r7, #0]
}
 800e640:	bf00      	nop
 800e642:	bf00      	nop
 800e644:	e7fd      	b.n	800e642 <vPortEnterCritical+0x4a>
	}
}
 800e646:	bf00      	nop
 800e648:	370c      	adds	r7, #12
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	2400001c 	.word	0x2400001c
 800e658:	e000ed04 	.word	0xe000ed04

0800e65c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e662:	4b12      	ldr	r3, [pc, #72]	@ (800e6ac <vPortExitCritical+0x50>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10b      	bne.n	800e682 <vPortExitCritical+0x26>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	607b      	str	r3, [r7, #4]
}
 800e67c:	bf00      	nop
 800e67e:	bf00      	nop
 800e680:	e7fd      	b.n	800e67e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e682:	4b0a      	ldr	r3, [pc, #40]	@ (800e6ac <vPortExitCritical+0x50>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3b01      	subs	r3, #1
 800e688:	4a08      	ldr	r2, [pc, #32]	@ (800e6ac <vPortExitCritical+0x50>)
 800e68a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e68c:	4b07      	ldr	r3, [pc, #28]	@ (800e6ac <vPortExitCritical+0x50>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d105      	bne.n	800e6a0 <vPortExitCritical+0x44>
 800e694:	2300      	movs	r3, #0
 800e696:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e69e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	2400001c 	.word	0x2400001c

0800e6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6b0:	f3ef 8009 	mrs	r0, PSP
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	4b15      	ldr	r3, [pc, #84]	@ (800e710 <pxCurrentTCBConst>)
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	f01e 0f10 	tst.w	lr, #16
 800e6c0:	bf08      	it	eq
 800e6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ca:	6010      	str	r0, [r2, #0]
 800e6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e6d4:	f380 8811 	msr	BASEPRI, r0
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f001 fa9c 	bl	800fc1c <vTaskSwitchContext>
 800e6e4:	f04f 0000 	mov.w	r0, #0
 800e6e8:	f380 8811 	msr	BASEPRI, r0
 800e6ec:	bc09      	pop	{r0, r3}
 800e6ee:	6819      	ldr	r1, [r3, #0]
 800e6f0:	6808      	ldr	r0, [r1, #0]
 800e6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f6:	f01e 0f10 	tst.w	lr, #16
 800e6fa:	bf08      	it	eq
 800e6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e700:	f380 8809 	msr	PSP, r0
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	f3af 8000 	nop.w

0800e710 <pxCurrentTCBConst>:
 800e710:	24004ae0 	.word	0x24004ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e714:	bf00      	nop
 800e716:	bf00      	nop

0800e718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
	__asm volatile
 800e71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	607b      	str	r3, [r7, #4]
}
 800e730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e732:	f001 f9b9 	bl	800faa8 <xTaskIncrementTick>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d003      	beq.n	800e744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e73c:	4b06      	ldr	r3, [pc, #24]	@ (800e758 <xPortSysTickHandler+0x40>)
 800e73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	2300      	movs	r3, #0
 800e746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	f383 8811 	msr	BASEPRI, r3
}
 800e74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	e000ed04 	.word	0xe000ed04

0800e75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e760:	4b0b      	ldr	r3, [pc, #44]	@ (800e790 <vPortSetupTimerInterrupt+0x34>)
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e766:	4b0b      	ldr	r3, [pc, #44]	@ (800e794 <vPortSetupTimerInterrupt+0x38>)
 800e768:	2200      	movs	r2, #0
 800e76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e76c:	4b0a      	ldr	r3, [pc, #40]	@ (800e798 <vPortSetupTimerInterrupt+0x3c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a0a      	ldr	r2, [pc, #40]	@ (800e79c <vPortSetupTimerInterrupt+0x40>)
 800e772:	fba2 2303 	umull	r2, r3, r2, r3
 800e776:	099b      	lsrs	r3, r3, #6
 800e778:	4a09      	ldr	r2, [pc, #36]	@ (800e7a0 <vPortSetupTimerInterrupt+0x44>)
 800e77a:	3b01      	subs	r3, #1
 800e77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e77e:	4b04      	ldr	r3, [pc, #16]	@ (800e790 <vPortSetupTimerInterrupt+0x34>)
 800e780:	2207      	movs	r2, #7
 800e782:	601a      	str	r2, [r3, #0]
}
 800e784:	bf00      	nop
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	e000e010 	.word	0xe000e010
 800e794:	e000e018 	.word	0xe000e018
 800e798:	24000000 	.word	0x24000000
 800e79c:	10624dd3 	.word	0x10624dd3
 800e7a0:	e000e014 	.word	0xe000e014

0800e7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e7b4 <vPortEnableVFP+0x10>
 800e7a8:	6801      	ldr	r1, [r0, #0]
 800e7aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e7ae:	6001      	str	r1, [r0, #0]
 800e7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7b2:	bf00      	nop
 800e7b4:	e000ed88 	.word	0xe000ed88

0800e7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7be:	f3ef 8305 	mrs	r3, IPSR
 800e7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b0f      	cmp	r3, #15
 800e7c8:	d915      	bls.n	800e7f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7ca:	4a18      	ldr	r2, [pc, #96]	@ (800e82c <vPortValidateInterruptPriority+0x74>)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7d4:	4b16      	ldr	r3, [pc, #88]	@ (800e830 <vPortValidateInterruptPriority+0x78>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	7afa      	ldrb	r2, [r7, #11]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d20b      	bcs.n	800e7f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
}
 800e7f0:	bf00      	nop
 800e7f2:	bf00      	nop
 800e7f4:	e7fd      	b.n	800e7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e834 <vPortValidateInterruptPriority+0x7c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e838 <vPortValidateInterruptPriority+0x80>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d90b      	bls.n	800e81e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	603b      	str	r3, [r7, #0]
}
 800e818:	bf00      	nop
 800e81a:	bf00      	nop
 800e81c:	e7fd      	b.n	800e81a <vPortValidateInterruptPriority+0x62>
	}
 800e81e:	bf00      	nop
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	e000e3f0 	.word	0xe000e3f0
 800e830:	24004a98 	.word	0x24004a98
 800e834:	e000ed0c 	.word	0xe000ed0c
 800e838:	24004a9c 	.word	0x24004a9c

0800e83c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10b      	bne.n	800e868 <xQueueGenericReset+0x2c>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	60bb      	str	r3, [r7, #8]
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	e7fd      	b.n	800e864 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e868:	f7ff fec6 	bl	800e5f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e878:	fb01 f303 	mul.w	r3, r1, r3
 800e87c:	441a      	add	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e898:	3b01      	subs	r3, #1
 800e89a:	68f9      	ldr	r1, [r7, #12]
 800e89c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e89e:	fb01 f303 	mul.w	r3, r1, r3
 800e8a2:	441a      	add	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	22ff      	movs	r2, #255	@ 0xff
 800e8ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	22ff      	movs	r2, #255	@ 0xff
 800e8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d114      	bne.n	800e8e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d01a      	beq.n	800e8fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3310      	adds	r3, #16
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f001 fa5e 	bl	800fd8c <xTaskRemoveFromEventList>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d012      	beq.n	800e8fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e90c <xQueueGenericReset+0xd0>)
 800e8d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	e009      	b.n	800e8fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	3310      	adds	r3, #16
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fc9d 	bl	800e22c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3324      	adds	r3, #36	@ 0x24
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fc98 	bl	800e22c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e8fc:	f7ff feae 	bl	800e65c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e900:	2301      	movs	r3, #1
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	e000ed04 	.word	0xe000ed04

0800e910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08e      	sub	sp, #56	@ 0x38
 800e914:	af02      	add	r7, sp, #8
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10b      	bne.n	800e93c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e936:	bf00      	nop
 800e938:	bf00      	nop
 800e93a:	e7fd      	b.n	800e938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10b      	bne.n	800e95a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e954:	bf00      	nop
 800e956:	bf00      	nop
 800e958:	e7fd      	b.n	800e956 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <xQueueGenericCreateStatic+0x56>
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <xQueueGenericCreateStatic+0x5a>
 800e966:	2301      	movs	r3, #1
 800e968:	e000      	b.n	800e96c <xQueueGenericCreateStatic+0x5c>
 800e96a:	2300      	movs	r3, #0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10b      	bne.n	800e988 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	623b      	str	r3, [r7, #32]
}
 800e982:	bf00      	nop
 800e984:	bf00      	nop
 800e986:	e7fd      	b.n	800e984 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <xQueueGenericCreateStatic+0x84>
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <xQueueGenericCreateStatic+0x88>
 800e994:	2301      	movs	r3, #1
 800e996:	e000      	b.n	800e99a <xQueueGenericCreateStatic+0x8a>
 800e998:	2300      	movs	r3, #0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10b      	bne.n	800e9b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	61fb      	str	r3, [r7, #28]
}
 800e9b0:	bf00      	nop
 800e9b2:	bf00      	nop
 800e9b4:	e7fd      	b.n	800e9b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9b6:	2350      	movs	r3, #80	@ 0x50
 800e9b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b50      	cmp	r3, #80	@ 0x50
 800e9be:	d00b      	beq.n	800e9d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	61bb      	str	r3, [r7, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	bf00      	nop
 800e9d6:	e7fd      	b.n	800e9d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e9d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00d      	beq.n	800ea00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	68b9      	ldr	r1, [r7, #8]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 f840 	bl	800ea80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3730      	adds	r7, #48	@ 0x30
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b08a      	sub	sp, #40	@ 0x28
 800ea0e:	af02      	add	r7, sp, #8
 800ea10:	60f8      	str	r0, [r7, #12]
 800ea12:	60b9      	str	r1, [r7, #8]
 800ea14:	4613      	mov	r3, r2
 800ea16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10b      	bne.n	800ea36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	613b      	str	r3, [r7, #16]
}
 800ea30:	bf00      	nop
 800ea32:	bf00      	nop
 800ea34:	e7fd      	b.n	800ea32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	fb02 f303 	mul.w	r3, r2, r3
 800ea3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	3350      	adds	r3, #80	@ 0x50
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff fa03 	bl	800de50 <pvPortMalloc>
 800ea4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d011      	beq.n	800ea76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	3350      	adds	r3, #80	@ 0x50
 800ea5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea64:	79fa      	ldrb	r2, [r7, #7]
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	68b9      	ldr	r1, [r7, #8]
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 f805 	bl	800ea80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea76:	69bb      	ldr	r3, [r7, #24]
	}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3720      	adds	r7, #32
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d103      	bne.n	800ea9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	69ba      	ldr	r2, [r7, #24]
 800ea98:	601a      	str	r2, [r3, #0]
 800ea9a:	e002      	b.n	800eaa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eaae:	2101      	movs	r1, #1
 800eab0:	69b8      	ldr	r0, [r7, #24]
 800eab2:	f7ff fec3 	bl	800e83c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	78fa      	ldrb	r2, [r7, #3]
 800eaba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eabe:	bf00      	nop
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00e      	beq.n	800eaf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eae6:	2300      	movs	r3, #0
 800eae8:	2200      	movs	r2, #0
 800eaea:	2100      	movs	r1, #0
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f837 	bl	800eb60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b086      	sub	sp, #24
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	4603      	mov	r3, r0
 800eb02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb04:	2301      	movs	r3, #1
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	6939      	ldr	r1, [r7, #16]
 800eb12:	6978      	ldr	r0, [r7, #20]
 800eb14:	f7ff ff79 	bl	800ea0a <xQueueGenericCreate>
 800eb18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7ff ffd3 	bl	800eac6 <prvInitialiseMutex>

		return xNewQueue;
 800eb20:	68fb      	ldr	r3, [r7, #12]
	}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b088      	sub	sp, #32
 800eb2e:	af02      	add	r7, sp, #8
 800eb30:	4603      	mov	r3, r0
 800eb32:	6039      	str	r1, [r7, #0]
 800eb34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb36:	2301      	movs	r3, #1
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800eb3e:	79fb      	ldrb	r3, [r7, #7]
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	2200      	movs	r2, #0
 800eb46:	6939      	ldr	r1, [r7, #16]
 800eb48:	6978      	ldr	r0, [r7, #20]
 800eb4a:	f7ff fee1 	bl	800e910 <xQueueGenericCreateStatic>
 800eb4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7ff ffb8 	bl	800eac6 <prvInitialiseMutex>

		return xNewQueue;
 800eb56:	68fb      	ldr	r3, [r7, #12]
	}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08e      	sub	sp, #56	@ 0x38
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10b      	bne.n	800eb94 <xQueueGenericSend+0x34>
	__asm volatile
 800eb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb80:	f383 8811 	msr	BASEPRI, r3
 800eb84:	f3bf 8f6f 	isb	sy
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eb8e:	bf00      	nop
 800eb90:	bf00      	nop
 800eb92:	e7fd      	b.n	800eb90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d103      	bne.n	800eba2 <xQueueGenericSend+0x42>
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <xQueueGenericSend+0x46>
 800eba2:	2301      	movs	r3, #1
 800eba4:	e000      	b.n	800eba8 <xQueueGenericSend+0x48>
 800eba6:	2300      	movs	r3, #0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10b      	bne.n	800ebc4 <xQueueGenericSend+0x64>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ebbe:	bf00      	nop
 800ebc0:	bf00      	nop
 800ebc2:	e7fd      	b.n	800ebc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	d103      	bne.n	800ebd2 <xQueueGenericSend+0x72>
 800ebca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d101      	bne.n	800ebd6 <xQueueGenericSend+0x76>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e000      	b.n	800ebd8 <xQueueGenericSend+0x78>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10b      	bne.n	800ebf4 <xQueueGenericSend+0x94>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	623b      	str	r3, [r7, #32]
}
 800ebee:	bf00      	nop
 800ebf0:	bf00      	nop
 800ebf2:	e7fd      	b.n	800ebf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebf4:	f001 fa90 	bl	8010118 <xTaskGetSchedulerState>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d102      	bne.n	800ec04 <xQueueGenericSend+0xa4>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d101      	bne.n	800ec08 <xQueueGenericSend+0xa8>
 800ec04:	2301      	movs	r3, #1
 800ec06:	e000      	b.n	800ec0a <xQueueGenericSend+0xaa>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10b      	bne.n	800ec26 <xQueueGenericSend+0xc6>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	61fb      	str	r3, [r7, #28]
}
 800ec20:	bf00      	nop
 800ec22:	bf00      	nop
 800ec24:	e7fd      	b.n	800ec22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec26:	f7ff fce7 	bl	800e5f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d302      	bcc.n	800ec3c <xQueueGenericSend+0xdc>
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	2b02      	cmp	r3, #2
 800ec3a:	d129      	bne.n	800ec90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	68b9      	ldr	r1, [r7, #8]
 800ec40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec42:	f000 fa91 	bl	800f168 <prvCopyDataToQueue>
 800ec46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d010      	beq.n	800ec72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec52:	3324      	adds	r3, #36	@ 0x24
 800ec54:	4618      	mov	r0, r3
 800ec56:	f001 f899 	bl	800fd8c <xTaskRemoveFromEventList>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d013      	beq.n	800ec88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec60:	4b3f      	ldr	r3, [pc, #252]	@ (800ed60 <xQueueGenericSend+0x200>)
 800ec62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	e00a      	b.n	800ec88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d007      	beq.n	800ec88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec78:	4b39      	ldr	r3, [pc, #228]	@ (800ed60 <xQueueGenericSend+0x200>)
 800ec7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec7e:	601a      	str	r2, [r3, #0]
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec88:	f7ff fce8 	bl	800e65c <vPortExitCritical>
				return pdPASS;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e063      	b.n	800ed58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d103      	bne.n	800ec9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec96:	f7ff fce1 	bl	800e65c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e05c      	b.n	800ed58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eca4:	f107 0314 	add.w	r3, r7, #20
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f001 f8d3 	bl	800fe54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ecb2:	f7ff fcd3 	bl	800e65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ecb6:	f000 fe29 	bl	800f90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecba:	f7ff fc9d 	bl	800e5f8 <vPortEnterCritical>
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ecc4:	b25b      	sxtb	r3, r3
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d103      	bne.n	800ecd4 <xQueueGenericSend+0x174>
 800eccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecda:	b25b      	sxtb	r3, r3
 800ecdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece0:	d103      	bne.n	800ecea <xQueueGenericSend+0x18a>
 800ece2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ecea:	f7ff fcb7 	bl	800e65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecee:	1d3a      	adds	r2, r7, #4
 800ecf0:	f107 0314 	add.w	r3, r7, #20
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f001 f8c2 	bl	800fe80 <xTaskCheckForTimeOut>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d124      	bne.n	800ed4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed04:	f000 fb28 	bl	800f358 <prvIsQueueFull>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d018      	beq.n	800ed40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed10:	3310      	adds	r3, #16
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 ffe6 	bl	800fce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed1e:	f000 fab3 	bl	800f288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed22:	f000 fe01 	bl	800f928 <xTaskResumeAll>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f47f af7c 	bne.w	800ec26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ed2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed60 <xQueueGenericSend+0x200>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	e772      	b.n	800ec26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed42:	f000 faa1 	bl	800f288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed46:	f000 fdef 	bl	800f928 <xTaskResumeAll>
 800ed4a:	e76c      	b.n	800ec26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed4e:	f000 fa9b 	bl	800f288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed52:	f000 fde9 	bl	800f928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3738      	adds	r7, #56	@ 0x38
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	e000ed04 	.word	0xe000ed04

0800ed64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b090      	sub	sp, #64	@ 0x40
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ed76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10b      	bne.n	800ed94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ed8e:	bf00      	nop
 800ed90:	bf00      	nop
 800ed92:	e7fd      	b.n	800ed90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d103      	bne.n	800eda2 <xQueueGenericSendFromISR+0x3e>
 800ed9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d101      	bne.n	800eda6 <xQueueGenericSendFromISR+0x42>
 800eda2:	2301      	movs	r3, #1
 800eda4:	e000      	b.n	800eda8 <xQueueGenericSendFromISR+0x44>
 800eda6:	2300      	movs	r3, #0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d10b      	bne.n	800edc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800edac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800edbe:	bf00      	nop
 800edc0:	bf00      	nop
 800edc2:	e7fd      	b.n	800edc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d103      	bne.n	800edd2 <xQueueGenericSendFromISR+0x6e>
 800edca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d101      	bne.n	800edd6 <xQueueGenericSendFromISR+0x72>
 800edd2:	2301      	movs	r3, #1
 800edd4:	e000      	b.n	800edd8 <xQueueGenericSendFromISR+0x74>
 800edd6:	2300      	movs	r3, #0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10b      	bne.n	800edf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	623b      	str	r3, [r7, #32]
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	e7fd      	b.n	800edf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edf4:	f7ff fce0 	bl	800e7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800edf8:	f3ef 8211 	mrs	r2, BASEPRI
 800edfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	61fa      	str	r2, [r7, #28]
 800ee0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ee10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d302      	bcc.n	800ee26 <xQueueGenericSendFromISR+0xc2>
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d12f      	bne.n	800ee86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee36:	683a      	ldr	r2, [r7, #0]
 800ee38:	68b9      	ldr	r1, [r7, #8]
 800ee3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee3c:	f000 f994 	bl	800f168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ee44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee48:	d112      	bne.n	800ee70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d016      	beq.n	800ee80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee54:	3324      	adds	r3, #36	@ 0x24
 800ee56:	4618      	mov	r0, r3
 800ee58:	f000 ff98 	bl	800fd8c <xTaskRemoveFromEventList>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00e      	beq.n	800ee80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00b      	beq.n	800ee80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	e007      	b.n	800ee80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ee74:	3301      	adds	r3, #1
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	b25a      	sxtb	r2, r3
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ee80:	2301      	movs	r3, #1
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ee84:	e001      	b.n	800ee8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	f383 8811 	msr	BASEPRI, r3
}
 800ee94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3740      	adds	r7, #64	@ 0x40
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08c      	sub	sp, #48	@ 0x30
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eeac:	2300      	movs	r3, #0
 800eeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10b      	bne.n	800eed2 <xQueueReceive+0x32>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	623b      	str	r3, [r7, #32]
}
 800eecc:	bf00      	nop
 800eece:	bf00      	nop
 800eed0:	e7fd      	b.n	800eece <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d103      	bne.n	800eee0 <xQueueReceive+0x40>
 800eed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <xQueueReceive+0x44>
 800eee0:	2301      	movs	r3, #1
 800eee2:	e000      	b.n	800eee6 <xQueueReceive+0x46>
 800eee4:	2300      	movs	r3, #0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d10b      	bne.n	800ef02 <xQueueReceive+0x62>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	61fb      	str	r3, [r7, #28]
}
 800eefc:	bf00      	nop
 800eefe:	bf00      	nop
 800ef00:	e7fd      	b.n	800eefe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef02:	f001 f909 	bl	8010118 <xTaskGetSchedulerState>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d102      	bne.n	800ef12 <xQueueReceive+0x72>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <xQueueReceive+0x76>
 800ef12:	2301      	movs	r3, #1
 800ef14:	e000      	b.n	800ef18 <xQueueReceive+0x78>
 800ef16:	2300      	movs	r3, #0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10b      	bne.n	800ef34 <xQueueReceive+0x94>
	__asm volatile
 800ef1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	61bb      	str	r3, [r7, #24]
}
 800ef2e:	bf00      	nop
 800ef30:	bf00      	nop
 800ef32:	e7fd      	b.n	800ef30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef34:	f7ff fb60 	bl	800e5f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d01f      	beq.n	800ef84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef44:	68b9      	ldr	r1, [r7, #8]
 800ef46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef48:	f000 f978 	bl	800f23c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4e:	1e5a      	subs	r2, r3, #1
 800ef50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00f      	beq.n	800ef7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5e:	3310      	adds	r3, #16
 800ef60:	4618      	mov	r0, r3
 800ef62:	f000 ff13 	bl	800fd8c <xTaskRemoveFromEventList>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef6c:	4b3c      	ldr	r3, [pc, #240]	@ (800f060 <xQueueReceive+0x1c0>)
 800ef6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef7c:	f7ff fb6e 	bl	800e65c <vPortExitCritical>
				return pdPASS;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e069      	b.n	800f058 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d103      	bne.n	800ef92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef8a:	f7ff fb67 	bl	800e65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e062      	b.n	800f058 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d106      	bne.n	800efa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef98:	f107 0310 	add.w	r3, r7, #16
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 ff59 	bl	800fe54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efa2:	2301      	movs	r3, #1
 800efa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efa6:	f7ff fb59 	bl	800e65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efaa:	f000 fcaf 	bl	800f90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efae:	f7ff fb23 	bl	800e5f8 <vPortEnterCritical>
 800efb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efb8:	b25b      	sxtb	r3, r3
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d103      	bne.n	800efc8 <xQueueReceive+0x128>
 800efc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efce:	b25b      	sxtb	r3, r3
 800efd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd4:	d103      	bne.n	800efde <xQueueReceive+0x13e>
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	2200      	movs	r2, #0
 800efda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efde:	f7ff fb3d 	bl	800e65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efe2:	1d3a      	adds	r2, r7, #4
 800efe4:	f107 0310 	add.w	r3, r7, #16
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f000 ff48 	bl	800fe80 <xTaskCheckForTimeOut>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d123      	bne.n	800f03e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eff8:	f000 f998 	bl	800f32c <prvIsQueueEmpty>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d017      	beq.n	800f032 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f004:	3324      	adds	r3, #36	@ 0x24
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	4611      	mov	r1, r2
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 fe6c 	bl	800fce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f012:	f000 f939 	bl	800f288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f016:	f000 fc87 	bl	800f928 <xTaskResumeAll>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d189      	bne.n	800ef34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f020:	4b0f      	ldr	r3, [pc, #60]	@ (800f060 <xQueueReceive+0x1c0>)
 800f022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	e780      	b.n	800ef34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f034:	f000 f928 	bl	800f288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f038:	f000 fc76 	bl	800f928 <xTaskResumeAll>
 800f03c:	e77a      	b.n	800ef34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f03e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f040:	f000 f922 	bl	800f288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f044:	f000 fc70 	bl	800f928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f04a:	f000 f96f 	bl	800f32c <prvIsQueueEmpty>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	f43f af6f 	beq.w	800ef34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f056:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3730      	adds	r7, #48	@ 0x30
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08e      	sub	sp, #56	@ 0x38
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10b      	bne.n	800f092 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	623b      	str	r3, [r7, #32]
}
 800f08c:	bf00      	nop
 800f08e:	bf00      	nop
 800f090:	e7fd      	b.n	800f08e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d103      	bne.n	800f0a0 <xQueueReceiveFromISR+0x3c>
 800f098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <xQueueReceiveFromISR+0x40>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e000      	b.n	800f0a6 <xQueueReceiveFromISR+0x42>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10b      	bne.n	800f0c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	61fb      	str	r3, [r7, #28]
}
 800f0bc:	bf00      	nop
 800f0be:	bf00      	nop
 800f0c0:	e7fd      	b.n	800f0be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0c2:	f7ff fb79 	bl	800e7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800f0c6:	f3ef 8211 	mrs	r2, BASEPRI
 800f0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	61ba      	str	r2, [r7, #24]
 800f0dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f0de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d02f      	beq.n	800f14e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0f8:	68b9      	ldr	r1, [r7, #8]
 800f0fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0fc:	f000 f89e 	bl	800f23c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f102:	1e5a      	subs	r2, r3, #1
 800f104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f106:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f108:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f110:	d112      	bne.n	800f138 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d016      	beq.n	800f148 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11c:	3310      	adds	r3, #16
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 fe34 	bl	800fd8c <xTaskRemoveFromEventList>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00e      	beq.n	800f148 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00b      	beq.n	800f148 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	e007      	b.n	800f148 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f13c:	3301      	adds	r3, #1
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	b25a      	sxtb	r2, r3
 800f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f148:	2301      	movs	r3, #1
 800f14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f14c:	e001      	b.n	800f152 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f14e:	2300      	movs	r3, #0
 800f150:	637b      	str	r3, [r7, #52]	@ 0x34
 800f152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f154:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f383 8811 	msr	BASEPRI, r3
}
 800f15c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f160:	4618      	mov	r0, r3
 800f162:	3738      	adds	r7, #56	@ 0x38
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f174:	2300      	movs	r3, #0
 800f176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f17c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10d      	bne.n	800f1a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d14d      	bne.n	800f22a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 ffde 	bl	8010154 <xTaskPriorityDisinherit>
 800f198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2200      	movs	r2, #0
 800f19e:	609a      	str	r2, [r3, #8]
 800f1a0:	e043      	b.n	800f22a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d119      	bne.n	800f1dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6858      	ldr	r0, [r3, #4]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	68b9      	ldr	r1, [r7, #8]
 800f1b4:	f002 fe0f 	bl	8011dd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d32b      	bcc.n	800f22a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	605a      	str	r2, [r3, #4]
 800f1da:	e026      	b.n	800f22a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	68d8      	ldr	r0, [r3, #12]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	f002 fdf5 	bl	8011dd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68da      	ldr	r2, [r3, #12]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1f4:	425b      	negs	r3, r3
 800f1f6:	441a      	add	r2, r3
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	68da      	ldr	r2, [r3, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	429a      	cmp	r2, r3
 800f206:	d207      	bcs.n	800f218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	689a      	ldr	r2, [r3, #8]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f210:	425b      	negs	r3, r3
 800f212:	441a      	add	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	d105      	bne.n	800f22a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	3b01      	subs	r3, #1
 800f228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f232:	697b      	ldr	r3, [r7, #20]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3718      	adds	r7, #24
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d018      	beq.n	800f280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68da      	ldr	r2, [r3, #12]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f256:	441a      	add	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68da      	ldr	r2, [r3, #12]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	429a      	cmp	r2, r3
 800f266:	d303      	bcc.n	800f270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	68d9      	ldr	r1, [r3, #12]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f278:	461a      	mov	r2, r3
 800f27a:	6838      	ldr	r0, [r7, #0]
 800f27c:	f002 fdab 	bl	8011dd6 <memcpy>
	}
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f290:	f7ff f9b2 	bl	800e5f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f29a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f29c:	e011      	b.n	800f2c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d012      	beq.n	800f2cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3324      	adds	r3, #36	@ 0x24
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f000 fd6e 	bl	800fd8c <xTaskRemoveFromEventList>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f2b6:	f000 fe47 	bl	800ff48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dce9      	bgt.n	800f29e <prvUnlockQueue+0x16>
 800f2ca:	e000      	b.n	800f2ce <prvUnlockQueue+0x46>
					break;
 800f2cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	22ff      	movs	r2, #255	@ 0xff
 800f2d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f2d6:	f7ff f9c1 	bl	800e65c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2da:	f7ff f98d 	bl	800e5f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f2e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2e6:	e011      	b.n	800f30c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d012      	beq.n	800f316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3310      	adds	r3, #16
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 fd49 	bl	800fd8c <xTaskRemoveFromEventList>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f300:	f000 fe22 	bl	800ff48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	3b01      	subs	r3, #1
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f310:	2b00      	cmp	r3, #0
 800f312:	dce9      	bgt.n	800f2e8 <prvUnlockQueue+0x60>
 800f314:	e000      	b.n	800f318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	22ff      	movs	r2, #255	@ 0xff
 800f31c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f320:	f7ff f99c 	bl	800e65c <vPortExitCritical>
}
 800f324:	bf00      	nop
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f334:	f7ff f960 	bl	800e5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d102      	bne.n	800f346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f340:	2301      	movs	r3, #1
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	e001      	b.n	800f34a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f346:	2300      	movs	r3, #0
 800f348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f34a:	f7ff f987 	bl	800e65c <vPortExitCritical>

	return xReturn;
 800f34e:	68fb      	ldr	r3, [r7, #12]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f360:	f7ff f94a 	bl	800e5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d102      	bne.n	800f376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e001      	b.n	800f37a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f376:	2300      	movs	r3, #0
 800f378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f37a:	f7ff f96f 	bl	800e65c <vPortExitCritical>

	return xReturn;
 800f37e:	68fb      	ldr	r3, [r7, #12]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f392:	2300      	movs	r3, #0
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	e014      	b.n	800f3c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f398:	4a0f      	ldr	r2, [pc, #60]	@ (800f3d8 <vQueueAddToRegistry+0x50>)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10b      	bne.n	800f3bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f3a4:	490c      	ldr	r1, [pc, #48]	@ (800f3d8 <vQueueAddToRegistry+0x50>)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	683a      	ldr	r2, [r7, #0]
 800f3aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3ae:	4a0a      	ldr	r2, [pc, #40]	@ (800f3d8 <vQueueAddToRegistry+0x50>)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	4413      	add	r3, r2
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f3ba:	e006      	b.n	800f3ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	60fb      	str	r3, [r7, #12]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2b07      	cmp	r3, #7
 800f3c6:	d9e7      	bls.n	800f398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3c8:	bf00      	nop
 800f3ca:	bf00      	nop
 800f3cc:	3714      	adds	r7, #20
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	24004aa0 	.word	0x24004aa0

0800f3dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f3ec:	f7ff f904 	bl	800e5f8 <vPortEnterCritical>
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f3f6:	b25b      	sxtb	r3, r3
 800f3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fc:	d103      	bne.n	800f406 <vQueueWaitForMessageRestricted+0x2a>
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f40c:	b25b      	sxtb	r3, r3
 800f40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f412:	d103      	bne.n	800f41c <vQueueWaitForMessageRestricted+0x40>
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f41c:	f7ff f91e 	bl	800e65c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	3324      	adds	r3, #36	@ 0x24
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	68b9      	ldr	r1, [r7, #8]
 800f430:	4618      	mov	r0, r3
 800f432:	f000 fc7f 	bl	800fd34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f436:	6978      	ldr	r0, [r7, #20]
 800f438:	f7ff ff26 	bl	800f288 <prvUnlockQueue>
	}
 800f43c:	bf00      	nop
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f444:	b580      	push	{r7, lr}
 800f446:	b08e      	sub	sp, #56	@ 0x38
 800f448:	af04      	add	r7, sp, #16
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10b      	bne.n	800f470 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	623b      	str	r3, [r7, #32]
}
 800f46a:	bf00      	nop
 800f46c:	bf00      	nop
 800f46e:	e7fd      	b.n	800f46c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10b      	bne.n	800f48e <xTaskCreateStatic+0x4a>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	61fb      	str	r3, [r7, #28]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f48e:	23a8      	movs	r3, #168	@ 0xa8
 800f490:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2ba8      	cmp	r3, #168	@ 0xa8
 800f496:	d00b      	beq.n	800f4b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	61bb      	str	r3, [r7, #24]
}
 800f4aa:	bf00      	nop
 800f4ac:	bf00      	nop
 800f4ae:	e7fd      	b.n	800f4ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d01e      	beq.n	800f4f6 <xTaskCreateStatic+0xb2>
 800f4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d01b      	beq.n	800f4f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	9303      	str	r3, [sp, #12]
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d6:	9302      	str	r3, [sp, #8]
 800f4d8:	f107 0314 	add.w	r3, r7, #20
 800f4dc:	9301      	str	r3, [sp, #4]
 800f4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	68b9      	ldr	r1, [r7, #8]
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 f851 	bl	800f590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f4f0:	f000 f8f6 	bl	800f6e0 <prvAddNewTaskToReadyList>
 800f4f4:	e001      	b.n	800f4fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4fa:	697b      	ldr	r3, [r7, #20]
	}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3728      	adds	r7, #40	@ 0x28
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08c      	sub	sp, #48	@ 0x30
 800f508:	af04      	add	r7, sp, #16
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	4613      	mov	r3, r2
 800f512:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f514:	88fb      	ldrh	r3, [r7, #6]
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fe fc99 	bl	800de50 <pvPortMalloc>
 800f51e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00e      	beq.n	800f544 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f526:	20a8      	movs	r0, #168	@ 0xa8
 800f528:	f7fe fc92 	bl	800de50 <pvPortMalloc>
 800f52c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	631a      	str	r2, [r3, #48]	@ 0x30
 800f53a:	e005      	b.n	800f548 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f53c:	6978      	ldr	r0, [r7, #20]
 800f53e:	f7fe fd55 	bl	800dfec <vPortFree>
 800f542:	e001      	b.n	800f548 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f544:	2300      	movs	r3, #0
 800f546:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d017      	beq.n	800f57e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	2200      	movs	r2, #0
 800f552:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f556:	88fa      	ldrh	r2, [r7, #6]
 800f558:	2300      	movs	r3, #0
 800f55a:	9303      	str	r3, [sp, #12]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	9302      	str	r3, [sp, #8]
 800f560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	68b9      	ldr	r1, [r7, #8]
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f000 f80f 	bl	800f590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f572:	69f8      	ldr	r0, [r7, #28]
 800f574:	f000 f8b4 	bl	800f6e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f578:	2301      	movs	r3, #1
 800f57a:	61bb      	str	r3, [r7, #24]
 800f57c:	e002      	b.n	800f584 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f57e:	f04f 33ff 	mov.w	r3, #4294967295
 800f582:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f584:	69bb      	ldr	r3, [r7, #24]
	}
 800f586:	4618      	mov	r0, r3
 800f588:	3720      	adds	r7, #32
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
	...

0800f590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	21a5      	movs	r1, #165	@ 0xa5
 800f5aa:	f002 fb3f 	bl	8011c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5b2:	6879      	ldr	r1, [r7, #4]
 800f5b4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f5b8:	440b      	add	r3, r1
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	4413      	add	r3, r2
 800f5be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	f023 0307 	bic.w	r3, r3, #7
 800f5c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	f003 0307 	and.w	r3, r3, #7
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00b      	beq.n	800f5ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d6:	f383 8811 	msr	BASEPRI, r3
 800f5da:	f3bf 8f6f 	isb	sy
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	617b      	str	r3, [r7, #20]
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop
 800f5e8:	e7fd      	b.n	800f5e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d01f      	beq.n	800f630 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	e012      	b.n	800f61c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	7819      	ldrb	r1, [r3, #0]
 800f5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	4413      	add	r3, r2
 800f604:	3334      	adds	r3, #52	@ 0x34
 800f606:	460a      	mov	r2, r1
 800f608:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	4413      	add	r3, r2
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d006      	beq.n	800f624 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	3301      	adds	r3, #1
 800f61a:	61fb      	str	r3, [r7, #28]
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	2b0f      	cmp	r3, #15
 800f620:	d9e9      	bls.n	800f5f6 <prvInitialiseNewTask+0x66>
 800f622:	e000      	b.n	800f626 <prvInitialiseNewTask+0x96>
			{
				break;
 800f624:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f628:	2200      	movs	r2, #0
 800f62a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f62e:	e003      	b.n	800f638 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63a:	2b37      	cmp	r3, #55	@ 0x37
 800f63c:	d901      	bls.n	800f642 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f63e:	2337      	movs	r3, #55	@ 0x37
 800f640:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f646:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f64a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f64c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f650:	2200      	movs	r2, #0
 800f652:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f656:	3304      	adds	r3, #4
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fe fe07 	bl	800e26c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f660:	3318      	adds	r3, #24
 800f662:	4618      	mov	r0, r3
 800f664:	f7fe fe02 	bl	800e26c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f66c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f670:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f676:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f67c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f680:	2200      	movs	r2, #0
 800f682:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f690:	3354      	adds	r3, #84	@ 0x54
 800f692:	224c      	movs	r2, #76	@ 0x4c
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f002 fac8 	bl	8011c2c <memset>
 800f69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69e:	4a0d      	ldr	r2, [pc, #52]	@ (800f6d4 <prvInitialiseNewTask+0x144>)
 800f6a0:	659a      	str	r2, [r3, #88]	@ 0x58
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a4:	4a0c      	ldr	r2, [pc, #48]	@ (800f6d8 <prvInitialiseNewTask+0x148>)
 800f6a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6aa:	4a0c      	ldr	r2, [pc, #48]	@ (800f6dc <prvInitialiseNewTask+0x14c>)
 800f6ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	68f9      	ldr	r1, [r7, #12]
 800f6b2:	69b8      	ldr	r0, [r7, #24]
 800f6b4:	f7fe fe6e 	bl	800e394 <pxPortInitialiseStack>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d002      	beq.n	800f6ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6ca:	bf00      	nop
 800f6cc:	3720      	adds	r7, #32
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	2400510c 	.word	0x2400510c
 800f6d8:	24005174 	.word	0x24005174
 800f6dc:	240051dc 	.word	0x240051dc

0800f6e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6e8:	f7fe ff86 	bl	800e5f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6ec:	4b2d      	ldr	r3, [pc, #180]	@ (800f7a4 <prvAddNewTaskToReadyList+0xc4>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	4a2c      	ldr	r2, [pc, #176]	@ (800f7a4 <prvAddNewTaskToReadyList+0xc4>)
 800f6f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6f6:	4b2c      	ldr	r3, [pc, #176]	@ (800f7a8 <prvAddNewTaskToReadyList+0xc8>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800f7a8 <prvAddNewTaskToReadyList+0xc8>)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f704:	4b27      	ldr	r3, [pc, #156]	@ (800f7a4 <prvAddNewTaskToReadyList+0xc4>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d110      	bne.n	800f72e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f70c:	f000 fc40 	bl	800ff90 <prvInitialiseTaskLists>
 800f710:	e00d      	b.n	800f72e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f712:	4b26      	ldr	r3, [pc, #152]	@ (800f7ac <prvAddNewTaskToReadyList+0xcc>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d109      	bne.n	800f72e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f71a:	4b23      	ldr	r3, [pc, #140]	@ (800f7a8 <prvAddNewTaskToReadyList+0xc8>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f724:	429a      	cmp	r2, r3
 800f726:	d802      	bhi.n	800f72e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f728:	4a1f      	ldr	r2, [pc, #124]	@ (800f7a8 <prvAddNewTaskToReadyList+0xc8>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f72e:	4b20      	ldr	r3, [pc, #128]	@ (800f7b0 <prvAddNewTaskToReadyList+0xd0>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3301      	adds	r3, #1
 800f734:	4a1e      	ldr	r2, [pc, #120]	@ (800f7b0 <prvAddNewTaskToReadyList+0xd0>)
 800f736:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f738:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b0 <prvAddNewTaskToReadyList+0xd0>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f744:	4b1b      	ldr	r3, [pc, #108]	@ (800f7b4 <prvAddNewTaskToReadyList+0xd4>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d903      	bls.n	800f754 <prvAddNewTaskToReadyList+0x74>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f750:	4a18      	ldr	r2, [pc, #96]	@ (800f7b4 <prvAddNewTaskToReadyList+0xd4>)
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f758:	4613      	mov	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4a15      	ldr	r2, [pc, #84]	@ (800f7b8 <prvAddNewTaskToReadyList+0xd8>)
 800f762:	441a      	add	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3304      	adds	r3, #4
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fe fd8b 	bl	800e286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f770:	f7fe ff74 	bl	800e65c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f774:	4b0d      	ldr	r3, [pc, #52]	@ (800f7ac <prvAddNewTaskToReadyList+0xcc>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00e      	beq.n	800f79a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f77c:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a8 <prvAddNewTaskToReadyList+0xc8>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f786:	429a      	cmp	r2, r3
 800f788:	d207      	bcs.n	800f79a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f78a:	4b0c      	ldr	r3, [pc, #48]	@ (800f7bc <prvAddNewTaskToReadyList+0xdc>)
 800f78c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f790:	601a      	str	r2, [r3, #0]
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f79a:	bf00      	nop
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	24004fb4 	.word	0x24004fb4
 800f7a8:	24004ae0 	.word	0x24004ae0
 800f7ac:	24004fc0 	.word	0x24004fc0
 800f7b0:	24004fd0 	.word	0x24004fd0
 800f7b4:	24004fbc 	.word	0x24004fbc
 800f7b8:	24004ae4 	.word	0x24004ae4
 800f7bc:	e000ed04 	.word	0xe000ed04

0800f7c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d018      	beq.n	800f804 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7d2:	4b14      	ldr	r3, [pc, #80]	@ (800f824 <vTaskDelay+0x64>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00b      	beq.n	800f7f2 <vTaskDelay+0x32>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	60bb      	str	r3, [r7, #8]
}
 800f7ec:	bf00      	nop
 800f7ee:	bf00      	nop
 800f7f0:	e7fd      	b.n	800f7ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f7f2:	f000 f88b 	bl	800f90c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fd1b 	bl	8010234 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f7fe:	f000 f893 	bl	800f928 <xTaskResumeAll>
 800f802:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d107      	bne.n	800f81a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f80a:	4b07      	ldr	r3, [pc, #28]	@ (800f828 <vTaskDelay+0x68>)
 800f80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f81a:	bf00      	nop
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	24004fdc 	.word	0x24004fdc
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	@ 0x28
 800f830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f832:	2300      	movs	r3, #0
 800f834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f836:	2300      	movs	r3, #0
 800f838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f83a:	463a      	mov	r2, r7
 800f83c:	1d39      	adds	r1, r7, #4
 800f83e:	f107 0308 	add.w	r3, r7, #8
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe fad0 	bl	800dde8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68ba      	ldr	r2, [r7, #8]
 800f84e:	9202      	str	r2, [sp, #8]
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	2300      	movs	r3, #0
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	2300      	movs	r3, #0
 800f858:	460a      	mov	r2, r1
 800f85a:	4924      	ldr	r1, [pc, #144]	@ (800f8ec <vTaskStartScheduler+0xc0>)
 800f85c:	4824      	ldr	r0, [pc, #144]	@ (800f8f0 <vTaskStartScheduler+0xc4>)
 800f85e:	f7ff fdf1 	bl	800f444 <xTaskCreateStatic>
 800f862:	4603      	mov	r3, r0
 800f864:	4a23      	ldr	r2, [pc, #140]	@ (800f8f4 <vTaskStartScheduler+0xc8>)
 800f866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f868:	4b22      	ldr	r3, [pc, #136]	@ (800f8f4 <vTaskStartScheduler+0xc8>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f870:	2301      	movs	r3, #1
 800f872:	617b      	str	r3, [r7, #20]
 800f874:	e001      	b.n	800f87a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d102      	bne.n	800f886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f880:	f000 fd2c 	bl	80102dc <xTimerCreateTimerTask>
 800f884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d11b      	bne.n	800f8c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	613b      	str	r3, [r7, #16]
}
 800f89e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8a0:	4b15      	ldr	r3, [pc, #84]	@ (800f8f8 <vTaskStartScheduler+0xcc>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	3354      	adds	r3, #84	@ 0x54
 800f8a6:	4a15      	ldr	r2, [pc, #84]	@ (800f8fc <vTaskStartScheduler+0xd0>)
 800f8a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8aa:	4b15      	ldr	r3, [pc, #84]	@ (800f900 <vTaskStartScheduler+0xd4>)
 800f8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8b2:	4b14      	ldr	r3, [pc, #80]	@ (800f904 <vTaskStartScheduler+0xd8>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8b8:	4b13      	ldr	r3, [pc, #76]	@ (800f908 <vTaskStartScheduler+0xdc>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8be:	f7fe fdf7 	bl	800e4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8c2:	e00f      	b.n	800f8e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ca:	d10b      	bne.n	800f8e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	60fb      	str	r3, [r7, #12]
}
 800f8de:	bf00      	nop
 800f8e0:	bf00      	nop
 800f8e2:	e7fd      	b.n	800f8e0 <vTaskStartScheduler+0xb4>
}
 800f8e4:	bf00      	nop
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	08016dc0 	.word	0x08016dc0
 800f8f0:	0800ff61 	.word	0x0800ff61
 800f8f4:	24004fd8 	.word	0x24004fd8
 800f8f8:	24004ae0 	.word	0x24004ae0
 800f8fc:	2400002c 	.word	0x2400002c
 800f900:	24004fd4 	.word	0x24004fd4
 800f904:	24004fc0 	.word	0x24004fc0
 800f908:	24004fb8 	.word	0x24004fb8

0800f90c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f910:	4b04      	ldr	r3, [pc, #16]	@ (800f924 <vTaskSuspendAll+0x18>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	3301      	adds	r3, #1
 800f916:	4a03      	ldr	r2, [pc, #12]	@ (800f924 <vTaskSuspendAll+0x18>)
 800f918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f91a:	bf00      	nop
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr
 800f924:	24004fdc 	.word	0x24004fdc

0800f928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f92e:	2300      	movs	r3, #0
 800f930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f932:	2300      	movs	r3, #0
 800f934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f936:	4b42      	ldr	r3, [pc, #264]	@ (800fa40 <xTaskResumeAll+0x118>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10b      	bne.n	800f956 <xTaskResumeAll+0x2e>
	__asm volatile
 800f93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f942:	f383 8811 	msr	BASEPRI, r3
 800f946:	f3bf 8f6f 	isb	sy
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	603b      	str	r3, [r7, #0]
}
 800f950:	bf00      	nop
 800f952:	bf00      	nop
 800f954:	e7fd      	b.n	800f952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f956:	f7fe fe4f 	bl	800e5f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f95a:	4b39      	ldr	r3, [pc, #228]	@ (800fa40 <xTaskResumeAll+0x118>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3b01      	subs	r3, #1
 800f960:	4a37      	ldr	r2, [pc, #220]	@ (800fa40 <xTaskResumeAll+0x118>)
 800f962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f964:	4b36      	ldr	r3, [pc, #216]	@ (800fa40 <xTaskResumeAll+0x118>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d162      	bne.n	800fa32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f96c:	4b35      	ldr	r3, [pc, #212]	@ (800fa44 <xTaskResumeAll+0x11c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d05e      	beq.n	800fa32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f974:	e02f      	b.n	800f9d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f976:	4b34      	ldr	r3, [pc, #208]	@ (800fa48 <xTaskResumeAll+0x120>)
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3318      	adds	r3, #24
 800f982:	4618      	mov	r0, r3
 800f984:	f7fe fcdc 	bl	800e340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	3304      	adds	r3, #4
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fe fcd7 	bl	800e340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f996:	4b2d      	ldr	r3, [pc, #180]	@ (800fa4c <xTaskResumeAll+0x124>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d903      	bls.n	800f9a6 <xTaskResumeAll+0x7e>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a2:	4a2a      	ldr	r2, [pc, #168]	@ (800fa4c <xTaskResumeAll+0x124>)
 800f9a4:	6013      	str	r3, [r2, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	4413      	add	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4a27      	ldr	r2, [pc, #156]	@ (800fa50 <xTaskResumeAll+0x128>)
 800f9b4:	441a      	add	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f7fe fc62 	bl	800e286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9c6:	4b23      	ldr	r3, [pc, #140]	@ (800fa54 <xTaskResumeAll+0x12c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d302      	bcc.n	800f9d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f9d0:	4b21      	ldr	r3, [pc, #132]	@ (800fa58 <xTaskResumeAll+0x130>)
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9d6:	4b1c      	ldr	r3, [pc, #112]	@ (800fa48 <xTaskResumeAll+0x120>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1cb      	bne.n	800f976 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d001      	beq.n	800f9e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9e4:	f000 fb78 	bl	80100d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f9e8:	4b1c      	ldr	r3, [pc, #112]	@ (800fa5c <xTaskResumeAll+0x134>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d010      	beq.n	800fa16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f9f4:	f000 f858 	bl	800faa8 <xTaskIncrementTick>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f9fe:	4b16      	ldr	r3, [pc, #88]	@ (800fa58 <xTaskResumeAll+0x130>)
 800fa00:	2201      	movs	r2, #1
 800fa02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1f1      	bne.n	800f9f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fa10:	4b12      	ldr	r3, [pc, #72]	@ (800fa5c <xTaskResumeAll+0x134>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa16:	4b10      	ldr	r3, [pc, #64]	@ (800fa58 <xTaskResumeAll+0x130>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d009      	beq.n	800fa32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa22:	4b0f      	ldr	r3, [pc, #60]	@ (800fa60 <xTaskResumeAll+0x138>)
 800fa24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa32:	f7fe fe13 	bl	800e65c <vPortExitCritical>

	return xAlreadyYielded;
 800fa36:	68bb      	ldr	r3, [r7, #8]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	24004fdc 	.word	0x24004fdc
 800fa44:	24004fb4 	.word	0x24004fb4
 800fa48:	24004f74 	.word	0x24004f74
 800fa4c:	24004fbc 	.word	0x24004fbc
 800fa50:	24004ae4 	.word	0x24004ae4
 800fa54:	24004ae0 	.word	0x24004ae0
 800fa58:	24004fc8 	.word	0x24004fc8
 800fa5c:	24004fc4 	.word	0x24004fc4
 800fa60:	e000ed04 	.word	0xe000ed04

0800fa64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa6a:	4b05      	ldr	r3, [pc, #20]	@ (800fa80 <xTaskGetTickCount+0x1c>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fa70:	687b      	ldr	r3, [r7, #4]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	24004fb8 	.word	0x24004fb8

0800fa84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa8a:	f7fe fe95 	bl	800e7b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fa8e:	2300      	movs	r3, #0
 800fa90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fa92:	4b04      	ldr	r3, [pc, #16]	@ (800faa4 <xTaskGetTickCountFromISR+0x20>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa98:	683b      	ldr	r3, [r7, #0]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	24004fb8 	.word	0x24004fb8

0800faa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800faae:	2300      	movs	r3, #0
 800fab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fab2:	4b4f      	ldr	r3, [pc, #316]	@ (800fbf0 <xTaskIncrementTick+0x148>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f040 8090 	bne.w	800fbdc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fabc:	4b4d      	ldr	r3, [pc, #308]	@ (800fbf4 <xTaskIncrementTick+0x14c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fac4:	4a4b      	ldr	r2, [pc, #300]	@ (800fbf4 <xTaskIncrementTick+0x14c>)
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d121      	bne.n	800fb14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fad0:	4b49      	ldr	r3, [pc, #292]	@ (800fbf8 <xTaskIncrementTick+0x150>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00b      	beq.n	800faf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	603b      	str	r3, [r7, #0]
}
 800faec:	bf00      	nop
 800faee:	bf00      	nop
 800faf0:	e7fd      	b.n	800faee <xTaskIncrementTick+0x46>
 800faf2:	4b41      	ldr	r3, [pc, #260]	@ (800fbf8 <xTaskIncrementTick+0x150>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	60fb      	str	r3, [r7, #12]
 800faf8:	4b40      	ldr	r3, [pc, #256]	@ (800fbfc <xTaskIncrementTick+0x154>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a3e      	ldr	r2, [pc, #248]	@ (800fbf8 <xTaskIncrementTick+0x150>)
 800fafe:	6013      	str	r3, [r2, #0]
 800fb00:	4a3e      	ldr	r2, [pc, #248]	@ (800fbfc <xTaskIncrementTick+0x154>)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6013      	str	r3, [r2, #0]
 800fb06:	4b3e      	ldr	r3, [pc, #248]	@ (800fc00 <xTaskIncrementTick+0x158>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	4a3c      	ldr	r2, [pc, #240]	@ (800fc00 <xTaskIncrementTick+0x158>)
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	f000 fae2 	bl	80100d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb14:	4b3b      	ldr	r3, [pc, #236]	@ (800fc04 <xTaskIncrementTick+0x15c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d349      	bcc.n	800fbb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb1e:	4b36      	ldr	r3, [pc, #216]	@ (800fbf8 <xTaskIncrementTick+0x150>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d104      	bne.n	800fb32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb28:	4b36      	ldr	r3, [pc, #216]	@ (800fc04 <xTaskIncrementTick+0x15c>)
 800fb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2e:	601a      	str	r2, [r3, #0]
					break;
 800fb30:	e03f      	b.n	800fbb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb32:	4b31      	ldr	r3, [pc, #196]	@ (800fbf8 <xTaskIncrementTick+0x150>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d203      	bcs.n	800fb52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb4a:	4a2e      	ldr	r2, [pc, #184]	@ (800fc04 <xTaskIncrementTick+0x15c>)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb50:	e02f      	b.n	800fbb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	3304      	adds	r3, #4
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fe fbf2 	bl	800e340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d004      	beq.n	800fb6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	3318      	adds	r3, #24
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fbe9 	bl	800e340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb72:	4b25      	ldr	r3, [pc, #148]	@ (800fc08 <xTaskIncrementTick+0x160>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d903      	bls.n	800fb82 <xTaskIncrementTick+0xda>
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb7e:	4a22      	ldr	r2, [pc, #136]	@ (800fc08 <xTaskIncrementTick+0x160>)
 800fb80:	6013      	str	r3, [r2, #0]
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb86:	4613      	mov	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	4a1f      	ldr	r2, [pc, #124]	@ (800fc0c <xTaskIncrementTick+0x164>)
 800fb90:	441a      	add	r2, r3
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4619      	mov	r1, r3
 800fb98:	4610      	mov	r0, r2
 800fb9a:	f7fe fb74 	bl	800e286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fba2:	4b1b      	ldr	r3, [pc, #108]	@ (800fc10 <xTaskIncrementTick+0x168>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d3b8      	bcc.n	800fb1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fbac:	2301      	movs	r3, #1
 800fbae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbb0:	e7b5      	b.n	800fb1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbb2:	4b17      	ldr	r3, [pc, #92]	@ (800fc10 <xTaskIncrementTick+0x168>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbb8:	4914      	ldr	r1, [pc, #80]	@ (800fc0c <xTaskIncrementTick+0x164>)
 800fbba:	4613      	mov	r3, r2
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	440b      	add	r3, r1
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d901      	bls.n	800fbce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fbce:	4b11      	ldr	r3, [pc, #68]	@ (800fc14 <xTaskIncrementTick+0x16c>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d007      	beq.n	800fbe6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	617b      	str	r3, [r7, #20]
 800fbda:	e004      	b.n	800fbe6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fbdc:	4b0e      	ldr	r3, [pc, #56]	@ (800fc18 <xTaskIncrementTick+0x170>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	4a0d      	ldr	r2, [pc, #52]	@ (800fc18 <xTaskIncrementTick+0x170>)
 800fbe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fbe6:	697b      	ldr	r3, [r7, #20]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	24004fdc 	.word	0x24004fdc
 800fbf4:	24004fb8 	.word	0x24004fb8
 800fbf8:	24004f6c 	.word	0x24004f6c
 800fbfc:	24004f70 	.word	0x24004f70
 800fc00:	24004fcc 	.word	0x24004fcc
 800fc04:	24004fd4 	.word	0x24004fd4
 800fc08:	24004fbc 	.word	0x24004fbc
 800fc0c:	24004ae4 	.word	0x24004ae4
 800fc10:	24004ae0 	.word	0x24004ae0
 800fc14:	24004fc8 	.word	0x24004fc8
 800fc18:	24004fc4 	.word	0x24004fc4

0800fc1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc22:	4b2b      	ldr	r3, [pc, #172]	@ (800fcd0 <vTaskSwitchContext+0xb4>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc2a:	4b2a      	ldr	r3, [pc, #168]	@ (800fcd4 <vTaskSwitchContext+0xb8>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc30:	e047      	b.n	800fcc2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fc32:	4b28      	ldr	r3, [pc, #160]	@ (800fcd4 <vTaskSwitchContext+0xb8>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc38:	4b27      	ldr	r3, [pc, #156]	@ (800fcd8 <vTaskSwitchContext+0xbc>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e011      	b.n	800fc64 <vTaskSwitchContext+0x48>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10b      	bne.n	800fc5e <vTaskSwitchContext+0x42>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	607b      	str	r3, [r7, #4]
}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	e7fd      	b.n	800fc5a <vTaskSwitchContext+0x3e>
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	60fb      	str	r3, [r7, #12]
 800fc64:	491d      	ldr	r1, [pc, #116]	@ (800fcdc <vTaskSwitchContext+0xc0>)
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	4613      	mov	r3, r2
 800fc6a:	009b      	lsls	r3, r3, #2
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	440b      	add	r3, r1
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d0e3      	beq.n	800fc40 <vTaskSwitchContext+0x24>
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4a16      	ldr	r2, [pc, #88]	@ (800fcdc <vTaskSwitchContext+0xc0>)
 800fc84:	4413      	add	r3, r2
 800fc86:	60bb      	str	r3, [r7, #8]
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	605a      	str	r2, [r3, #4]
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	3308      	adds	r3, #8
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d104      	bne.n	800fca8 <vTaskSwitchContext+0x8c>
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	685a      	ldr	r2, [r3, #4]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	605a      	str	r2, [r3, #4]
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	4a0c      	ldr	r2, [pc, #48]	@ (800fce0 <vTaskSwitchContext+0xc4>)
 800fcb0:	6013      	str	r3, [r2, #0]
 800fcb2:	4a09      	ldr	r2, [pc, #36]	@ (800fcd8 <vTaskSwitchContext+0xbc>)
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcb8:	4b09      	ldr	r3, [pc, #36]	@ (800fce0 <vTaskSwitchContext+0xc4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3354      	adds	r3, #84	@ 0x54
 800fcbe:	4a09      	ldr	r2, [pc, #36]	@ (800fce4 <vTaskSwitchContext+0xc8>)
 800fcc0:	6013      	str	r3, [r2, #0]
}
 800fcc2:	bf00      	nop
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	24004fdc 	.word	0x24004fdc
 800fcd4:	24004fc8 	.word	0x24004fc8
 800fcd8:	24004fbc 	.word	0x24004fbc
 800fcdc:	24004ae4 	.word	0x24004ae4
 800fce0:	24004ae0 	.word	0x24004ae0
 800fce4:	2400002c 	.word	0x2400002c

0800fce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10b      	bne.n	800fd10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fcf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcfc:	f383 8811 	msr	BASEPRI, r3
 800fd00:	f3bf 8f6f 	isb	sy
 800fd04:	f3bf 8f4f 	dsb	sy
 800fd08:	60fb      	str	r3, [r7, #12]
}
 800fd0a:	bf00      	nop
 800fd0c:	bf00      	nop
 800fd0e:	e7fd      	b.n	800fd0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd10:	4b07      	ldr	r3, [pc, #28]	@ (800fd30 <vTaskPlaceOnEventList+0x48>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3318      	adds	r3, #24
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fe fad8 	bl	800e2ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd1e:	2101      	movs	r1, #1
 800fd20:	6838      	ldr	r0, [r7, #0]
 800fd22:	f000 fa87 	bl	8010234 <prvAddCurrentTaskToDelayedList>
}
 800fd26:	bf00      	nop
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	24004ae0 	.word	0x24004ae0

0800fd34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b086      	sub	sp, #24
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d10b      	bne.n	800fd5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	617b      	str	r3, [r7, #20]
}
 800fd58:	bf00      	nop
 800fd5a:	bf00      	nop
 800fd5c:	e7fd      	b.n	800fd5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd5e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd88 <vTaskPlaceOnEventListRestricted+0x54>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	3318      	adds	r3, #24
 800fd64:	4619      	mov	r1, r3
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7fe fa8d 	bl	800e286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d002      	beq.n	800fd78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fd72:	f04f 33ff 	mov.w	r3, #4294967295
 800fd76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd78:	6879      	ldr	r1, [r7, #4]
 800fd7a:	68b8      	ldr	r0, [r7, #8]
 800fd7c:	f000 fa5a 	bl	8010234 <prvAddCurrentTaskToDelayedList>
	}
 800fd80:	bf00      	nop
 800fd82:	3718      	adds	r7, #24
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	24004ae0 	.word	0x24004ae0

0800fd8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b086      	sub	sp, #24
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	60fb      	str	r3, [r7, #12]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	3318      	adds	r3, #24
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe fabe 	bl	800e340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdc4:	4b1d      	ldr	r3, [pc, #116]	@ (800fe3c <xTaskRemoveFromEventList+0xb0>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d11d      	bne.n	800fe08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	3304      	adds	r3, #4
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fab5 	bl	800e340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdda:	4b19      	ldr	r3, [pc, #100]	@ (800fe40 <xTaskRemoveFromEventList+0xb4>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d903      	bls.n	800fdea <xTaskRemoveFromEventList+0x5e>
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde6:	4a16      	ldr	r2, [pc, #88]	@ (800fe40 <xTaskRemoveFromEventList+0xb4>)
 800fde8:	6013      	str	r3, [r2, #0]
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdee:	4613      	mov	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4a13      	ldr	r2, [pc, #76]	@ (800fe44 <xTaskRemoveFromEventList+0xb8>)
 800fdf8:	441a      	add	r2, r3
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4610      	mov	r0, r2
 800fe02:	f7fe fa40 	bl	800e286 <vListInsertEnd>
 800fe06:	e005      	b.n	800fe14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	3318      	adds	r3, #24
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	480e      	ldr	r0, [pc, #56]	@ (800fe48 <xTaskRemoveFromEventList+0xbc>)
 800fe10:	f7fe fa39 	bl	800e286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe18:	4b0c      	ldr	r3, [pc, #48]	@ (800fe4c <xTaskRemoveFromEventList+0xc0>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d905      	bls.n	800fe2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe22:	2301      	movs	r3, #1
 800fe24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe26:	4b0a      	ldr	r3, [pc, #40]	@ (800fe50 <xTaskRemoveFromEventList+0xc4>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]
 800fe2c:	e001      	b.n	800fe32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe32:	697b      	ldr	r3, [r7, #20]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3718      	adds	r7, #24
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	24004fdc 	.word	0x24004fdc
 800fe40:	24004fbc 	.word	0x24004fbc
 800fe44:	24004ae4 	.word	0x24004ae4
 800fe48:	24004f74 	.word	0x24004f74
 800fe4c:	24004ae0 	.word	0x24004ae0
 800fe50:	24004fc8 	.word	0x24004fc8

0800fe54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe5c:	4b06      	ldr	r3, [pc, #24]	@ (800fe78 <vTaskInternalSetTimeOutState+0x24>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe64:	4b05      	ldr	r3, [pc, #20]	@ (800fe7c <vTaskInternalSetTimeOutState+0x28>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	605a      	str	r2, [r3, #4]
}
 800fe6c:	bf00      	nop
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr
 800fe78:	24004fcc 	.word	0x24004fcc
 800fe7c:	24004fb8 	.word	0x24004fb8

0800fe80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10b      	bne.n	800fea8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fe90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	613b      	str	r3, [r7, #16]
}
 800fea2:	bf00      	nop
 800fea4:	bf00      	nop
 800fea6:	e7fd      	b.n	800fea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10b      	bne.n	800fec6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	60fb      	str	r3, [r7, #12]
}
 800fec0:	bf00      	nop
 800fec2:	bf00      	nop
 800fec4:	e7fd      	b.n	800fec2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fec6:	f7fe fb97 	bl	800e5f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800feca:	4b1d      	ldr	r3, [pc, #116]	@ (800ff40 <xTaskCheckForTimeOut+0xc0>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	69ba      	ldr	r2, [r7, #24]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee2:	d102      	bne.n	800feea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fee4:	2300      	movs	r3, #0
 800fee6:	61fb      	str	r3, [r7, #28]
 800fee8:	e023      	b.n	800ff32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	4b15      	ldr	r3, [pc, #84]	@ (800ff44 <xTaskCheckForTimeOut+0xc4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d007      	beq.n	800ff06 <xTaskCheckForTimeOut+0x86>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d302      	bcc.n	800ff06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff00:	2301      	movs	r3, #1
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	e015      	b.n	800ff32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d20b      	bcs.n	800ff28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	1ad2      	subs	r2, r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff ff99 	bl	800fe54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff22:	2300      	movs	r3, #0
 800ff24:	61fb      	str	r3, [r7, #28]
 800ff26:	e004      	b.n	800ff32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff32:	f7fe fb93 	bl	800e65c <vPortExitCritical>

	return xReturn;
 800ff36:	69fb      	ldr	r3, [r7, #28]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3720      	adds	r7, #32
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	24004fb8 	.word	0x24004fb8
 800ff44:	24004fcc 	.word	0x24004fcc

0800ff48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff4c:	4b03      	ldr	r3, [pc, #12]	@ (800ff5c <vTaskMissedYield+0x14>)
 800ff4e:	2201      	movs	r2, #1
 800ff50:	601a      	str	r2, [r3, #0]
}
 800ff52:	bf00      	nop
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr
 800ff5c:	24004fc8 	.word	0x24004fc8

0800ff60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff68:	f000 f852 	bl	8010010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff6c:	4b06      	ldr	r3, [pc, #24]	@ (800ff88 <prvIdleTask+0x28>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d9f9      	bls.n	800ff68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <prvIdleTask+0x2c>)
 800ff76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff7a:	601a      	str	r2, [r3, #0]
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff84:	e7f0      	b.n	800ff68 <prvIdleTask+0x8>
 800ff86:	bf00      	nop
 800ff88:	24004ae4 	.word	0x24004ae4
 800ff8c:	e000ed04 	.word	0xe000ed04

0800ff90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff96:	2300      	movs	r3, #0
 800ff98:	607b      	str	r3, [r7, #4]
 800ff9a:	e00c      	b.n	800ffb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4a12      	ldr	r2, [pc, #72]	@ (800fff0 <prvInitialiseTaskLists+0x60>)
 800ffa8:	4413      	add	r3, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fe f93e 	bl	800e22c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	607b      	str	r3, [r7, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b37      	cmp	r3, #55	@ 0x37
 800ffba:	d9ef      	bls.n	800ff9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffbc:	480d      	ldr	r0, [pc, #52]	@ (800fff4 <prvInitialiseTaskLists+0x64>)
 800ffbe:	f7fe f935 	bl	800e22c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffc2:	480d      	ldr	r0, [pc, #52]	@ (800fff8 <prvInitialiseTaskLists+0x68>)
 800ffc4:	f7fe f932 	bl	800e22c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffc8:	480c      	ldr	r0, [pc, #48]	@ (800fffc <prvInitialiseTaskLists+0x6c>)
 800ffca:	f7fe f92f 	bl	800e22c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffce:	480c      	ldr	r0, [pc, #48]	@ (8010000 <prvInitialiseTaskLists+0x70>)
 800ffd0:	f7fe f92c 	bl	800e22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffd4:	480b      	ldr	r0, [pc, #44]	@ (8010004 <prvInitialiseTaskLists+0x74>)
 800ffd6:	f7fe f929 	bl	800e22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffda:	4b0b      	ldr	r3, [pc, #44]	@ (8010008 <prvInitialiseTaskLists+0x78>)
 800ffdc:	4a05      	ldr	r2, [pc, #20]	@ (800fff4 <prvInitialiseTaskLists+0x64>)
 800ffde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	@ (801000c <prvInitialiseTaskLists+0x7c>)
 800ffe2:	4a05      	ldr	r2, [pc, #20]	@ (800fff8 <prvInitialiseTaskLists+0x68>)
 800ffe4:	601a      	str	r2, [r3, #0]
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	24004ae4 	.word	0x24004ae4
 800fff4:	24004f44 	.word	0x24004f44
 800fff8:	24004f58 	.word	0x24004f58
 800fffc:	24004f74 	.word	0x24004f74
 8010000:	24004f88 	.word	0x24004f88
 8010004:	24004fa0 	.word	0x24004fa0
 8010008:	24004f6c 	.word	0x24004f6c
 801000c:	24004f70 	.word	0x24004f70

08010010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010016:	e019      	b.n	801004c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010018:	f7fe faee 	bl	800e5f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801001c:	4b10      	ldr	r3, [pc, #64]	@ (8010060 <prvCheckTasksWaitingTermination+0x50>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3304      	adds	r3, #4
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe f989 	bl	800e340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801002e:	4b0d      	ldr	r3, [pc, #52]	@ (8010064 <prvCheckTasksWaitingTermination+0x54>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3b01      	subs	r3, #1
 8010034:	4a0b      	ldr	r2, [pc, #44]	@ (8010064 <prvCheckTasksWaitingTermination+0x54>)
 8010036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010038:	4b0b      	ldr	r3, [pc, #44]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3b01      	subs	r3, #1
 801003e:	4a0a      	ldr	r2, [pc, #40]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 8010040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010042:	f7fe fb0b 	bl	800e65c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f810 	bl	801006c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e1      	bne.n	8010018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	24004f88 	.word	0x24004f88
 8010064:	24004fb4 	.word	0x24004fb4
 8010068:	24004f9c 	.word	0x24004f9c

0801006c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	3354      	adds	r3, #84	@ 0x54
 8010078:	4618      	mov	r0, r3
 801007a:	f001 fdf3 	bl	8011c64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010084:	2b00      	cmp	r3, #0
 8010086:	d108      	bne.n	801009a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801008c:	4618      	mov	r0, r3
 801008e:	f7fd ffad 	bl	800dfec <vPortFree>
				vPortFree( pxTCB );
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7fd ffaa 	bl	800dfec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010098:	e019      	b.n	80100ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d103      	bne.n	80100ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7fd ffa1 	bl	800dfec <vPortFree>
	}
 80100aa:	e010      	b.n	80100ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	d00b      	beq.n	80100ce <prvDeleteTCB+0x62>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
}
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	e7fd      	b.n	80100ca <prvDeleteTCB+0x5e>
	}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
	...

080100d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100de:	4b0c      	ldr	r3, [pc, #48]	@ (8010110 <prvResetNextTaskUnblockTime+0x38>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d104      	bne.n	80100f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010114 <prvResetNextTaskUnblockTime+0x3c>)
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295
 80100ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100f0:	e008      	b.n	8010104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f2:	4b07      	ldr	r3, [pc, #28]	@ (8010110 <prvResetNextTaskUnblockTime+0x38>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	4a04      	ldr	r2, [pc, #16]	@ (8010114 <prvResetNextTaskUnblockTime+0x3c>)
 8010102:	6013      	str	r3, [r2, #0]
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	24004f6c 	.word	0x24004f6c
 8010114:	24004fd4 	.word	0x24004fd4

08010118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801011e:	4b0b      	ldr	r3, [pc, #44]	@ (801014c <xTaskGetSchedulerState+0x34>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d102      	bne.n	801012c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010126:	2301      	movs	r3, #1
 8010128:	607b      	str	r3, [r7, #4]
 801012a:	e008      	b.n	801013e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801012c:	4b08      	ldr	r3, [pc, #32]	@ (8010150 <xTaskGetSchedulerState+0x38>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d102      	bne.n	801013a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010134:	2302      	movs	r3, #2
 8010136:	607b      	str	r3, [r7, #4]
 8010138:	e001      	b.n	801013e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801013a:	2300      	movs	r3, #0
 801013c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801013e:	687b      	ldr	r3, [r7, #4]
	}
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	24004fc0 	.word	0x24004fc0
 8010150:	24004fdc 	.word	0x24004fdc

08010154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010160:	2300      	movs	r3, #0
 8010162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d058      	beq.n	801021c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801016a:	4b2f      	ldr	r3, [pc, #188]	@ (8010228 <xTaskPriorityDisinherit+0xd4>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	429a      	cmp	r2, r3
 8010172:	d00b      	beq.n	801018c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	60fb      	str	r3, [r7, #12]
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	e7fd      	b.n	8010188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10b      	bne.n	80101ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	60bb      	str	r3, [r7, #8]
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	e7fd      	b.n	80101a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101b0:	1e5a      	subs	r2, r3, #1
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101be:	429a      	cmp	r2, r3
 80101c0:	d02c      	beq.n	801021c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d128      	bne.n	801021c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	3304      	adds	r3, #4
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe f8b6 	bl	800e340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101ec:	4b0f      	ldr	r3, [pc, #60]	@ (801022c <xTaskPriorityDisinherit+0xd8>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d903      	bls.n	80101fc <xTaskPriorityDisinherit+0xa8>
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f8:	4a0c      	ldr	r2, [pc, #48]	@ (801022c <xTaskPriorityDisinherit+0xd8>)
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4a09      	ldr	r2, [pc, #36]	@ (8010230 <xTaskPriorityDisinherit+0xdc>)
 801020a:	441a      	add	r2, r3
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3304      	adds	r3, #4
 8010210:	4619      	mov	r1, r3
 8010212:	4610      	mov	r0, r2
 8010214:	f7fe f837 	bl	800e286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010218:	2301      	movs	r3, #1
 801021a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801021c:	697b      	ldr	r3, [r7, #20]
	}
 801021e:	4618      	mov	r0, r3
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	24004ae0 	.word	0x24004ae0
 801022c:	24004fbc 	.word	0x24004fbc
 8010230:	24004ae4 	.word	0x24004ae4

08010234 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801023e:	4b21      	ldr	r3, [pc, #132]	@ (80102c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010244:	4b20      	ldr	r3, [pc, #128]	@ (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3304      	adds	r3, #4
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe f878 	bl	800e340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010256:	d10a      	bne.n	801026e <prvAddCurrentTaskToDelayedList+0x3a>
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801025e:	4b1a      	ldr	r3, [pc, #104]	@ (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3304      	adds	r3, #4
 8010264:	4619      	mov	r1, r3
 8010266:	4819      	ldr	r0, [pc, #100]	@ (80102cc <prvAddCurrentTaskToDelayedList+0x98>)
 8010268:	f7fe f80d 	bl	800e286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801026c:	e026      	b.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4413      	add	r3, r2
 8010274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010276:	4b14      	ldr	r3, [pc, #80]	@ (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	68ba      	ldr	r2, [r7, #8]
 801027c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	429a      	cmp	r2, r3
 8010284:	d209      	bcs.n	801029a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010286:	4b12      	ldr	r3, [pc, #72]	@ (80102d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	4b0f      	ldr	r3, [pc, #60]	@ (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3304      	adds	r3, #4
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7fe f81b 	bl	800e2ce <vListInsert>
}
 8010298:	e010      	b.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801029a:	4b0e      	ldr	r3, [pc, #56]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	4b0a      	ldr	r3, [pc, #40]	@ (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3304      	adds	r3, #4
 80102a4:	4619      	mov	r1, r3
 80102a6:	4610      	mov	r0, r2
 80102a8:	f7fe f811 	bl	800e2ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102ac:	4b0a      	ldr	r3, [pc, #40]	@ (80102d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d202      	bcs.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102b6:	4a08      	ldr	r2, [pc, #32]	@ (80102d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	6013      	str	r3, [r2, #0]
}
 80102bc:	bf00      	nop
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	24004fb8 	.word	0x24004fb8
 80102c8:	24004ae0 	.word	0x24004ae0
 80102cc:	24004fa0 	.word	0x24004fa0
 80102d0:	24004f70 	.word	0x24004f70
 80102d4:	24004f6c 	.word	0x24004f6c
 80102d8:	24004fd4 	.word	0x24004fd4

080102dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b08a      	sub	sp, #40	@ 0x28
 80102e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102e6:	f000 fb13 	bl	8010910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102ea:	4b1d      	ldr	r3, [pc, #116]	@ (8010360 <xTimerCreateTimerTask+0x84>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d021      	beq.n	8010336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102fa:	1d3a      	adds	r2, r7, #4
 80102fc:	f107 0108 	add.w	r1, r7, #8
 8010300:	f107 030c 	add.w	r3, r7, #12
 8010304:	4618      	mov	r0, r3
 8010306:	f7fd fd89 	bl	800de1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801030a:	6879      	ldr	r1, [r7, #4]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	9202      	str	r2, [sp, #8]
 8010312:	9301      	str	r3, [sp, #4]
 8010314:	2302      	movs	r3, #2
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	2300      	movs	r3, #0
 801031a:	460a      	mov	r2, r1
 801031c:	4911      	ldr	r1, [pc, #68]	@ (8010364 <xTimerCreateTimerTask+0x88>)
 801031e:	4812      	ldr	r0, [pc, #72]	@ (8010368 <xTimerCreateTimerTask+0x8c>)
 8010320:	f7ff f890 	bl	800f444 <xTaskCreateStatic>
 8010324:	4603      	mov	r3, r0
 8010326:	4a11      	ldr	r2, [pc, #68]	@ (801036c <xTimerCreateTimerTask+0x90>)
 8010328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801032a:	4b10      	ldr	r3, [pc, #64]	@ (801036c <xTimerCreateTimerTask+0x90>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010332:	2301      	movs	r3, #1
 8010334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10b      	bne.n	8010354 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	613b      	str	r3, [r7, #16]
}
 801034e:	bf00      	nop
 8010350:	bf00      	nop
 8010352:	e7fd      	b.n	8010350 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010354:	697b      	ldr	r3, [r7, #20]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	24005010 	.word	0x24005010
 8010364:	08016dc8 	.word	0x08016dc8
 8010368:	080104a9 	.word	0x080104a9
 801036c:	24005014 	.word	0x24005014

08010370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801037e:	2300      	movs	r3, #0
 8010380:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10b      	bne.n	80103a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8010388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	623b      	str	r3, [r7, #32]
}
 801039a:	bf00      	nop
 801039c:	bf00      	nop
 801039e:	e7fd      	b.n	801039c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80103a0:	4b19      	ldr	r3, [pc, #100]	@ (8010408 <xTimerGenericCommand+0x98>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d02a      	beq.n	80103fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	2b05      	cmp	r3, #5
 80103b8:	dc18      	bgt.n	80103ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103ba:	f7ff fead 	bl	8010118 <xTaskGetSchedulerState>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	d109      	bne.n	80103d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103c4:	4b10      	ldr	r3, [pc, #64]	@ (8010408 <xTimerGenericCommand+0x98>)
 80103c6:	6818      	ldr	r0, [r3, #0]
 80103c8:	f107 0110 	add.w	r1, r7, #16
 80103cc:	2300      	movs	r3, #0
 80103ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103d0:	f7fe fbc6 	bl	800eb60 <xQueueGenericSend>
 80103d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80103d6:	e012      	b.n	80103fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010408 <xTimerGenericCommand+0x98>)
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	f107 0110 	add.w	r1, r7, #16
 80103e0:	2300      	movs	r3, #0
 80103e2:	2200      	movs	r2, #0
 80103e4:	f7fe fbbc 	bl	800eb60 <xQueueGenericSend>
 80103e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80103ea:	e008      	b.n	80103fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103ec:	4b06      	ldr	r3, [pc, #24]	@ (8010408 <xTimerGenericCommand+0x98>)
 80103ee:	6818      	ldr	r0, [r3, #0]
 80103f0:	f107 0110 	add.w	r1, r7, #16
 80103f4:	2300      	movs	r3, #0
 80103f6:	683a      	ldr	r2, [r7, #0]
 80103f8:	f7fe fcb4 	bl	800ed64 <xQueueGenericSendFromISR>
 80103fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010400:	4618      	mov	r0, r3
 8010402:	3728      	adds	r7, #40	@ 0x28
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	24005010 	.word	0x24005010

0801040c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af02      	add	r7, sp, #8
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010416:	4b23      	ldr	r3, [pc, #140]	@ (80104a4 <prvProcessExpiredTimer+0x98>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	3304      	adds	r3, #4
 8010424:	4618      	mov	r0, r3
 8010426:	f7fd ff8b 	bl	800e340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010430:	f003 0304 	and.w	r3, r3, #4
 8010434:	2b00      	cmp	r3, #0
 8010436:	d023      	beq.n	8010480 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	699a      	ldr	r2, [r3, #24]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	18d1      	adds	r1, r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	683a      	ldr	r2, [r7, #0]
 8010444:	6978      	ldr	r0, [r7, #20]
 8010446:	f000 f8d5 	bl	80105f4 <prvInsertTimerInActiveList>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d020      	beq.n	8010492 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010450:	2300      	movs	r3, #0
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	2300      	movs	r3, #0
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	2100      	movs	r1, #0
 801045a:	6978      	ldr	r0, [r7, #20]
 801045c:	f7ff ff88 	bl	8010370 <xTimerGenericCommand>
 8010460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d114      	bne.n	8010492 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801046c:	f383 8811 	msr	BASEPRI, r3
 8010470:	f3bf 8f6f 	isb	sy
 8010474:	f3bf 8f4f 	dsb	sy
 8010478:	60fb      	str	r3, [r7, #12]
}
 801047a:	bf00      	nop
 801047c:	bf00      	nop
 801047e:	e7fd      	b.n	801047c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010486:	f023 0301 	bic.w	r3, r3, #1
 801048a:	b2da      	uxtb	r2, r3
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	6a1b      	ldr	r3, [r3, #32]
 8010496:	6978      	ldr	r0, [r7, #20]
 8010498:	4798      	blx	r3
}
 801049a:	bf00      	nop
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	24005008 	.word	0x24005008

080104a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104b0:	f107 0308 	add.w	r3, r7, #8
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 f859 	bl	801056c <prvGetNextExpireTime>
 80104ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	4619      	mov	r1, r3
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f000 f805 	bl	80104d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104c6:	f000 f8d7 	bl	8010678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104ca:	bf00      	nop
 80104cc:	e7f0      	b.n	80104b0 <prvTimerTask+0x8>
	...

080104d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104da:	f7ff fa17 	bl	800f90c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104de:	f107 0308 	add.w	r3, r7, #8
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 f866 	bl	80105b4 <prvSampleTimeNow>
 80104e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d130      	bne.n	8010552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <prvProcessTimerOrBlockTask+0x3c>
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d806      	bhi.n	801050c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104fe:	f7ff fa13 	bl	800f928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010502:	68f9      	ldr	r1, [r7, #12]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ff81 	bl	801040c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801050a:	e024      	b.n	8010556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d008      	beq.n	8010524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010512:	4b13      	ldr	r3, [pc, #76]	@ (8010560 <prvProcessTimerOrBlockTask+0x90>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <prvProcessTimerOrBlockTask+0x50>
 801051c:	2301      	movs	r3, #1
 801051e:	e000      	b.n	8010522 <prvProcessTimerOrBlockTask+0x52>
 8010520:	2300      	movs	r3, #0
 8010522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010524:	4b0f      	ldr	r3, [pc, #60]	@ (8010564 <prvProcessTimerOrBlockTask+0x94>)
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	4619      	mov	r1, r3
 8010532:	f7fe ff53 	bl	800f3dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010536:	f7ff f9f7 	bl	800f928 <xTaskResumeAll>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10a      	bne.n	8010556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010540:	4b09      	ldr	r3, [pc, #36]	@ (8010568 <prvProcessTimerOrBlockTask+0x98>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	f3bf 8f6f 	isb	sy
}
 8010550:	e001      	b.n	8010556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010552:	f7ff f9e9 	bl	800f928 <xTaskResumeAll>
}
 8010556:	bf00      	nop
 8010558:	3710      	adds	r7, #16
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	2400500c 	.word	0x2400500c
 8010564:	24005010 	.word	0x24005010
 8010568:	e000ed04 	.word	0xe000ed04

0801056c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010574:	4b0e      	ldr	r3, [pc, #56]	@ (80105b0 <prvGetNextExpireTime+0x44>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d101      	bne.n	8010582 <prvGetNextExpireTime+0x16>
 801057e:	2201      	movs	r2, #1
 8010580:	e000      	b.n	8010584 <prvGetNextExpireTime+0x18>
 8010582:	2200      	movs	r2, #0
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d105      	bne.n	801059c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010590:	4b07      	ldr	r3, [pc, #28]	@ (80105b0 <prvGetNextExpireTime+0x44>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	60fb      	str	r3, [r7, #12]
 801059a:	e001      	b.n	80105a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801059c:	2300      	movs	r3, #0
 801059e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80105a0:	68fb      	ldr	r3, [r7, #12]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3714      	adds	r7, #20
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	24005008 	.word	0x24005008

080105b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105bc:	f7ff fa52 	bl	800fa64 <xTaskGetTickCount>
 80105c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105c2:	4b0b      	ldr	r3, [pc, #44]	@ (80105f0 <prvSampleTimeNow+0x3c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d205      	bcs.n	80105d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105cc:	f000 f93a 	bl	8010844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	e002      	b.n	80105de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105de:	4a04      	ldr	r2, [pc, #16]	@ (80105f0 <prvSampleTimeNow+0x3c>)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105e4:	68fb      	ldr	r3, [r7, #12]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	24005018 	.word	0x24005018

080105f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b086      	sub	sp, #24
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010602:	2300      	movs	r3, #0
 8010604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	429a      	cmp	r2, r3
 8010618:	d812      	bhi.n	8010640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	1ad2      	subs	r2, r2, r3
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	429a      	cmp	r2, r3
 8010626:	d302      	bcc.n	801062e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010628:	2301      	movs	r3, #1
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	e01b      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801062e:	4b10      	ldr	r3, [pc, #64]	@ (8010670 <prvInsertTimerInActiveList+0x7c>)
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	3304      	adds	r3, #4
 8010636:	4619      	mov	r1, r3
 8010638:	4610      	mov	r0, r2
 801063a:	f7fd fe48 	bl	800e2ce <vListInsert>
 801063e:	e012      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	429a      	cmp	r2, r3
 8010646:	d206      	bcs.n	8010656 <prvInsertTimerInActiveList+0x62>
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	429a      	cmp	r2, r3
 801064e:	d302      	bcc.n	8010656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	617b      	str	r3, [r7, #20]
 8010654:	e007      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010656:	4b07      	ldr	r3, [pc, #28]	@ (8010674 <prvInsertTimerInActiveList+0x80>)
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3304      	adds	r3, #4
 801065e:	4619      	mov	r1, r3
 8010660:	4610      	mov	r0, r2
 8010662:	f7fd fe34 	bl	800e2ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010666:	697b      	ldr	r3, [r7, #20]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3718      	adds	r7, #24
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	2400500c 	.word	0x2400500c
 8010674:	24005008 	.word	0x24005008

08010678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08e      	sub	sp, #56	@ 0x38
 801067c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801067e:	e0ce      	b.n	801081e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	da19      	bge.n	80106ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010686:	1d3b      	adds	r3, r7, #4
 8010688:	3304      	adds	r3, #4
 801068a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801068c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10b      	bne.n	80106aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	61fb      	str	r3, [r7, #28]
}
 80106a4:	bf00      	nop
 80106a6:	bf00      	nop
 80106a8:	e7fd      	b.n	80106a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80106aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106b0:	6850      	ldr	r0, [r2, #4]
 80106b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106b4:	6892      	ldr	r2, [r2, #8]
 80106b6:	4611      	mov	r1, r2
 80106b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f2c0 80ae 	blt.w	801081e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c8:	695b      	ldr	r3, [r3, #20]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d004      	beq.n	80106d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d0:	3304      	adds	r3, #4
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fd fe34 	bl	800e340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106d8:	463b      	mov	r3, r7
 80106da:	4618      	mov	r0, r3
 80106dc:	f7ff ff6a 	bl	80105b4 <prvSampleTimeNow>
 80106e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b09      	cmp	r3, #9
 80106e6:	f200 8097 	bhi.w	8010818 <prvProcessReceivedCommands+0x1a0>
 80106ea:	a201      	add	r2, pc, #4	@ (adr r2, 80106f0 <prvProcessReceivedCommands+0x78>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010719 	.word	0x08010719
 80106f4:	08010719 	.word	0x08010719
 80106f8:	08010719 	.word	0x08010719
 80106fc:	0801078f 	.word	0x0801078f
 8010700:	080107a3 	.word	0x080107a3
 8010704:	080107ef 	.word	0x080107ef
 8010708:	08010719 	.word	0x08010719
 801070c:	08010719 	.word	0x08010719
 8010710:	0801078f 	.word	0x0801078f
 8010714:	080107a3 	.word	0x080107a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801071a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801071e:	f043 0301 	orr.w	r3, r3, #1
 8010722:	b2da      	uxtb	r2, r3
 8010724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801072e:	699b      	ldr	r3, [r3, #24]
 8010730:	18d1      	adds	r1, r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010738:	f7ff ff5c 	bl	80105f4 <prvInsertTimerInActiveList>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d06c      	beq.n	801081c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010748:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801074a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801074c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	2b00      	cmp	r3, #0
 8010756:	d061      	beq.n	801081c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	441a      	add	r2, r3
 8010760:	2300      	movs	r3, #0
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	2300      	movs	r3, #0
 8010766:	2100      	movs	r1, #0
 8010768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801076a:	f7ff fe01 	bl	8010370 <xTimerGenericCommand>
 801076e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d152      	bne.n	801081c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077a:	f383 8811 	msr	BASEPRI, r3
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	f3bf 8f4f 	dsb	sy
 8010786:	61bb      	str	r3, [r7, #24]
}
 8010788:	bf00      	nop
 801078a:	bf00      	nop
 801078c:	e7fd      	b.n	801078a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801078e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010794:	f023 0301 	bic.w	r3, r3, #1
 8010798:	b2da      	uxtb	r2, r3
 801079a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80107a0:	e03d      	b.n	801081e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107a8:	f043 0301 	orr.w	r3, r3, #1
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d10b      	bne.n	80107da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80107c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c6:	f383 8811 	msr	BASEPRI, r3
 80107ca:	f3bf 8f6f 	isb	sy
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	617b      	str	r3, [r7, #20]
}
 80107d4:	bf00      	nop
 80107d6:	bf00      	nop
 80107d8:	e7fd      	b.n	80107d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107dc:	699a      	ldr	r2, [r3, #24]
 80107de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e0:	18d1      	adds	r1, r2, r3
 80107e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107e8:	f7ff ff04 	bl	80105f4 <prvInsertTimerInActiveList>
					break;
 80107ec:	e017      	b.n	801081e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107f4:	f003 0302 	and.w	r3, r3, #2
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d103      	bne.n	8010804 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80107fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107fe:	f7fd fbf5 	bl	800dfec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010802:	e00c      	b.n	801081e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801080a:	f023 0301 	bic.w	r3, r3, #1
 801080e:	b2da      	uxtb	r2, r3
 8010810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010816:	e002      	b.n	801081e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010818:	bf00      	nop
 801081a:	e000      	b.n	801081e <prvProcessReceivedCommands+0x1a6>
					break;
 801081c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801081e:	4b08      	ldr	r3, [pc, #32]	@ (8010840 <prvProcessReceivedCommands+0x1c8>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	1d39      	adds	r1, r7, #4
 8010824:	2200      	movs	r2, #0
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe fb3a 	bl	800eea0 <xQueueReceive>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	f47f af26 	bne.w	8010680 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010834:	bf00      	nop
 8010836:	bf00      	nop
 8010838:	3730      	adds	r7, #48	@ 0x30
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	24005010 	.word	0x24005010

08010844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b088      	sub	sp, #32
 8010848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801084a:	e049      	b.n	80108e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801084c:	4b2e      	ldr	r3, [pc, #184]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010856:	4b2c      	ldr	r3, [pc, #176]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3304      	adds	r3, #4
 8010864:	4618      	mov	r0, r3
 8010866:	f7fd fd6b 	bl	800e340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010878:	f003 0304 	and.w	r3, r3, #4
 801087c:	2b00      	cmp	r3, #0
 801087e:	d02f      	beq.n	80108e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	699b      	ldr	r3, [r3, #24]
 8010884:	693a      	ldr	r2, [r7, #16]
 8010886:	4413      	add	r3, r2
 8010888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	429a      	cmp	r2, r3
 8010890:	d90e      	bls.n	80108b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801089e:	4b1a      	ldr	r3, [pc, #104]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3304      	adds	r3, #4
 80108a6:	4619      	mov	r1, r3
 80108a8:	4610      	mov	r0, r2
 80108aa:	f7fd fd10 	bl	800e2ce <vListInsert>
 80108ae:	e017      	b.n	80108e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108b0:	2300      	movs	r3, #0
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	2300      	movs	r3, #0
 80108b6:	693a      	ldr	r2, [r7, #16]
 80108b8:	2100      	movs	r1, #0
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f7ff fd58 	bl	8010370 <xTimerGenericCommand>
 80108c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d10b      	bne.n	80108e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	603b      	str	r3, [r7, #0]
}
 80108da:	bf00      	nop
 80108dc:	bf00      	nop
 80108de:	e7fd      	b.n	80108dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108e0:	4b09      	ldr	r3, [pc, #36]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1b0      	bne.n	801084c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108ea:	4b07      	ldr	r3, [pc, #28]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108f0:	4b06      	ldr	r3, [pc, #24]	@ (801090c <prvSwitchTimerLists+0xc8>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a04      	ldr	r2, [pc, #16]	@ (8010908 <prvSwitchTimerLists+0xc4>)
 80108f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108f8:	4a04      	ldr	r2, [pc, #16]	@ (801090c <prvSwitchTimerLists+0xc8>)
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	6013      	str	r3, [r2, #0]
}
 80108fe:	bf00      	nop
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	24005008 	.word	0x24005008
 801090c:	2400500c 	.word	0x2400500c

08010910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010916:	f7fd fe6f 	bl	800e5f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801091a:	4b15      	ldr	r3, [pc, #84]	@ (8010970 <prvCheckForValidListAndQueue+0x60>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d120      	bne.n	8010964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010922:	4814      	ldr	r0, [pc, #80]	@ (8010974 <prvCheckForValidListAndQueue+0x64>)
 8010924:	f7fd fc82 	bl	800e22c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010928:	4813      	ldr	r0, [pc, #76]	@ (8010978 <prvCheckForValidListAndQueue+0x68>)
 801092a:	f7fd fc7f 	bl	800e22c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801092e:	4b13      	ldr	r3, [pc, #76]	@ (801097c <prvCheckForValidListAndQueue+0x6c>)
 8010930:	4a10      	ldr	r2, [pc, #64]	@ (8010974 <prvCheckForValidListAndQueue+0x64>)
 8010932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010934:	4b12      	ldr	r3, [pc, #72]	@ (8010980 <prvCheckForValidListAndQueue+0x70>)
 8010936:	4a10      	ldr	r2, [pc, #64]	@ (8010978 <prvCheckForValidListAndQueue+0x68>)
 8010938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801093a:	2300      	movs	r3, #0
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	4b11      	ldr	r3, [pc, #68]	@ (8010984 <prvCheckForValidListAndQueue+0x74>)
 8010940:	4a11      	ldr	r2, [pc, #68]	@ (8010988 <prvCheckForValidListAndQueue+0x78>)
 8010942:	2110      	movs	r1, #16
 8010944:	200a      	movs	r0, #10
 8010946:	f7fd ffe3 	bl	800e910 <xQueueGenericCreateStatic>
 801094a:	4603      	mov	r3, r0
 801094c:	4a08      	ldr	r2, [pc, #32]	@ (8010970 <prvCheckForValidListAndQueue+0x60>)
 801094e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010950:	4b07      	ldr	r3, [pc, #28]	@ (8010970 <prvCheckForValidListAndQueue+0x60>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d005      	beq.n	8010964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010958:	4b05      	ldr	r3, [pc, #20]	@ (8010970 <prvCheckForValidListAndQueue+0x60>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	490b      	ldr	r1, [pc, #44]	@ (801098c <prvCheckForValidListAndQueue+0x7c>)
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe fd12 	bl	800f388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010964:	f7fd fe7a 	bl	800e65c <vPortExitCritical>
}
 8010968:	bf00      	nop
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	24005010 	.word	0x24005010
 8010974:	24004fe0 	.word	0x24004fe0
 8010978:	24004ff4 	.word	0x24004ff4
 801097c:	24005008 	.word	0x24005008
 8010980:	2400500c 	.word	0x2400500c
 8010984:	240050bc 	.word	0x240050bc
 8010988:	2400501c 	.word	0x2400501c
 801098c:	08016dd0 	.word	0x08016dd0

08010990 <__cvt>:
 8010990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010992:	ed2d 8b02 	vpush	{d8}
 8010996:	eeb0 8b40 	vmov.f64	d8, d0
 801099a:	b085      	sub	sp, #20
 801099c:	4617      	mov	r7, r2
 801099e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80109a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109a2:	ee18 2a90 	vmov	r2, s17
 80109a6:	f025 0520 	bic.w	r5, r5, #32
 80109aa:	2a00      	cmp	r2, #0
 80109ac:	bfb6      	itet	lt
 80109ae:	222d      	movlt	r2, #45	@ 0x2d
 80109b0:	2200      	movge	r2, #0
 80109b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80109b6:	2d46      	cmp	r5, #70	@ 0x46
 80109b8:	460c      	mov	r4, r1
 80109ba:	701a      	strb	r2, [r3, #0]
 80109bc:	d004      	beq.n	80109c8 <__cvt+0x38>
 80109be:	2d45      	cmp	r5, #69	@ 0x45
 80109c0:	d100      	bne.n	80109c4 <__cvt+0x34>
 80109c2:	3401      	adds	r4, #1
 80109c4:	2102      	movs	r1, #2
 80109c6:	e000      	b.n	80109ca <__cvt+0x3a>
 80109c8:	2103      	movs	r1, #3
 80109ca:	ab03      	add	r3, sp, #12
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	ab02      	add	r3, sp, #8
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	4622      	mov	r2, r4
 80109d4:	4633      	mov	r3, r6
 80109d6:	eeb0 0b48 	vmov.f64	d0, d8
 80109da:	f001 fa99 	bl	8011f10 <_dtoa_r>
 80109de:	2d47      	cmp	r5, #71	@ 0x47
 80109e0:	d114      	bne.n	8010a0c <__cvt+0x7c>
 80109e2:	07fb      	lsls	r3, r7, #31
 80109e4:	d50a      	bpl.n	80109fc <__cvt+0x6c>
 80109e6:	1902      	adds	r2, r0, r4
 80109e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80109ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f0:	bf08      	it	eq
 80109f2:	9203      	streq	r2, [sp, #12]
 80109f4:	2130      	movs	r1, #48	@ 0x30
 80109f6:	9b03      	ldr	r3, [sp, #12]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d319      	bcc.n	8010a30 <__cvt+0xa0>
 80109fc:	9b03      	ldr	r3, [sp, #12]
 80109fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a00:	1a1b      	subs	r3, r3, r0
 8010a02:	6013      	str	r3, [r2, #0]
 8010a04:	b005      	add	sp, #20
 8010a06:	ecbd 8b02 	vpop	{d8}
 8010a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a0c:	2d46      	cmp	r5, #70	@ 0x46
 8010a0e:	eb00 0204 	add.w	r2, r0, r4
 8010a12:	d1e9      	bne.n	80109e8 <__cvt+0x58>
 8010a14:	7803      	ldrb	r3, [r0, #0]
 8010a16:	2b30      	cmp	r3, #48	@ 0x30
 8010a18:	d107      	bne.n	8010a2a <__cvt+0x9a>
 8010a1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a22:	bf1c      	itt	ne
 8010a24:	f1c4 0401 	rsbne	r4, r4, #1
 8010a28:	6034      	strne	r4, [r6, #0]
 8010a2a:	6833      	ldr	r3, [r6, #0]
 8010a2c:	441a      	add	r2, r3
 8010a2e:	e7db      	b.n	80109e8 <__cvt+0x58>
 8010a30:	1c5c      	adds	r4, r3, #1
 8010a32:	9403      	str	r4, [sp, #12]
 8010a34:	7019      	strb	r1, [r3, #0]
 8010a36:	e7de      	b.n	80109f6 <__cvt+0x66>

08010a38 <__exponent>:
 8010a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a3a:	2900      	cmp	r1, #0
 8010a3c:	bfba      	itte	lt
 8010a3e:	4249      	neglt	r1, r1
 8010a40:	232d      	movlt	r3, #45	@ 0x2d
 8010a42:	232b      	movge	r3, #43	@ 0x2b
 8010a44:	2909      	cmp	r1, #9
 8010a46:	7002      	strb	r2, [r0, #0]
 8010a48:	7043      	strb	r3, [r0, #1]
 8010a4a:	dd29      	ble.n	8010aa0 <__exponent+0x68>
 8010a4c:	f10d 0307 	add.w	r3, sp, #7
 8010a50:	461d      	mov	r5, r3
 8010a52:	270a      	movs	r7, #10
 8010a54:	461a      	mov	r2, r3
 8010a56:	fbb1 f6f7 	udiv	r6, r1, r7
 8010a5a:	fb07 1416 	mls	r4, r7, r6, r1
 8010a5e:	3430      	adds	r4, #48	@ 0x30
 8010a60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010a64:	460c      	mov	r4, r1
 8010a66:	2c63      	cmp	r4, #99	@ 0x63
 8010a68:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	dcf1      	bgt.n	8010a54 <__exponent+0x1c>
 8010a70:	3130      	adds	r1, #48	@ 0x30
 8010a72:	1e94      	subs	r4, r2, #2
 8010a74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a78:	1c41      	adds	r1, r0, #1
 8010a7a:	4623      	mov	r3, r4
 8010a7c:	42ab      	cmp	r3, r5
 8010a7e:	d30a      	bcc.n	8010a96 <__exponent+0x5e>
 8010a80:	f10d 0309 	add.w	r3, sp, #9
 8010a84:	1a9b      	subs	r3, r3, r2
 8010a86:	42ac      	cmp	r4, r5
 8010a88:	bf88      	it	hi
 8010a8a:	2300      	movhi	r3, #0
 8010a8c:	3302      	adds	r3, #2
 8010a8e:	4403      	add	r3, r0
 8010a90:	1a18      	subs	r0, r3, r0
 8010a92:	b003      	add	sp, #12
 8010a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010a9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010a9e:	e7ed      	b.n	8010a7c <__exponent+0x44>
 8010aa0:	2330      	movs	r3, #48	@ 0x30
 8010aa2:	3130      	adds	r1, #48	@ 0x30
 8010aa4:	7083      	strb	r3, [r0, #2]
 8010aa6:	70c1      	strb	r1, [r0, #3]
 8010aa8:	1d03      	adds	r3, r0, #4
 8010aaa:	e7f1      	b.n	8010a90 <__exponent+0x58>
 8010aac:	0000      	movs	r0, r0
	...

08010ab0 <_printf_float>:
 8010ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab4:	b08d      	sub	sp, #52	@ 0x34
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010abc:	4616      	mov	r6, r2
 8010abe:	461f      	mov	r7, r3
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	f001 f8bb 	bl	8011c3c <_localeconv_r>
 8010ac6:	f8d0 b000 	ldr.w	fp, [r0]
 8010aca:	4658      	mov	r0, fp
 8010acc:	f7ef fc58 	bl	8000380 <strlen>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ad8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010adc:	6822      	ldr	r2, [r4, #0]
 8010ade:	9005      	str	r0, [sp, #20]
 8010ae0:	3307      	adds	r3, #7
 8010ae2:	f023 0307 	bic.w	r3, r3, #7
 8010ae6:	f103 0108 	add.w	r1, r3, #8
 8010aea:	f8c8 1000 	str.w	r1, [r8]
 8010aee:	ed93 0b00 	vldr	d0, [r3]
 8010af2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010d50 <_printf_float+0x2a0>
 8010af6:	eeb0 7bc0 	vabs.f64	d7, d0
 8010afa:	eeb4 7b46 	vcmp.f64	d7, d6
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010b06:	dd24      	ble.n	8010b52 <_printf_float+0xa2>
 8010b08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	d502      	bpl.n	8010b18 <_printf_float+0x68>
 8010b12:	232d      	movs	r3, #45	@ 0x2d
 8010b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b18:	498f      	ldr	r1, [pc, #572]	@ (8010d58 <_printf_float+0x2a8>)
 8010b1a:	4b90      	ldr	r3, [pc, #576]	@ (8010d5c <_printf_float+0x2ac>)
 8010b1c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010b20:	bf94      	ite	ls
 8010b22:	4688      	movls	r8, r1
 8010b24:	4698      	movhi	r8, r3
 8010b26:	f022 0204 	bic.w	r2, r2, #4
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	6123      	str	r3, [r4, #16]
 8010b2e:	6022      	str	r2, [r4, #0]
 8010b30:	f04f 0a00 	mov.w	sl, #0
 8010b34:	9700      	str	r7, [sp, #0]
 8010b36:	4633      	mov	r3, r6
 8010b38:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f000 f9d1 	bl	8010ee4 <_printf_common>
 8010b42:	3001      	adds	r0, #1
 8010b44:	f040 8089 	bne.w	8010c5a <_printf_float+0x1aa>
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	b00d      	add	sp, #52	@ 0x34
 8010b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b52:	eeb4 0b40 	vcmp.f64	d0, d0
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	d709      	bvc.n	8010b70 <_printf_float+0xc0>
 8010b5c:	ee10 3a90 	vmov	r3, s1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	bfbc      	itt	lt
 8010b64:	232d      	movlt	r3, #45	@ 0x2d
 8010b66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010b6a:	497d      	ldr	r1, [pc, #500]	@ (8010d60 <_printf_float+0x2b0>)
 8010b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8010d64 <_printf_float+0x2b4>)
 8010b6e:	e7d5      	b.n	8010b1c <_printf_float+0x6c>
 8010b70:	6863      	ldr	r3, [r4, #4]
 8010b72:	1c59      	adds	r1, r3, #1
 8010b74:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010b78:	d139      	bne.n	8010bee <_printf_float+0x13e>
 8010b7a:	2306      	movs	r3, #6
 8010b7c:	6063      	str	r3, [r4, #4]
 8010b7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010b82:	2300      	movs	r3, #0
 8010b84:	6022      	str	r2, [r4, #0]
 8010b86:	9303      	str	r3, [sp, #12]
 8010b88:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010b8e:	ab09      	add	r3, sp, #36	@ 0x24
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	6861      	ldr	r1, [r4, #4]
 8010b94:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7ff fef9 	bl	8010990 <__cvt>
 8010b9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010ba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ba4:	4680      	mov	r8, r0
 8010ba6:	d129      	bne.n	8010bfc <_printf_float+0x14c>
 8010ba8:	1cc8      	adds	r0, r1, #3
 8010baa:	db02      	blt.n	8010bb2 <_printf_float+0x102>
 8010bac:	6863      	ldr	r3, [r4, #4]
 8010bae:	4299      	cmp	r1, r3
 8010bb0:	dd41      	ble.n	8010c36 <_printf_float+0x186>
 8010bb2:	f1a9 0902 	sub.w	r9, r9, #2
 8010bb6:	fa5f f989 	uxtb.w	r9, r9
 8010bba:	3901      	subs	r1, #1
 8010bbc:	464a      	mov	r2, r9
 8010bbe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8010bc4:	f7ff ff38 	bl	8010a38 <__exponent>
 8010bc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bca:	1813      	adds	r3, r2, r0
 8010bcc:	2a01      	cmp	r2, #1
 8010bce:	4682      	mov	sl, r0
 8010bd0:	6123      	str	r3, [r4, #16]
 8010bd2:	dc02      	bgt.n	8010bda <_printf_float+0x12a>
 8010bd4:	6822      	ldr	r2, [r4, #0]
 8010bd6:	07d2      	lsls	r2, r2, #31
 8010bd8:	d501      	bpl.n	8010bde <_printf_float+0x12e>
 8010bda:	3301      	adds	r3, #1
 8010bdc:	6123      	str	r3, [r4, #16]
 8010bde:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d0a6      	beq.n	8010b34 <_printf_float+0x84>
 8010be6:	232d      	movs	r3, #45	@ 0x2d
 8010be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bec:	e7a2      	b.n	8010b34 <_printf_float+0x84>
 8010bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010bf2:	d1c4      	bne.n	8010b7e <_printf_float+0xce>
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d1c2      	bne.n	8010b7e <_printf_float+0xce>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e7bf      	b.n	8010b7c <_printf_float+0xcc>
 8010bfc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010c00:	d9db      	bls.n	8010bba <_printf_float+0x10a>
 8010c02:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010c06:	d118      	bne.n	8010c3a <_printf_float+0x18a>
 8010c08:	2900      	cmp	r1, #0
 8010c0a:	6863      	ldr	r3, [r4, #4]
 8010c0c:	dd0b      	ble.n	8010c26 <_printf_float+0x176>
 8010c0e:	6121      	str	r1, [r4, #16]
 8010c10:	b913      	cbnz	r3, 8010c18 <_printf_float+0x168>
 8010c12:	6822      	ldr	r2, [r4, #0]
 8010c14:	07d0      	lsls	r0, r2, #31
 8010c16:	d502      	bpl.n	8010c1e <_printf_float+0x16e>
 8010c18:	3301      	adds	r3, #1
 8010c1a:	440b      	add	r3, r1
 8010c1c:	6123      	str	r3, [r4, #16]
 8010c1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010c20:	f04f 0a00 	mov.w	sl, #0
 8010c24:	e7db      	b.n	8010bde <_printf_float+0x12e>
 8010c26:	b913      	cbnz	r3, 8010c2e <_printf_float+0x17e>
 8010c28:	6822      	ldr	r2, [r4, #0]
 8010c2a:	07d2      	lsls	r2, r2, #31
 8010c2c:	d501      	bpl.n	8010c32 <_printf_float+0x182>
 8010c2e:	3302      	adds	r3, #2
 8010c30:	e7f4      	b.n	8010c1c <_printf_float+0x16c>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e7f2      	b.n	8010c1c <_printf_float+0x16c>
 8010c36:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8010c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c3c:	4299      	cmp	r1, r3
 8010c3e:	db05      	blt.n	8010c4c <_printf_float+0x19c>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	6121      	str	r1, [r4, #16]
 8010c44:	07d8      	lsls	r0, r3, #31
 8010c46:	d5ea      	bpl.n	8010c1e <_printf_float+0x16e>
 8010c48:	1c4b      	adds	r3, r1, #1
 8010c4a:	e7e7      	b.n	8010c1c <_printf_float+0x16c>
 8010c4c:	2900      	cmp	r1, #0
 8010c4e:	bfd4      	ite	le
 8010c50:	f1c1 0202 	rsble	r2, r1, #2
 8010c54:	2201      	movgt	r2, #1
 8010c56:	4413      	add	r3, r2
 8010c58:	e7e0      	b.n	8010c1c <_printf_float+0x16c>
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	055a      	lsls	r2, r3, #21
 8010c5e:	d407      	bmi.n	8010c70 <_printf_float+0x1c0>
 8010c60:	6923      	ldr	r3, [r4, #16]
 8010c62:	4642      	mov	r2, r8
 8010c64:	4631      	mov	r1, r6
 8010c66:	4628      	mov	r0, r5
 8010c68:	47b8      	blx	r7
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d12a      	bne.n	8010cc4 <_printf_float+0x214>
 8010c6e:	e76b      	b.n	8010b48 <_printf_float+0x98>
 8010c70:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010c74:	f240 80e0 	bls.w	8010e38 <_printf_float+0x388>
 8010c78:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010c7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c84:	d133      	bne.n	8010cee <_printf_float+0x23e>
 8010c86:	4a38      	ldr	r2, [pc, #224]	@ (8010d68 <_printf_float+0x2b8>)
 8010c88:	2301      	movs	r3, #1
 8010c8a:	4631      	mov	r1, r6
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	47b8      	blx	r7
 8010c90:	3001      	adds	r0, #1
 8010c92:	f43f af59 	beq.w	8010b48 <_printf_float+0x98>
 8010c96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010c9a:	4543      	cmp	r3, r8
 8010c9c:	db02      	blt.n	8010ca4 <_printf_float+0x1f4>
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	07d8      	lsls	r0, r3, #31
 8010ca2:	d50f      	bpl.n	8010cc4 <_printf_float+0x214>
 8010ca4:	9b05      	ldr	r3, [sp, #20]
 8010ca6:	465a      	mov	r2, fp
 8010ca8:	4631      	mov	r1, r6
 8010caa:	4628      	mov	r0, r5
 8010cac:	47b8      	blx	r7
 8010cae:	3001      	adds	r0, #1
 8010cb0:	f43f af4a 	beq.w	8010b48 <_printf_float+0x98>
 8010cb4:	f04f 0900 	mov.w	r9, #0
 8010cb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8010cbc:	f104 0a1a 	add.w	sl, r4, #26
 8010cc0:	45c8      	cmp	r8, r9
 8010cc2:	dc09      	bgt.n	8010cd8 <_printf_float+0x228>
 8010cc4:	6823      	ldr	r3, [r4, #0]
 8010cc6:	079b      	lsls	r3, r3, #30
 8010cc8:	f100 8107 	bmi.w	8010eda <_printf_float+0x42a>
 8010ccc:	68e0      	ldr	r0, [r4, #12]
 8010cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cd0:	4298      	cmp	r0, r3
 8010cd2:	bfb8      	it	lt
 8010cd4:	4618      	movlt	r0, r3
 8010cd6:	e739      	b.n	8010b4c <_printf_float+0x9c>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4652      	mov	r2, sl
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4628      	mov	r0, r5
 8010ce0:	47b8      	blx	r7
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	f43f af30 	beq.w	8010b48 <_printf_float+0x98>
 8010ce8:	f109 0901 	add.w	r9, r9, #1
 8010cec:	e7e8      	b.n	8010cc0 <_printf_float+0x210>
 8010cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dc3b      	bgt.n	8010d6c <_printf_float+0x2bc>
 8010cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8010d68 <_printf_float+0x2b8>)
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	4631      	mov	r1, r6
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	47b8      	blx	r7
 8010cfe:	3001      	adds	r0, #1
 8010d00:	f43f af22 	beq.w	8010b48 <_printf_float+0x98>
 8010d04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010d08:	ea59 0303 	orrs.w	r3, r9, r3
 8010d0c:	d102      	bne.n	8010d14 <_printf_float+0x264>
 8010d0e:	6823      	ldr	r3, [r4, #0]
 8010d10:	07d9      	lsls	r1, r3, #31
 8010d12:	d5d7      	bpl.n	8010cc4 <_printf_float+0x214>
 8010d14:	9b05      	ldr	r3, [sp, #20]
 8010d16:	465a      	mov	r2, fp
 8010d18:	4631      	mov	r1, r6
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	47b8      	blx	r7
 8010d1e:	3001      	adds	r0, #1
 8010d20:	f43f af12 	beq.w	8010b48 <_printf_float+0x98>
 8010d24:	f04f 0a00 	mov.w	sl, #0
 8010d28:	f104 0b1a 	add.w	fp, r4, #26
 8010d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d2e:	425b      	negs	r3, r3
 8010d30:	4553      	cmp	r3, sl
 8010d32:	dc01      	bgt.n	8010d38 <_printf_float+0x288>
 8010d34:	464b      	mov	r3, r9
 8010d36:	e794      	b.n	8010c62 <_printf_float+0x1b2>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	465a      	mov	r2, fp
 8010d3c:	4631      	mov	r1, r6
 8010d3e:	4628      	mov	r0, r5
 8010d40:	47b8      	blx	r7
 8010d42:	3001      	adds	r0, #1
 8010d44:	f43f af00 	beq.w	8010b48 <_printf_float+0x98>
 8010d48:	f10a 0a01 	add.w	sl, sl, #1
 8010d4c:	e7ee      	b.n	8010d2c <_printf_float+0x27c>
 8010d4e:	bf00      	nop
 8010d50:	ffffffff 	.word	0xffffffff
 8010d54:	7fefffff 	.word	0x7fefffff
 8010d58:	08016f34 	.word	0x08016f34
 8010d5c:	08016f38 	.word	0x08016f38
 8010d60:	08016f3c 	.word	0x08016f3c
 8010d64:	08016f40 	.word	0x08016f40
 8010d68:	080172d0 	.word	0x080172d0
 8010d6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d72:	4553      	cmp	r3, sl
 8010d74:	bfa8      	it	ge
 8010d76:	4653      	movge	r3, sl
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	4699      	mov	r9, r3
 8010d7c:	dc37      	bgt.n	8010dee <_printf_float+0x33e>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	9307      	str	r3, [sp, #28]
 8010d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d86:	f104 021a 	add.w	r2, r4, #26
 8010d8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d8c:	9907      	ldr	r1, [sp, #28]
 8010d8e:	9306      	str	r3, [sp, #24]
 8010d90:	eba3 0309 	sub.w	r3, r3, r9
 8010d94:	428b      	cmp	r3, r1
 8010d96:	dc31      	bgt.n	8010dfc <_printf_float+0x34c>
 8010d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d9a:	459a      	cmp	sl, r3
 8010d9c:	dc3b      	bgt.n	8010e16 <_printf_float+0x366>
 8010d9e:	6823      	ldr	r3, [r4, #0]
 8010da0:	07da      	lsls	r2, r3, #31
 8010da2:	d438      	bmi.n	8010e16 <_printf_float+0x366>
 8010da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010da6:	ebaa 0903 	sub.w	r9, sl, r3
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	ebaa 0303 	sub.w	r3, sl, r3
 8010db0:	4599      	cmp	r9, r3
 8010db2:	bfa8      	it	ge
 8010db4:	4699      	movge	r9, r3
 8010db6:	f1b9 0f00 	cmp.w	r9, #0
 8010dba:	dc34      	bgt.n	8010e26 <_printf_float+0x376>
 8010dbc:	f04f 0800 	mov.w	r8, #0
 8010dc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010dc4:	f104 0b1a 	add.w	fp, r4, #26
 8010dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dca:	ebaa 0303 	sub.w	r3, sl, r3
 8010dce:	eba3 0309 	sub.w	r3, r3, r9
 8010dd2:	4543      	cmp	r3, r8
 8010dd4:	f77f af76 	ble.w	8010cc4 <_printf_float+0x214>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	465a      	mov	r2, fp
 8010ddc:	4631      	mov	r1, r6
 8010dde:	4628      	mov	r0, r5
 8010de0:	47b8      	blx	r7
 8010de2:	3001      	adds	r0, #1
 8010de4:	f43f aeb0 	beq.w	8010b48 <_printf_float+0x98>
 8010de8:	f108 0801 	add.w	r8, r8, #1
 8010dec:	e7ec      	b.n	8010dc8 <_printf_float+0x318>
 8010dee:	4642      	mov	r2, r8
 8010df0:	4631      	mov	r1, r6
 8010df2:	4628      	mov	r0, r5
 8010df4:	47b8      	blx	r7
 8010df6:	3001      	adds	r0, #1
 8010df8:	d1c1      	bne.n	8010d7e <_printf_float+0x2ce>
 8010dfa:	e6a5      	b.n	8010b48 <_printf_float+0x98>
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	4631      	mov	r1, r6
 8010e00:	4628      	mov	r0, r5
 8010e02:	9206      	str	r2, [sp, #24]
 8010e04:	47b8      	blx	r7
 8010e06:	3001      	adds	r0, #1
 8010e08:	f43f ae9e 	beq.w	8010b48 <_printf_float+0x98>
 8010e0c:	9b07      	ldr	r3, [sp, #28]
 8010e0e:	9a06      	ldr	r2, [sp, #24]
 8010e10:	3301      	adds	r3, #1
 8010e12:	9307      	str	r3, [sp, #28]
 8010e14:	e7b9      	b.n	8010d8a <_printf_float+0x2da>
 8010e16:	9b05      	ldr	r3, [sp, #20]
 8010e18:	465a      	mov	r2, fp
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	d1bf      	bne.n	8010da4 <_printf_float+0x2f4>
 8010e24:	e690      	b.n	8010b48 <_printf_float+0x98>
 8010e26:	9a06      	ldr	r2, [sp, #24]
 8010e28:	464b      	mov	r3, r9
 8010e2a:	4442      	add	r2, r8
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	4628      	mov	r0, r5
 8010e30:	47b8      	blx	r7
 8010e32:	3001      	adds	r0, #1
 8010e34:	d1c2      	bne.n	8010dbc <_printf_float+0x30c>
 8010e36:	e687      	b.n	8010b48 <_printf_float+0x98>
 8010e38:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8010e3c:	f1b9 0f01 	cmp.w	r9, #1
 8010e40:	dc01      	bgt.n	8010e46 <_printf_float+0x396>
 8010e42:	07db      	lsls	r3, r3, #31
 8010e44:	d536      	bpl.n	8010eb4 <_printf_float+0x404>
 8010e46:	2301      	movs	r3, #1
 8010e48:	4642      	mov	r2, r8
 8010e4a:	4631      	mov	r1, r6
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	47b8      	blx	r7
 8010e50:	3001      	adds	r0, #1
 8010e52:	f43f ae79 	beq.w	8010b48 <_printf_float+0x98>
 8010e56:	9b05      	ldr	r3, [sp, #20]
 8010e58:	465a      	mov	r2, fp
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	47b8      	blx	r7
 8010e60:	3001      	adds	r0, #1
 8010e62:	f43f ae71 	beq.w	8010b48 <_printf_float+0x98>
 8010e66:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010e6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e76:	d018      	beq.n	8010eaa <_printf_float+0x3fa>
 8010e78:	464b      	mov	r3, r9
 8010e7a:	f108 0201 	add.w	r2, r8, #1
 8010e7e:	4631      	mov	r1, r6
 8010e80:	4628      	mov	r0, r5
 8010e82:	47b8      	blx	r7
 8010e84:	3001      	adds	r0, #1
 8010e86:	d10c      	bne.n	8010ea2 <_printf_float+0x3f2>
 8010e88:	e65e      	b.n	8010b48 <_printf_float+0x98>
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	465a      	mov	r2, fp
 8010e8e:	4631      	mov	r1, r6
 8010e90:	4628      	mov	r0, r5
 8010e92:	47b8      	blx	r7
 8010e94:	3001      	adds	r0, #1
 8010e96:	f43f ae57 	beq.w	8010b48 <_printf_float+0x98>
 8010e9a:	f108 0801 	add.w	r8, r8, #1
 8010e9e:	45c8      	cmp	r8, r9
 8010ea0:	dbf3      	blt.n	8010e8a <_printf_float+0x3da>
 8010ea2:	4653      	mov	r3, sl
 8010ea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010ea8:	e6dc      	b.n	8010c64 <_printf_float+0x1b4>
 8010eaa:	f04f 0800 	mov.w	r8, #0
 8010eae:	f104 0b1a 	add.w	fp, r4, #26
 8010eb2:	e7f4      	b.n	8010e9e <_printf_float+0x3ee>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	4642      	mov	r2, r8
 8010eb8:	e7e1      	b.n	8010e7e <_printf_float+0x3ce>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	464a      	mov	r2, r9
 8010ebe:	4631      	mov	r1, r6
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	47b8      	blx	r7
 8010ec4:	3001      	adds	r0, #1
 8010ec6:	f43f ae3f 	beq.w	8010b48 <_printf_float+0x98>
 8010eca:	f108 0801 	add.w	r8, r8, #1
 8010ece:	68e3      	ldr	r3, [r4, #12]
 8010ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010ed2:	1a5b      	subs	r3, r3, r1
 8010ed4:	4543      	cmp	r3, r8
 8010ed6:	dcf0      	bgt.n	8010eba <_printf_float+0x40a>
 8010ed8:	e6f8      	b.n	8010ccc <_printf_float+0x21c>
 8010eda:	f04f 0800 	mov.w	r8, #0
 8010ede:	f104 0919 	add.w	r9, r4, #25
 8010ee2:	e7f4      	b.n	8010ece <_printf_float+0x41e>

08010ee4 <_printf_common>:
 8010ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	4616      	mov	r6, r2
 8010eea:	4698      	mov	r8, r3
 8010eec:	688a      	ldr	r2, [r1, #8]
 8010eee:	690b      	ldr	r3, [r1, #16]
 8010ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	bfb8      	it	lt
 8010ef8:	4613      	movlt	r3, r2
 8010efa:	6033      	str	r3, [r6, #0]
 8010efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f00:	4607      	mov	r7, r0
 8010f02:	460c      	mov	r4, r1
 8010f04:	b10a      	cbz	r2, 8010f0a <_printf_common+0x26>
 8010f06:	3301      	adds	r3, #1
 8010f08:	6033      	str	r3, [r6, #0]
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	0699      	lsls	r1, r3, #26
 8010f0e:	bf42      	ittt	mi
 8010f10:	6833      	ldrmi	r3, [r6, #0]
 8010f12:	3302      	addmi	r3, #2
 8010f14:	6033      	strmi	r3, [r6, #0]
 8010f16:	6825      	ldr	r5, [r4, #0]
 8010f18:	f015 0506 	ands.w	r5, r5, #6
 8010f1c:	d106      	bne.n	8010f2c <_printf_common+0x48>
 8010f1e:	f104 0a19 	add.w	sl, r4, #25
 8010f22:	68e3      	ldr	r3, [r4, #12]
 8010f24:	6832      	ldr	r2, [r6, #0]
 8010f26:	1a9b      	subs	r3, r3, r2
 8010f28:	42ab      	cmp	r3, r5
 8010f2a:	dc26      	bgt.n	8010f7a <_printf_common+0x96>
 8010f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	3b00      	subs	r3, #0
 8010f34:	bf18      	it	ne
 8010f36:	2301      	movne	r3, #1
 8010f38:	0692      	lsls	r2, r2, #26
 8010f3a:	d42b      	bmi.n	8010f94 <_printf_common+0xb0>
 8010f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f40:	4641      	mov	r1, r8
 8010f42:	4638      	mov	r0, r7
 8010f44:	47c8      	blx	r9
 8010f46:	3001      	adds	r0, #1
 8010f48:	d01e      	beq.n	8010f88 <_printf_common+0xa4>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	6922      	ldr	r2, [r4, #16]
 8010f4e:	f003 0306 	and.w	r3, r3, #6
 8010f52:	2b04      	cmp	r3, #4
 8010f54:	bf02      	ittt	eq
 8010f56:	68e5      	ldreq	r5, [r4, #12]
 8010f58:	6833      	ldreq	r3, [r6, #0]
 8010f5a:	1aed      	subeq	r5, r5, r3
 8010f5c:	68a3      	ldr	r3, [r4, #8]
 8010f5e:	bf0c      	ite	eq
 8010f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f64:	2500      	movne	r5, #0
 8010f66:	4293      	cmp	r3, r2
 8010f68:	bfc4      	itt	gt
 8010f6a:	1a9b      	subgt	r3, r3, r2
 8010f6c:	18ed      	addgt	r5, r5, r3
 8010f6e:	2600      	movs	r6, #0
 8010f70:	341a      	adds	r4, #26
 8010f72:	42b5      	cmp	r5, r6
 8010f74:	d11a      	bne.n	8010fac <_printf_common+0xc8>
 8010f76:	2000      	movs	r0, #0
 8010f78:	e008      	b.n	8010f8c <_printf_common+0xa8>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	4652      	mov	r2, sl
 8010f7e:	4641      	mov	r1, r8
 8010f80:	4638      	mov	r0, r7
 8010f82:	47c8      	blx	r9
 8010f84:	3001      	adds	r0, #1
 8010f86:	d103      	bne.n	8010f90 <_printf_common+0xac>
 8010f88:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f90:	3501      	adds	r5, #1
 8010f92:	e7c6      	b.n	8010f22 <_printf_common+0x3e>
 8010f94:	18e1      	adds	r1, r4, r3
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	2030      	movs	r0, #48	@ 0x30
 8010f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f9e:	4422      	add	r2, r4
 8010fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fa8:	3302      	adds	r3, #2
 8010faa:	e7c7      	b.n	8010f3c <_printf_common+0x58>
 8010fac:	2301      	movs	r3, #1
 8010fae:	4622      	mov	r2, r4
 8010fb0:	4641      	mov	r1, r8
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	47c8      	blx	r9
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	d0e6      	beq.n	8010f88 <_printf_common+0xa4>
 8010fba:	3601      	adds	r6, #1
 8010fbc:	e7d9      	b.n	8010f72 <_printf_common+0x8e>
	...

08010fc0 <_printf_i>:
 8010fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc4:	7e0f      	ldrb	r7, [r1, #24]
 8010fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fc8:	2f78      	cmp	r7, #120	@ 0x78
 8010fca:	4691      	mov	r9, r2
 8010fcc:	4680      	mov	r8, r0
 8010fce:	460c      	mov	r4, r1
 8010fd0:	469a      	mov	sl, r3
 8010fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fd6:	d807      	bhi.n	8010fe8 <_printf_i+0x28>
 8010fd8:	2f62      	cmp	r7, #98	@ 0x62
 8010fda:	d80a      	bhi.n	8010ff2 <_printf_i+0x32>
 8010fdc:	2f00      	cmp	r7, #0
 8010fde:	f000 80d2 	beq.w	8011186 <_printf_i+0x1c6>
 8010fe2:	2f58      	cmp	r7, #88	@ 0x58
 8010fe4:	f000 80b9 	beq.w	801115a <_printf_i+0x19a>
 8010fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ff0:	e03a      	b.n	8011068 <_printf_i+0xa8>
 8010ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ff6:	2b15      	cmp	r3, #21
 8010ff8:	d8f6      	bhi.n	8010fe8 <_printf_i+0x28>
 8010ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8011000 <_printf_i+0x40>)
 8010ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011000:	08011059 	.word	0x08011059
 8011004:	0801106d 	.word	0x0801106d
 8011008:	08010fe9 	.word	0x08010fe9
 801100c:	08010fe9 	.word	0x08010fe9
 8011010:	08010fe9 	.word	0x08010fe9
 8011014:	08010fe9 	.word	0x08010fe9
 8011018:	0801106d 	.word	0x0801106d
 801101c:	08010fe9 	.word	0x08010fe9
 8011020:	08010fe9 	.word	0x08010fe9
 8011024:	08010fe9 	.word	0x08010fe9
 8011028:	08010fe9 	.word	0x08010fe9
 801102c:	0801116d 	.word	0x0801116d
 8011030:	08011097 	.word	0x08011097
 8011034:	08011127 	.word	0x08011127
 8011038:	08010fe9 	.word	0x08010fe9
 801103c:	08010fe9 	.word	0x08010fe9
 8011040:	0801118f 	.word	0x0801118f
 8011044:	08010fe9 	.word	0x08010fe9
 8011048:	08011097 	.word	0x08011097
 801104c:	08010fe9 	.word	0x08010fe9
 8011050:	08010fe9 	.word	0x08010fe9
 8011054:	0801112f 	.word	0x0801112f
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	1d1a      	adds	r2, r3, #4
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6032      	str	r2, [r6, #0]
 8011060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011068:	2301      	movs	r3, #1
 801106a:	e09d      	b.n	80111a8 <_printf_i+0x1e8>
 801106c:	6833      	ldr	r3, [r6, #0]
 801106e:	6820      	ldr	r0, [r4, #0]
 8011070:	1d19      	adds	r1, r3, #4
 8011072:	6031      	str	r1, [r6, #0]
 8011074:	0606      	lsls	r6, r0, #24
 8011076:	d501      	bpl.n	801107c <_printf_i+0xbc>
 8011078:	681d      	ldr	r5, [r3, #0]
 801107a:	e003      	b.n	8011084 <_printf_i+0xc4>
 801107c:	0645      	lsls	r5, r0, #25
 801107e:	d5fb      	bpl.n	8011078 <_printf_i+0xb8>
 8011080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011084:	2d00      	cmp	r5, #0
 8011086:	da03      	bge.n	8011090 <_printf_i+0xd0>
 8011088:	232d      	movs	r3, #45	@ 0x2d
 801108a:	426d      	negs	r5, r5
 801108c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011090:	4859      	ldr	r0, [pc, #356]	@ (80111f8 <_printf_i+0x238>)
 8011092:	230a      	movs	r3, #10
 8011094:	e011      	b.n	80110ba <_printf_i+0xfa>
 8011096:	6821      	ldr	r1, [r4, #0]
 8011098:	6833      	ldr	r3, [r6, #0]
 801109a:	0608      	lsls	r0, r1, #24
 801109c:	f853 5b04 	ldr.w	r5, [r3], #4
 80110a0:	d402      	bmi.n	80110a8 <_printf_i+0xe8>
 80110a2:	0649      	lsls	r1, r1, #25
 80110a4:	bf48      	it	mi
 80110a6:	b2ad      	uxthmi	r5, r5
 80110a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80110aa:	4853      	ldr	r0, [pc, #332]	@ (80111f8 <_printf_i+0x238>)
 80110ac:	6033      	str	r3, [r6, #0]
 80110ae:	bf14      	ite	ne
 80110b0:	230a      	movne	r3, #10
 80110b2:	2308      	moveq	r3, #8
 80110b4:	2100      	movs	r1, #0
 80110b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110ba:	6866      	ldr	r6, [r4, #4]
 80110bc:	60a6      	str	r6, [r4, #8]
 80110be:	2e00      	cmp	r6, #0
 80110c0:	bfa2      	ittt	ge
 80110c2:	6821      	ldrge	r1, [r4, #0]
 80110c4:	f021 0104 	bicge.w	r1, r1, #4
 80110c8:	6021      	strge	r1, [r4, #0]
 80110ca:	b90d      	cbnz	r5, 80110d0 <_printf_i+0x110>
 80110cc:	2e00      	cmp	r6, #0
 80110ce:	d04b      	beq.n	8011168 <_printf_i+0x1a8>
 80110d0:	4616      	mov	r6, r2
 80110d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80110d6:	fb03 5711 	mls	r7, r3, r1, r5
 80110da:	5dc7      	ldrb	r7, [r0, r7]
 80110dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110e0:	462f      	mov	r7, r5
 80110e2:	42bb      	cmp	r3, r7
 80110e4:	460d      	mov	r5, r1
 80110e6:	d9f4      	bls.n	80110d2 <_printf_i+0x112>
 80110e8:	2b08      	cmp	r3, #8
 80110ea:	d10b      	bne.n	8011104 <_printf_i+0x144>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	07df      	lsls	r7, r3, #31
 80110f0:	d508      	bpl.n	8011104 <_printf_i+0x144>
 80110f2:	6923      	ldr	r3, [r4, #16]
 80110f4:	6861      	ldr	r1, [r4, #4]
 80110f6:	4299      	cmp	r1, r3
 80110f8:	bfde      	ittt	le
 80110fa:	2330      	movle	r3, #48	@ 0x30
 80110fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011104:	1b92      	subs	r2, r2, r6
 8011106:	6122      	str	r2, [r4, #16]
 8011108:	f8cd a000 	str.w	sl, [sp]
 801110c:	464b      	mov	r3, r9
 801110e:	aa03      	add	r2, sp, #12
 8011110:	4621      	mov	r1, r4
 8011112:	4640      	mov	r0, r8
 8011114:	f7ff fee6 	bl	8010ee4 <_printf_common>
 8011118:	3001      	adds	r0, #1
 801111a:	d14a      	bne.n	80111b2 <_printf_i+0x1f2>
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	b004      	add	sp, #16
 8011122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	f043 0320 	orr.w	r3, r3, #32
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	4833      	ldr	r0, [pc, #204]	@ (80111fc <_printf_i+0x23c>)
 8011130:	2778      	movs	r7, #120	@ 0x78
 8011132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011136:	6823      	ldr	r3, [r4, #0]
 8011138:	6831      	ldr	r1, [r6, #0]
 801113a:	061f      	lsls	r7, r3, #24
 801113c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011140:	d402      	bmi.n	8011148 <_printf_i+0x188>
 8011142:	065f      	lsls	r7, r3, #25
 8011144:	bf48      	it	mi
 8011146:	b2ad      	uxthmi	r5, r5
 8011148:	6031      	str	r1, [r6, #0]
 801114a:	07d9      	lsls	r1, r3, #31
 801114c:	bf44      	itt	mi
 801114e:	f043 0320 	orrmi.w	r3, r3, #32
 8011152:	6023      	strmi	r3, [r4, #0]
 8011154:	b11d      	cbz	r5, 801115e <_printf_i+0x19e>
 8011156:	2310      	movs	r3, #16
 8011158:	e7ac      	b.n	80110b4 <_printf_i+0xf4>
 801115a:	4827      	ldr	r0, [pc, #156]	@ (80111f8 <_printf_i+0x238>)
 801115c:	e7e9      	b.n	8011132 <_printf_i+0x172>
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	f023 0320 	bic.w	r3, r3, #32
 8011164:	6023      	str	r3, [r4, #0]
 8011166:	e7f6      	b.n	8011156 <_printf_i+0x196>
 8011168:	4616      	mov	r6, r2
 801116a:	e7bd      	b.n	80110e8 <_printf_i+0x128>
 801116c:	6833      	ldr	r3, [r6, #0]
 801116e:	6825      	ldr	r5, [r4, #0]
 8011170:	6961      	ldr	r1, [r4, #20]
 8011172:	1d18      	adds	r0, r3, #4
 8011174:	6030      	str	r0, [r6, #0]
 8011176:	062e      	lsls	r6, r5, #24
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	d501      	bpl.n	8011180 <_printf_i+0x1c0>
 801117c:	6019      	str	r1, [r3, #0]
 801117e:	e002      	b.n	8011186 <_printf_i+0x1c6>
 8011180:	0668      	lsls	r0, r5, #25
 8011182:	d5fb      	bpl.n	801117c <_printf_i+0x1bc>
 8011184:	8019      	strh	r1, [r3, #0]
 8011186:	2300      	movs	r3, #0
 8011188:	6123      	str	r3, [r4, #16]
 801118a:	4616      	mov	r6, r2
 801118c:	e7bc      	b.n	8011108 <_printf_i+0x148>
 801118e:	6833      	ldr	r3, [r6, #0]
 8011190:	1d1a      	adds	r2, r3, #4
 8011192:	6032      	str	r2, [r6, #0]
 8011194:	681e      	ldr	r6, [r3, #0]
 8011196:	6862      	ldr	r2, [r4, #4]
 8011198:	2100      	movs	r1, #0
 801119a:	4630      	mov	r0, r6
 801119c:	f7ef f8a0 	bl	80002e0 <memchr>
 80111a0:	b108      	cbz	r0, 80111a6 <_printf_i+0x1e6>
 80111a2:	1b80      	subs	r0, r0, r6
 80111a4:	6060      	str	r0, [r4, #4]
 80111a6:	6863      	ldr	r3, [r4, #4]
 80111a8:	6123      	str	r3, [r4, #16]
 80111aa:	2300      	movs	r3, #0
 80111ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111b0:	e7aa      	b.n	8011108 <_printf_i+0x148>
 80111b2:	6923      	ldr	r3, [r4, #16]
 80111b4:	4632      	mov	r2, r6
 80111b6:	4649      	mov	r1, r9
 80111b8:	4640      	mov	r0, r8
 80111ba:	47d0      	blx	sl
 80111bc:	3001      	adds	r0, #1
 80111be:	d0ad      	beq.n	801111c <_printf_i+0x15c>
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	079b      	lsls	r3, r3, #30
 80111c4:	d413      	bmi.n	80111ee <_printf_i+0x22e>
 80111c6:	68e0      	ldr	r0, [r4, #12]
 80111c8:	9b03      	ldr	r3, [sp, #12]
 80111ca:	4298      	cmp	r0, r3
 80111cc:	bfb8      	it	lt
 80111ce:	4618      	movlt	r0, r3
 80111d0:	e7a6      	b.n	8011120 <_printf_i+0x160>
 80111d2:	2301      	movs	r3, #1
 80111d4:	4632      	mov	r2, r6
 80111d6:	4649      	mov	r1, r9
 80111d8:	4640      	mov	r0, r8
 80111da:	47d0      	blx	sl
 80111dc:	3001      	adds	r0, #1
 80111de:	d09d      	beq.n	801111c <_printf_i+0x15c>
 80111e0:	3501      	adds	r5, #1
 80111e2:	68e3      	ldr	r3, [r4, #12]
 80111e4:	9903      	ldr	r1, [sp, #12]
 80111e6:	1a5b      	subs	r3, r3, r1
 80111e8:	42ab      	cmp	r3, r5
 80111ea:	dcf2      	bgt.n	80111d2 <_printf_i+0x212>
 80111ec:	e7eb      	b.n	80111c6 <_printf_i+0x206>
 80111ee:	2500      	movs	r5, #0
 80111f0:	f104 0619 	add.w	r6, r4, #25
 80111f4:	e7f5      	b.n	80111e2 <_printf_i+0x222>
 80111f6:	bf00      	nop
 80111f8:	08016f44 	.word	0x08016f44
 80111fc:	08016f55 	.word	0x08016f55

08011200 <_scanf_float>:
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	b087      	sub	sp, #28
 8011206:	4617      	mov	r7, r2
 8011208:	9303      	str	r3, [sp, #12]
 801120a:	688b      	ldr	r3, [r1, #8]
 801120c:	1e5a      	subs	r2, r3, #1
 801120e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011212:	bf81      	itttt	hi
 8011214:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011218:	eb03 0b05 	addhi.w	fp, r3, r5
 801121c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011220:	608b      	strhi	r3, [r1, #8]
 8011222:	680b      	ldr	r3, [r1, #0]
 8011224:	460a      	mov	r2, r1
 8011226:	f04f 0500 	mov.w	r5, #0
 801122a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801122e:	f842 3b1c 	str.w	r3, [r2], #28
 8011232:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011236:	4680      	mov	r8, r0
 8011238:	460c      	mov	r4, r1
 801123a:	bf98      	it	ls
 801123c:	f04f 0b00 	movls.w	fp, #0
 8011240:	9201      	str	r2, [sp, #4]
 8011242:	4616      	mov	r6, r2
 8011244:	46aa      	mov	sl, r5
 8011246:	46a9      	mov	r9, r5
 8011248:	9502      	str	r5, [sp, #8]
 801124a:	68a2      	ldr	r2, [r4, #8]
 801124c:	b152      	cbz	r2, 8011264 <_scanf_float+0x64>
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	2b4e      	cmp	r3, #78	@ 0x4e
 8011254:	d864      	bhi.n	8011320 <_scanf_float+0x120>
 8011256:	2b40      	cmp	r3, #64	@ 0x40
 8011258:	d83c      	bhi.n	80112d4 <_scanf_float+0xd4>
 801125a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801125e:	b2c8      	uxtb	r0, r1
 8011260:	280e      	cmp	r0, #14
 8011262:	d93a      	bls.n	80112da <_scanf_float+0xda>
 8011264:	f1b9 0f00 	cmp.w	r9, #0
 8011268:	d003      	beq.n	8011272 <_scanf_float+0x72>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011276:	f1ba 0f01 	cmp.w	sl, #1
 801127a:	f200 8117 	bhi.w	80114ac <_scanf_float+0x2ac>
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	429e      	cmp	r6, r3
 8011282:	f200 8108 	bhi.w	8011496 <_scanf_float+0x296>
 8011286:	2001      	movs	r0, #1
 8011288:	b007      	add	sp, #28
 801128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011292:	2a0d      	cmp	r2, #13
 8011294:	d8e6      	bhi.n	8011264 <_scanf_float+0x64>
 8011296:	a101      	add	r1, pc, #4	@ (adr r1, 801129c <_scanf_float+0x9c>)
 8011298:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801129c:	080113e3 	.word	0x080113e3
 80112a0:	08011265 	.word	0x08011265
 80112a4:	08011265 	.word	0x08011265
 80112a8:	08011265 	.word	0x08011265
 80112ac:	08011443 	.word	0x08011443
 80112b0:	0801141b 	.word	0x0801141b
 80112b4:	08011265 	.word	0x08011265
 80112b8:	08011265 	.word	0x08011265
 80112bc:	080113f1 	.word	0x080113f1
 80112c0:	08011265 	.word	0x08011265
 80112c4:	08011265 	.word	0x08011265
 80112c8:	08011265 	.word	0x08011265
 80112cc:	08011265 	.word	0x08011265
 80112d0:	080113a9 	.word	0x080113a9
 80112d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80112d8:	e7db      	b.n	8011292 <_scanf_float+0x92>
 80112da:	290e      	cmp	r1, #14
 80112dc:	d8c2      	bhi.n	8011264 <_scanf_float+0x64>
 80112de:	a001      	add	r0, pc, #4	@ (adr r0, 80112e4 <_scanf_float+0xe4>)
 80112e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80112e4:	08011399 	.word	0x08011399
 80112e8:	08011265 	.word	0x08011265
 80112ec:	08011399 	.word	0x08011399
 80112f0:	0801142f 	.word	0x0801142f
 80112f4:	08011265 	.word	0x08011265
 80112f8:	08011341 	.word	0x08011341
 80112fc:	0801137f 	.word	0x0801137f
 8011300:	0801137f 	.word	0x0801137f
 8011304:	0801137f 	.word	0x0801137f
 8011308:	0801137f 	.word	0x0801137f
 801130c:	0801137f 	.word	0x0801137f
 8011310:	0801137f 	.word	0x0801137f
 8011314:	0801137f 	.word	0x0801137f
 8011318:	0801137f 	.word	0x0801137f
 801131c:	0801137f 	.word	0x0801137f
 8011320:	2b6e      	cmp	r3, #110	@ 0x6e
 8011322:	d809      	bhi.n	8011338 <_scanf_float+0x138>
 8011324:	2b60      	cmp	r3, #96	@ 0x60
 8011326:	d8b2      	bhi.n	801128e <_scanf_float+0x8e>
 8011328:	2b54      	cmp	r3, #84	@ 0x54
 801132a:	d07b      	beq.n	8011424 <_scanf_float+0x224>
 801132c:	2b59      	cmp	r3, #89	@ 0x59
 801132e:	d199      	bne.n	8011264 <_scanf_float+0x64>
 8011330:	2d07      	cmp	r5, #7
 8011332:	d197      	bne.n	8011264 <_scanf_float+0x64>
 8011334:	2508      	movs	r5, #8
 8011336:	e02c      	b.n	8011392 <_scanf_float+0x192>
 8011338:	2b74      	cmp	r3, #116	@ 0x74
 801133a:	d073      	beq.n	8011424 <_scanf_float+0x224>
 801133c:	2b79      	cmp	r3, #121	@ 0x79
 801133e:	e7f6      	b.n	801132e <_scanf_float+0x12e>
 8011340:	6821      	ldr	r1, [r4, #0]
 8011342:	05c8      	lsls	r0, r1, #23
 8011344:	d51b      	bpl.n	801137e <_scanf_float+0x17e>
 8011346:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801134a:	6021      	str	r1, [r4, #0]
 801134c:	f109 0901 	add.w	r9, r9, #1
 8011350:	f1bb 0f00 	cmp.w	fp, #0
 8011354:	d003      	beq.n	801135e <_scanf_float+0x15e>
 8011356:	3201      	adds	r2, #1
 8011358:	f10b 3bff 	add.w	fp, fp, #4294967295
 801135c:	60a2      	str	r2, [r4, #8]
 801135e:	68a3      	ldr	r3, [r4, #8]
 8011360:	3b01      	subs	r3, #1
 8011362:	60a3      	str	r3, [r4, #8]
 8011364:	6923      	ldr	r3, [r4, #16]
 8011366:	3301      	adds	r3, #1
 8011368:	6123      	str	r3, [r4, #16]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3b01      	subs	r3, #1
 801136e:	2b00      	cmp	r3, #0
 8011370:	607b      	str	r3, [r7, #4]
 8011372:	f340 8087 	ble.w	8011484 <_scanf_float+0x284>
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	3301      	adds	r3, #1
 801137a:	603b      	str	r3, [r7, #0]
 801137c:	e765      	b.n	801124a <_scanf_float+0x4a>
 801137e:	eb1a 0105 	adds.w	r1, sl, r5
 8011382:	f47f af6f 	bne.w	8011264 <_scanf_float+0x64>
 8011386:	6822      	ldr	r2, [r4, #0]
 8011388:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801138c:	6022      	str	r2, [r4, #0]
 801138e:	460d      	mov	r5, r1
 8011390:	468a      	mov	sl, r1
 8011392:	f806 3b01 	strb.w	r3, [r6], #1
 8011396:	e7e2      	b.n	801135e <_scanf_float+0x15e>
 8011398:	6822      	ldr	r2, [r4, #0]
 801139a:	0610      	lsls	r0, r2, #24
 801139c:	f57f af62 	bpl.w	8011264 <_scanf_float+0x64>
 80113a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80113a4:	6022      	str	r2, [r4, #0]
 80113a6:	e7f4      	b.n	8011392 <_scanf_float+0x192>
 80113a8:	f1ba 0f00 	cmp.w	sl, #0
 80113ac:	d10e      	bne.n	80113cc <_scanf_float+0x1cc>
 80113ae:	f1b9 0f00 	cmp.w	r9, #0
 80113b2:	d10e      	bne.n	80113d2 <_scanf_float+0x1d2>
 80113b4:	6822      	ldr	r2, [r4, #0]
 80113b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80113ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80113be:	d108      	bne.n	80113d2 <_scanf_float+0x1d2>
 80113c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80113c4:	6022      	str	r2, [r4, #0]
 80113c6:	f04f 0a01 	mov.w	sl, #1
 80113ca:	e7e2      	b.n	8011392 <_scanf_float+0x192>
 80113cc:	f1ba 0f02 	cmp.w	sl, #2
 80113d0:	d055      	beq.n	801147e <_scanf_float+0x27e>
 80113d2:	2d01      	cmp	r5, #1
 80113d4:	d002      	beq.n	80113dc <_scanf_float+0x1dc>
 80113d6:	2d04      	cmp	r5, #4
 80113d8:	f47f af44 	bne.w	8011264 <_scanf_float+0x64>
 80113dc:	3501      	adds	r5, #1
 80113de:	b2ed      	uxtb	r5, r5
 80113e0:	e7d7      	b.n	8011392 <_scanf_float+0x192>
 80113e2:	f1ba 0f01 	cmp.w	sl, #1
 80113e6:	f47f af3d 	bne.w	8011264 <_scanf_float+0x64>
 80113ea:	f04f 0a02 	mov.w	sl, #2
 80113ee:	e7d0      	b.n	8011392 <_scanf_float+0x192>
 80113f0:	b97d      	cbnz	r5, 8011412 <_scanf_float+0x212>
 80113f2:	f1b9 0f00 	cmp.w	r9, #0
 80113f6:	f47f af38 	bne.w	801126a <_scanf_float+0x6a>
 80113fa:	6822      	ldr	r2, [r4, #0]
 80113fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011400:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011404:	f040 8101 	bne.w	801160a <_scanf_float+0x40a>
 8011408:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801140c:	6022      	str	r2, [r4, #0]
 801140e:	2501      	movs	r5, #1
 8011410:	e7bf      	b.n	8011392 <_scanf_float+0x192>
 8011412:	2d03      	cmp	r5, #3
 8011414:	d0e2      	beq.n	80113dc <_scanf_float+0x1dc>
 8011416:	2d05      	cmp	r5, #5
 8011418:	e7de      	b.n	80113d8 <_scanf_float+0x1d8>
 801141a:	2d02      	cmp	r5, #2
 801141c:	f47f af22 	bne.w	8011264 <_scanf_float+0x64>
 8011420:	2503      	movs	r5, #3
 8011422:	e7b6      	b.n	8011392 <_scanf_float+0x192>
 8011424:	2d06      	cmp	r5, #6
 8011426:	f47f af1d 	bne.w	8011264 <_scanf_float+0x64>
 801142a:	2507      	movs	r5, #7
 801142c:	e7b1      	b.n	8011392 <_scanf_float+0x192>
 801142e:	6822      	ldr	r2, [r4, #0]
 8011430:	0591      	lsls	r1, r2, #22
 8011432:	f57f af17 	bpl.w	8011264 <_scanf_float+0x64>
 8011436:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801143a:	6022      	str	r2, [r4, #0]
 801143c:	f8cd 9008 	str.w	r9, [sp, #8]
 8011440:	e7a7      	b.n	8011392 <_scanf_float+0x192>
 8011442:	6822      	ldr	r2, [r4, #0]
 8011444:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011448:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801144c:	d006      	beq.n	801145c <_scanf_float+0x25c>
 801144e:	0550      	lsls	r0, r2, #21
 8011450:	f57f af08 	bpl.w	8011264 <_scanf_float+0x64>
 8011454:	f1b9 0f00 	cmp.w	r9, #0
 8011458:	f000 80d7 	beq.w	801160a <_scanf_float+0x40a>
 801145c:	0591      	lsls	r1, r2, #22
 801145e:	bf58      	it	pl
 8011460:	9902      	ldrpl	r1, [sp, #8]
 8011462:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011466:	bf58      	it	pl
 8011468:	eba9 0101 	subpl.w	r1, r9, r1
 801146c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011470:	bf58      	it	pl
 8011472:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011476:	6022      	str	r2, [r4, #0]
 8011478:	f04f 0900 	mov.w	r9, #0
 801147c:	e789      	b.n	8011392 <_scanf_float+0x192>
 801147e:	f04f 0a03 	mov.w	sl, #3
 8011482:	e786      	b.n	8011392 <_scanf_float+0x192>
 8011484:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011488:	4639      	mov	r1, r7
 801148a:	4640      	mov	r0, r8
 801148c:	4798      	blx	r3
 801148e:	2800      	cmp	r0, #0
 8011490:	f43f aedb 	beq.w	801124a <_scanf_float+0x4a>
 8011494:	e6e6      	b.n	8011264 <_scanf_float+0x64>
 8011496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801149a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801149e:	463a      	mov	r2, r7
 80114a0:	4640      	mov	r0, r8
 80114a2:	4798      	blx	r3
 80114a4:	6923      	ldr	r3, [r4, #16]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	6123      	str	r3, [r4, #16]
 80114aa:	e6e8      	b.n	801127e <_scanf_float+0x7e>
 80114ac:	1e6b      	subs	r3, r5, #1
 80114ae:	2b06      	cmp	r3, #6
 80114b0:	d824      	bhi.n	80114fc <_scanf_float+0x2fc>
 80114b2:	2d02      	cmp	r5, #2
 80114b4:	d836      	bhi.n	8011524 <_scanf_float+0x324>
 80114b6:	9b01      	ldr	r3, [sp, #4]
 80114b8:	429e      	cmp	r6, r3
 80114ba:	f67f aee4 	bls.w	8011286 <_scanf_float+0x86>
 80114be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114c6:	463a      	mov	r2, r7
 80114c8:	4640      	mov	r0, r8
 80114ca:	4798      	blx	r3
 80114cc:	6923      	ldr	r3, [r4, #16]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	6123      	str	r3, [r4, #16]
 80114d2:	e7f0      	b.n	80114b6 <_scanf_float+0x2b6>
 80114d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80114dc:	463a      	mov	r2, r7
 80114de:	4640      	mov	r0, r8
 80114e0:	4798      	blx	r3
 80114e2:	6923      	ldr	r3, [r4, #16]
 80114e4:	3b01      	subs	r3, #1
 80114e6:	6123      	str	r3, [r4, #16]
 80114e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114ec:	fa5f fa8a 	uxtb.w	sl, sl
 80114f0:	f1ba 0f02 	cmp.w	sl, #2
 80114f4:	d1ee      	bne.n	80114d4 <_scanf_float+0x2d4>
 80114f6:	3d03      	subs	r5, #3
 80114f8:	b2ed      	uxtb	r5, r5
 80114fa:	1b76      	subs	r6, r6, r5
 80114fc:	6823      	ldr	r3, [r4, #0]
 80114fe:	05da      	lsls	r2, r3, #23
 8011500:	d530      	bpl.n	8011564 <_scanf_float+0x364>
 8011502:	055b      	lsls	r3, r3, #21
 8011504:	d511      	bpl.n	801152a <_scanf_float+0x32a>
 8011506:	9b01      	ldr	r3, [sp, #4]
 8011508:	429e      	cmp	r6, r3
 801150a:	f67f aebc 	bls.w	8011286 <_scanf_float+0x86>
 801150e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011516:	463a      	mov	r2, r7
 8011518:	4640      	mov	r0, r8
 801151a:	4798      	blx	r3
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	3b01      	subs	r3, #1
 8011520:	6123      	str	r3, [r4, #16]
 8011522:	e7f0      	b.n	8011506 <_scanf_float+0x306>
 8011524:	46aa      	mov	sl, r5
 8011526:	46b3      	mov	fp, r6
 8011528:	e7de      	b.n	80114e8 <_scanf_float+0x2e8>
 801152a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	2965      	cmp	r1, #101	@ 0x65
 8011532:	f103 33ff 	add.w	r3, r3, #4294967295
 8011536:	f106 35ff 	add.w	r5, r6, #4294967295
 801153a:	6123      	str	r3, [r4, #16]
 801153c:	d00c      	beq.n	8011558 <_scanf_float+0x358>
 801153e:	2945      	cmp	r1, #69	@ 0x45
 8011540:	d00a      	beq.n	8011558 <_scanf_float+0x358>
 8011542:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011546:	463a      	mov	r2, r7
 8011548:	4640      	mov	r0, r8
 801154a:	4798      	blx	r3
 801154c:	6923      	ldr	r3, [r4, #16]
 801154e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011552:	3b01      	subs	r3, #1
 8011554:	1eb5      	subs	r5, r6, #2
 8011556:	6123      	str	r3, [r4, #16]
 8011558:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801155c:	463a      	mov	r2, r7
 801155e:	4640      	mov	r0, r8
 8011560:	4798      	blx	r3
 8011562:	462e      	mov	r6, r5
 8011564:	6822      	ldr	r2, [r4, #0]
 8011566:	f012 0210 	ands.w	r2, r2, #16
 801156a:	d001      	beq.n	8011570 <_scanf_float+0x370>
 801156c:	2000      	movs	r0, #0
 801156e:	e68b      	b.n	8011288 <_scanf_float+0x88>
 8011570:	7032      	strb	r2, [r6, #0]
 8011572:	6823      	ldr	r3, [r4, #0]
 8011574:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801157c:	d11a      	bne.n	80115b4 <_scanf_float+0x3b4>
 801157e:	9b02      	ldr	r3, [sp, #8]
 8011580:	454b      	cmp	r3, r9
 8011582:	eba3 0209 	sub.w	r2, r3, r9
 8011586:	d121      	bne.n	80115cc <_scanf_float+0x3cc>
 8011588:	9901      	ldr	r1, [sp, #4]
 801158a:	2200      	movs	r2, #0
 801158c:	4640      	mov	r0, r8
 801158e:	f002 fd75 	bl	801407c <_strtod_r>
 8011592:	9b03      	ldr	r3, [sp, #12]
 8011594:	6821      	ldr	r1, [r4, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f011 0f02 	tst.w	r1, #2
 801159c:	f103 0204 	add.w	r2, r3, #4
 80115a0:	d01f      	beq.n	80115e2 <_scanf_float+0x3e2>
 80115a2:	9903      	ldr	r1, [sp, #12]
 80115a4:	600a      	str	r2, [r1, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	ed83 0b00 	vstr	d0, [r3]
 80115ac:	68e3      	ldr	r3, [r4, #12]
 80115ae:	3301      	adds	r3, #1
 80115b0:	60e3      	str	r3, [r4, #12]
 80115b2:	e7db      	b.n	801156c <_scanf_float+0x36c>
 80115b4:	9b04      	ldr	r3, [sp, #16]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d0e6      	beq.n	8011588 <_scanf_float+0x388>
 80115ba:	9905      	ldr	r1, [sp, #20]
 80115bc:	230a      	movs	r3, #10
 80115be:	3101      	adds	r1, #1
 80115c0:	4640      	mov	r0, r8
 80115c2:	f002 fddb 	bl	801417c <_strtol_r>
 80115c6:	9b04      	ldr	r3, [sp, #16]
 80115c8:	9e05      	ldr	r6, [sp, #20]
 80115ca:	1ac2      	subs	r2, r0, r3
 80115cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80115d0:	429e      	cmp	r6, r3
 80115d2:	bf28      	it	cs
 80115d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80115d8:	490d      	ldr	r1, [pc, #52]	@ (8011610 <_scanf_float+0x410>)
 80115da:	4630      	mov	r0, r6
 80115dc:	f000 fa02 	bl	80119e4 <siprintf>
 80115e0:	e7d2      	b.n	8011588 <_scanf_float+0x388>
 80115e2:	f011 0f04 	tst.w	r1, #4
 80115e6:	9903      	ldr	r1, [sp, #12]
 80115e8:	600a      	str	r2, [r1, #0]
 80115ea:	d1dc      	bne.n	80115a6 <_scanf_float+0x3a6>
 80115ec:	eeb4 0b40 	vcmp.f64	d0, d0
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	681d      	ldr	r5, [r3, #0]
 80115f6:	d705      	bvc.n	8011604 <_scanf_float+0x404>
 80115f8:	4806      	ldr	r0, [pc, #24]	@ (8011614 <_scanf_float+0x414>)
 80115fa:	f000 fbfb 	bl	8011df4 <nanf>
 80115fe:	ed85 0a00 	vstr	s0, [r5]
 8011602:	e7d3      	b.n	80115ac <_scanf_float+0x3ac>
 8011604:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011608:	e7f9      	b.n	80115fe <_scanf_float+0x3fe>
 801160a:	f04f 0900 	mov.w	r9, #0
 801160e:	e630      	b.n	8011272 <_scanf_float+0x72>
 8011610:	08016f66 	.word	0x08016f66
 8011614:	08017318 	.word	0x08017318

08011618 <std>:
 8011618:	2300      	movs	r3, #0
 801161a:	b510      	push	{r4, lr}
 801161c:	4604      	mov	r4, r0
 801161e:	e9c0 3300 	strd	r3, r3, [r0]
 8011622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011626:	6083      	str	r3, [r0, #8]
 8011628:	8181      	strh	r1, [r0, #12]
 801162a:	6643      	str	r3, [r0, #100]	@ 0x64
 801162c:	81c2      	strh	r2, [r0, #14]
 801162e:	6183      	str	r3, [r0, #24]
 8011630:	4619      	mov	r1, r3
 8011632:	2208      	movs	r2, #8
 8011634:	305c      	adds	r0, #92	@ 0x5c
 8011636:	f000 faf9 	bl	8011c2c <memset>
 801163a:	4b0d      	ldr	r3, [pc, #52]	@ (8011670 <std+0x58>)
 801163c:	6263      	str	r3, [r4, #36]	@ 0x24
 801163e:	4b0d      	ldr	r3, [pc, #52]	@ (8011674 <std+0x5c>)
 8011640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011642:	4b0d      	ldr	r3, [pc, #52]	@ (8011678 <std+0x60>)
 8011644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011646:	4b0d      	ldr	r3, [pc, #52]	@ (801167c <std+0x64>)
 8011648:	6323      	str	r3, [r4, #48]	@ 0x30
 801164a:	4b0d      	ldr	r3, [pc, #52]	@ (8011680 <std+0x68>)
 801164c:	6224      	str	r4, [r4, #32]
 801164e:	429c      	cmp	r4, r3
 8011650:	d006      	beq.n	8011660 <std+0x48>
 8011652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011656:	4294      	cmp	r4, r2
 8011658:	d002      	beq.n	8011660 <std+0x48>
 801165a:	33d0      	adds	r3, #208	@ 0xd0
 801165c:	429c      	cmp	r4, r3
 801165e:	d105      	bne.n	801166c <std+0x54>
 8011660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011668:	f000 bbb2 	b.w	8011dd0 <__retarget_lock_init_recursive>
 801166c:	bd10      	pop	{r4, pc}
 801166e:	bf00      	nop
 8011670:	08011a79 	.word	0x08011a79
 8011674:	08011a9f 	.word	0x08011a9f
 8011678:	08011ad7 	.word	0x08011ad7
 801167c:	08011afb 	.word	0x08011afb
 8011680:	2400510c 	.word	0x2400510c

08011684 <stdio_exit_handler>:
 8011684:	4a02      	ldr	r2, [pc, #8]	@ (8011690 <stdio_exit_handler+0xc>)
 8011686:	4903      	ldr	r1, [pc, #12]	@ (8011694 <stdio_exit_handler+0x10>)
 8011688:	4803      	ldr	r0, [pc, #12]	@ (8011698 <stdio_exit_handler+0x14>)
 801168a:	f000 b869 	b.w	8011760 <_fwalk_sglue>
 801168e:	bf00      	nop
 8011690:	24000020 	.word	0x24000020
 8011694:	08014df1 	.word	0x08014df1
 8011698:	24000030 	.word	0x24000030

0801169c <cleanup_stdio>:
 801169c:	6841      	ldr	r1, [r0, #4]
 801169e:	4b0c      	ldr	r3, [pc, #48]	@ (80116d0 <cleanup_stdio+0x34>)
 80116a0:	4299      	cmp	r1, r3
 80116a2:	b510      	push	{r4, lr}
 80116a4:	4604      	mov	r4, r0
 80116a6:	d001      	beq.n	80116ac <cleanup_stdio+0x10>
 80116a8:	f003 fba2 	bl	8014df0 <_fflush_r>
 80116ac:	68a1      	ldr	r1, [r4, #8]
 80116ae:	4b09      	ldr	r3, [pc, #36]	@ (80116d4 <cleanup_stdio+0x38>)
 80116b0:	4299      	cmp	r1, r3
 80116b2:	d002      	beq.n	80116ba <cleanup_stdio+0x1e>
 80116b4:	4620      	mov	r0, r4
 80116b6:	f003 fb9b 	bl	8014df0 <_fflush_r>
 80116ba:	68e1      	ldr	r1, [r4, #12]
 80116bc:	4b06      	ldr	r3, [pc, #24]	@ (80116d8 <cleanup_stdio+0x3c>)
 80116be:	4299      	cmp	r1, r3
 80116c0:	d004      	beq.n	80116cc <cleanup_stdio+0x30>
 80116c2:	4620      	mov	r0, r4
 80116c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116c8:	f003 bb92 	b.w	8014df0 <_fflush_r>
 80116cc:	bd10      	pop	{r4, pc}
 80116ce:	bf00      	nop
 80116d0:	2400510c 	.word	0x2400510c
 80116d4:	24005174 	.word	0x24005174
 80116d8:	240051dc 	.word	0x240051dc

080116dc <global_stdio_init.part.0>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	4b0b      	ldr	r3, [pc, #44]	@ (801170c <global_stdio_init.part.0+0x30>)
 80116e0:	4c0b      	ldr	r4, [pc, #44]	@ (8011710 <global_stdio_init.part.0+0x34>)
 80116e2:	4a0c      	ldr	r2, [pc, #48]	@ (8011714 <global_stdio_init.part.0+0x38>)
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	4620      	mov	r0, r4
 80116e8:	2200      	movs	r2, #0
 80116ea:	2104      	movs	r1, #4
 80116ec:	f7ff ff94 	bl	8011618 <std>
 80116f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80116f4:	2201      	movs	r2, #1
 80116f6:	2109      	movs	r1, #9
 80116f8:	f7ff ff8e 	bl	8011618 <std>
 80116fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011700:	2202      	movs	r2, #2
 8011702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011706:	2112      	movs	r1, #18
 8011708:	f7ff bf86 	b.w	8011618 <std>
 801170c:	24005244 	.word	0x24005244
 8011710:	2400510c 	.word	0x2400510c
 8011714:	08011685 	.word	0x08011685

08011718 <__sfp_lock_acquire>:
 8011718:	4801      	ldr	r0, [pc, #4]	@ (8011720 <__sfp_lock_acquire+0x8>)
 801171a:	f000 bb5a 	b.w	8011dd2 <__retarget_lock_acquire_recursive>
 801171e:	bf00      	nop
 8011720:	2400524d 	.word	0x2400524d

08011724 <__sfp_lock_release>:
 8011724:	4801      	ldr	r0, [pc, #4]	@ (801172c <__sfp_lock_release+0x8>)
 8011726:	f000 bb55 	b.w	8011dd4 <__retarget_lock_release_recursive>
 801172a:	bf00      	nop
 801172c:	2400524d 	.word	0x2400524d

08011730 <__sinit>:
 8011730:	b510      	push	{r4, lr}
 8011732:	4604      	mov	r4, r0
 8011734:	f7ff fff0 	bl	8011718 <__sfp_lock_acquire>
 8011738:	6a23      	ldr	r3, [r4, #32]
 801173a:	b11b      	cbz	r3, 8011744 <__sinit+0x14>
 801173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011740:	f7ff bff0 	b.w	8011724 <__sfp_lock_release>
 8011744:	4b04      	ldr	r3, [pc, #16]	@ (8011758 <__sinit+0x28>)
 8011746:	6223      	str	r3, [r4, #32]
 8011748:	4b04      	ldr	r3, [pc, #16]	@ (801175c <__sinit+0x2c>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d1f5      	bne.n	801173c <__sinit+0xc>
 8011750:	f7ff ffc4 	bl	80116dc <global_stdio_init.part.0>
 8011754:	e7f2      	b.n	801173c <__sinit+0xc>
 8011756:	bf00      	nop
 8011758:	0801169d 	.word	0x0801169d
 801175c:	24005244 	.word	0x24005244

08011760 <_fwalk_sglue>:
 8011760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011764:	4607      	mov	r7, r0
 8011766:	4688      	mov	r8, r1
 8011768:	4614      	mov	r4, r2
 801176a:	2600      	movs	r6, #0
 801176c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011770:	f1b9 0901 	subs.w	r9, r9, #1
 8011774:	d505      	bpl.n	8011782 <_fwalk_sglue+0x22>
 8011776:	6824      	ldr	r4, [r4, #0]
 8011778:	2c00      	cmp	r4, #0
 801177a:	d1f7      	bne.n	801176c <_fwalk_sglue+0xc>
 801177c:	4630      	mov	r0, r6
 801177e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011782:	89ab      	ldrh	r3, [r5, #12]
 8011784:	2b01      	cmp	r3, #1
 8011786:	d907      	bls.n	8011798 <_fwalk_sglue+0x38>
 8011788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801178c:	3301      	adds	r3, #1
 801178e:	d003      	beq.n	8011798 <_fwalk_sglue+0x38>
 8011790:	4629      	mov	r1, r5
 8011792:	4638      	mov	r0, r7
 8011794:	47c0      	blx	r8
 8011796:	4306      	orrs	r6, r0
 8011798:	3568      	adds	r5, #104	@ 0x68
 801179a:	e7e9      	b.n	8011770 <_fwalk_sglue+0x10>

0801179c <iprintf>:
 801179c:	b40f      	push	{r0, r1, r2, r3}
 801179e:	b507      	push	{r0, r1, r2, lr}
 80117a0:	4906      	ldr	r1, [pc, #24]	@ (80117bc <iprintf+0x20>)
 80117a2:	ab04      	add	r3, sp, #16
 80117a4:	6808      	ldr	r0, [r1, #0]
 80117a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80117aa:	6881      	ldr	r1, [r0, #8]
 80117ac:	9301      	str	r3, [sp, #4]
 80117ae:	f003 f835 	bl	801481c <_vfiprintf_r>
 80117b2:	b003      	add	sp, #12
 80117b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117b8:	b004      	add	sp, #16
 80117ba:	4770      	bx	lr
 80117bc:	2400002c 	.word	0x2400002c

080117c0 <_puts_r>:
 80117c0:	6a03      	ldr	r3, [r0, #32]
 80117c2:	b570      	push	{r4, r5, r6, lr}
 80117c4:	6884      	ldr	r4, [r0, #8]
 80117c6:	4605      	mov	r5, r0
 80117c8:	460e      	mov	r6, r1
 80117ca:	b90b      	cbnz	r3, 80117d0 <_puts_r+0x10>
 80117cc:	f7ff ffb0 	bl	8011730 <__sinit>
 80117d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117d2:	07db      	lsls	r3, r3, #31
 80117d4:	d405      	bmi.n	80117e2 <_puts_r+0x22>
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	0598      	lsls	r0, r3, #22
 80117da:	d402      	bmi.n	80117e2 <_puts_r+0x22>
 80117dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117de:	f000 faf8 	bl	8011dd2 <__retarget_lock_acquire_recursive>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	0719      	lsls	r1, r3, #28
 80117e6:	d502      	bpl.n	80117ee <_puts_r+0x2e>
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d135      	bne.n	801185a <_puts_r+0x9a>
 80117ee:	4621      	mov	r1, r4
 80117f0:	4628      	mov	r0, r5
 80117f2:	f000 f9c5 	bl	8011b80 <__swsetup_r>
 80117f6:	b380      	cbz	r0, 801185a <_puts_r+0x9a>
 80117f8:	f04f 35ff 	mov.w	r5, #4294967295
 80117fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117fe:	07da      	lsls	r2, r3, #31
 8011800:	d405      	bmi.n	801180e <_puts_r+0x4e>
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	059b      	lsls	r3, r3, #22
 8011806:	d402      	bmi.n	801180e <_puts_r+0x4e>
 8011808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801180a:	f000 fae3 	bl	8011dd4 <__retarget_lock_release_recursive>
 801180e:	4628      	mov	r0, r5
 8011810:	bd70      	pop	{r4, r5, r6, pc}
 8011812:	2b00      	cmp	r3, #0
 8011814:	da04      	bge.n	8011820 <_puts_r+0x60>
 8011816:	69a2      	ldr	r2, [r4, #24]
 8011818:	429a      	cmp	r2, r3
 801181a:	dc17      	bgt.n	801184c <_puts_r+0x8c>
 801181c:	290a      	cmp	r1, #10
 801181e:	d015      	beq.n	801184c <_puts_r+0x8c>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	6022      	str	r2, [r4, #0]
 8011826:	7019      	strb	r1, [r3, #0]
 8011828:	68a3      	ldr	r3, [r4, #8]
 801182a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801182e:	3b01      	subs	r3, #1
 8011830:	60a3      	str	r3, [r4, #8]
 8011832:	2900      	cmp	r1, #0
 8011834:	d1ed      	bne.n	8011812 <_puts_r+0x52>
 8011836:	2b00      	cmp	r3, #0
 8011838:	da11      	bge.n	801185e <_puts_r+0x9e>
 801183a:	4622      	mov	r2, r4
 801183c:	210a      	movs	r1, #10
 801183e:	4628      	mov	r0, r5
 8011840:	f000 f95f 	bl	8011b02 <__swbuf_r>
 8011844:	3001      	adds	r0, #1
 8011846:	d0d7      	beq.n	80117f8 <_puts_r+0x38>
 8011848:	250a      	movs	r5, #10
 801184a:	e7d7      	b.n	80117fc <_puts_r+0x3c>
 801184c:	4622      	mov	r2, r4
 801184e:	4628      	mov	r0, r5
 8011850:	f000 f957 	bl	8011b02 <__swbuf_r>
 8011854:	3001      	adds	r0, #1
 8011856:	d1e7      	bne.n	8011828 <_puts_r+0x68>
 8011858:	e7ce      	b.n	80117f8 <_puts_r+0x38>
 801185a:	3e01      	subs	r6, #1
 801185c:	e7e4      	b.n	8011828 <_puts_r+0x68>
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	6022      	str	r2, [r4, #0]
 8011864:	220a      	movs	r2, #10
 8011866:	701a      	strb	r2, [r3, #0]
 8011868:	e7ee      	b.n	8011848 <_puts_r+0x88>
	...

0801186c <puts>:
 801186c:	4b02      	ldr	r3, [pc, #8]	@ (8011878 <puts+0xc>)
 801186e:	4601      	mov	r1, r0
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	f7ff bfa5 	b.w	80117c0 <_puts_r>
 8011876:	bf00      	nop
 8011878:	2400002c 	.word	0x2400002c

0801187c <setvbuf>:
 801187c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011880:	461d      	mov	r5, r3
 8011882:	4b57      	ldr	r3, [pc, #348]	@ (80119e0 <setvbuf+0x164>)
 8011884:	681f      	ldr	r7, [r3, #0]
 8011886:	4604      	mov	r4, r0
 8011888:	460e      	mov	r6, r1
 801188a:	4690      	mov	r8, r2
 801188c:	b127      	cbz	r7, 8011898 <setvbuf+0x1c>
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	b913      	cbnz	r3, 8011898 <setvbuf+0x1c>
 8011892:	4638      	mov	r0, r7
 8011894:	f7ff ff4c 	bl	8011730 <__sinit>
 8011898:	f1b8 0f02 	cmp.w	r8, #2
 801189c:	d006      	beq.n	80118ac <setvbuf+0x30>
 801189e:	f1b8 0f01 	cmp.w	r8, #1
 80118a2:	f200 809a 	bhi.w	80119da <setvbuf+0x15e>
 80118a6:	2d00      	cmp	r5, #0
 80118a8:	f2c0 8097 	blt.w	80119da <setvbuf+0x15e>
 80118ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118ae:	07d9      	lsls	r1, r3, #31
 80118b0:	d405      	bmi.n	80118be <setvbuf+0x42>
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	059a      	lsls	r2, r3, #22
 80118b6:	d402      	bmi.n	80118be <setvbuf+0x42>
 80118b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118ba:	f000 fa8a 	bl	8011dd2 <__retarget_lock_acquire_recursive>
 80118be:	4621      	mov	r1, r4
 80118c0:	4638      	mov	r0, r7
 80118c2:	f003 fa95 	bl	8014df0 <_fflush_r>
 80118c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118c8:	b141      	cbz	r1, 80118dc <setvbuf+0x60>
 80118ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118ce:	4299      	cmp	r1, r3
 80118d0:	d002      	beq.n	80118d8 <setvbuf+0x5c>
 80118d2:	4638      	mov	r0, r7
 80118d4:	f001 f872 	bl	80129bc <_free_r>
 80118d8:	2300      	movs	r3, #0
 80118da:	6363      	str	r3, [r4, #52]	@ 0x34
 80118dc:	2300      	movs	r3, #0
 80118de:	61a3      	str	r3, [r4, #24]
 80118e0:	6063      	str	r3, [r4, #4]
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	061b      	lsls	r3, r3, #24
 80118e6:	d503      	bpl.n	80118f0 <setvbuf+0x74>
 80118e8:	6921      	ldr	r1, [r4, #16]
 80118ea:	4638      	mov	r0, r7
 80118ec:	f001 f866 	bl	80129bc <_free_r>
 80118f0:	89a3      	ldrh	r3, [r4, #12]
 80118f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80118f6:	f023 0303 	bic.w	r3, r3, #3
 80118fa:	f1b8 0f02 	cmp.w	r8, #2
 80118fe:	81a3      	strh	r3, [r4, #12]
 8011900:	d061      	beq.n	80119c6 <setvbuf+0x14a>
 8011902:	ab01      	add	r3, sp, #4
 8011904:	466a      	mov	r2, sp
 8011906:	4621      	mov	r1, r4
 8011908:	4638      	mov	r0, r7
 801190a:	f003 fa99 	bl	8014e40 <__swhatbuf_r>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	4318      	orrs	r0, r3
 8011912:	81a0      	strh	r0, [r4, #12]
 8011914:	bb2d      	cbnz	r5, 8011962 <setvbuf+0xe6>
 8011916:	9d00      	ldr	r5, [sp, #0]
 8011918:	4628      	mov	r0, r5
 801191a:	f001 f899 	bl	8012a50 <malloc>
 801191e:	4606      	mov	r6, r0
 8011920:	2800      	cmp	r0, #0
 8011922:	d152      	bne.n	80119ca <setvbuf+0x14e>
 8011924:	f8dd 9000 	ldr.w	r9, [sp]
 8011928:	45a9      	cmp	r9, r5
 801192a:	d140      	bne.n	80119ae <setvbuf+0x132>
 801192c:	f04f 35ff 	mov.w	r5, #4294967295
 8011930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011934:	f043 0202 	orr.w	r2, r3, #2
 8011938:	81a2      	strh	r2, [r4, #12]
 801193a:	2200      	movs	r2, #0
 801193c:	60a2      	str	r2, [r4, #8]
 801193e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8011942:	6022      	str	r2, [r4, #0]
 8011944:	6122      	str	r2, [r4, #16]
 8011946:	2201      	movs	r2, #1
 8011948:	6162      	str	r2, [r4, #20]
 801194a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801194c:	07d6      	lsls	r6, r2, #31
 801194e:	d404      	bmi.n	801195a <setvbuf+0xde>
 8011950:	0598      	lsls	r0, r3, #22
 8011952:	d402      	bmi.n	801195a <setvbuf+0xde>
 8011954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011956:	f000 fa3d 	bl	8011dd4 <__retarget_lock_release_recursive>
 801195a:	4628      	mov	r0, r5
 801195c:	b003      	add	sp, #12
 801195e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011962:	2e00      	cmp	r6, #0
 8011964:	d0d8      	beq.n	8011918 <setvbuf+0x9c>
 8011966:	6a3b      	ldr	r3, [r7, #32]
 8011968:	b913      	cbnz	r3, 8011970 <setvbuf+0xf4>
 801196a:	4638      	mov	r0, r7
 801196c:	f7ff fee0 	bl	8011730 <__sinit>
 8011970:	f1b8 0f01 	cmp.w	r8, #1
 8011974:	bf08      	it	eq
 8011976:	89a3      	ldrheq	r3, [r4, #12]
 8011978:	6026      	str	r6, [r4, #0]
 801197a:	bf04      	itt	eq
 801197c:	f043 0301 	orreq.w	r3, r3, #1
 8011980:	81a3      	strheq	r3, [r4, #12]
 8011982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011986:	f013 0208 	ands.w	r2, r3, #8
 801198a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801198e:	d01e      	beq.n	80119ce <setvbuf+0x152>
 8011990:	07d9      	lsls	r1, r3, #31
 8011992:	bf41      	itttt	mi
 8011994:	2200      	movmi	r2, #0
 8011996:	426d      	negmi	r5, r5
 8011998:	60a2      	strmi	r2, [r4, #8]
 801199a:	61a5      	strmi	r5, [r4, #24]
 801199c:	bf58      	it	pl
 801199e:	60a5      	strpl	r5, [r4, #8]
 80119a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80119a2:	07d2      	lsls	r2, r2, #31
 80119a4:	d401      	bmi.n	80119aa <setvbuf+0x12e>
 80119a6:	059b      	lsls	r3, r3, #22
 80119a8:	d513      	bpl.n	80119d2 <setvbuf+0x156>
 80119aa:	2500      	movs	r5, #0
 80119ac:	e7d5      	b.n	801195a <setvbuf+0xde>
 80119ae:	4648      	mov	r0, r9
 80119b0:	f001 f84e 	bl	8012a50 <malloc>
 80119b4:	4606      	mov	r6, r0
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d0b8      	beq.n	801192c <setvbuf+0xb0>
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119c0:	81a3      	strh	r3, [r4, #12]
 80119c2:	464d      	mov	r5, r9
 80119c4:	e7cf      	b.n	8011966 <setvbuf+0xea>
 80119c6:	2500      	movs	r5, #0
 80119c8:	e7b2      	b.n	8011930 <setvbuf+0xb4>
 80119ca:	46a9      	mov	r9, r5
 80119cc:	e7f5      	b.n	80119ba <setvbuf+0x13e>
 80119ce:	60a2      	str	r2, [r4, #8]
 80119d0:	e7e6      	b.n	80119a0 <setvbuf+0x124>
 80119d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119d4:	f000 f9fe 	bl	8011dd4 <__retarget_lock_release_recursive>
 80119d8:	e7e7      	b.n	80119aa <setvbuf+0x12e>
 80119da:	f04f 35ff 	mov.w	r5, #4294967295
 80119de:	e7bc      	b.n	801195a <setvbuf+0xde>
 80119e0:	2400002c 	.word	0x2400002c

080119e4 <siprintf>:
 80119e4:	b40e      	push	{r1, r2, r3}
 80119e6:	b500      	push	{lr}
 80119e8:	b09c      	sub	sp, #112	@ 0x70
 80119ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80119ec:	9002      	str	r0, [sp, #8]
 80119ee:	9006      	str	r0, [sp, #24]
 80119f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80119f4:	4809      	ldr	r0, [pc, #36]	@ (8011a1c <siprintf+0x38>)
 80119f6:	9107      	str	r1, [sp, #28]
 80119f8:	9104      	str	r1, [sp, #16]
 80119fa:	4909      	ldr	r1, [pc, #36]	@ (8011a20 <siprintf+0x3c>)
 80119fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a00:	9105      	str	r1, [sp, #20]
 8011a02:	6800      	ldr	r0, [r0, #0]
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	a902      	add	r1, sp, #8
 8011a08:	f002 fc16 	bl	8014238 <_svfiprintf_r>
 8011a0c:	9b02      	ldr	r3, [sp, #8]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	701a      	strb	r2, [r3, #0]
 8011a12:	b01c      	add	sp, #112	@ 0x70
 8011a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a18:	b003      	add	sp, #12
 8011a1a:	4770      	bx	lr
 8011a1c:	2400002c 	.word	0x2400002c
 8011a20:	ffff0208 	.word	0xffff0208

08011a24 <siscanf>:
 8011a24:	b40e      	push	{r1, r2, r3}
 8011a26:	b530      	push	{r4, r5, lr}
 8011a28:	b09c      	sub	sp, #112	@ 0x70
 8011a2a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011a2c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011a30:	f854 5b04 	ldr.w	r5, [r4], #4
 8011a34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011a38:	9002      	str	r0, [sp, #8]
 8011a3a:	9006      	str	r0, [sp, #24]
 8011a3c:	f7ee fca0 	bl	8000380 <strlen>
 8011a40:	4b0b      	ldr	r3, [pc, #44]	@ (8011a70 <siscanf+0x4c>)
 8011a42:	9003      	str	r0, [sp, #12]
 8011a44:	9007      	str	r0, [sp, #28]
 8011a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a48:	480a      	ldr	r0, [pc, #40]	@ (8011a74 <siscanf+0x50>)
 8011a4a:	9401      	str	r4, [sp, #4]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a50:	9314      	str	r3, [sp, #80]	@ 0x50
 8011a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4623      	mov	r3, r4
 8011a5e:	a902      	add	r1, sp, #8
 8011a60:	6800      	ldr	r0, [r0, #0]
 8011a62:	f002 fd3d 	bl	80144e0 <__ssvfiscanf_r>
 8011a66:	b01c      	add	sp, #112	@ 0x70
 8011a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a6c:	b003      	add	sp, #12
 8011a6e:	4770      	bx	lr
 8011a70:	08011a9b 	.word	0x08011a9b
 8011a74:	2400002c 	.word	0x2400002c

08011a78 <__sread>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	460c      	mov	r4, r1
 8011a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a80:	f000 f958 	bl	8011d34 <_read_r>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	bfab      	itete	ge
 8011a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a8c:	181b      	addge	r3, r3, r0
 8011a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011a92:	bfac      	ite	ge
 8011a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011a96:	81a3      	strhlt	r3, [r4, #12]
 8011a98:	bd10      	pop	{r4, pc}

08011a9a <__seofread>:
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	4770      	bx	lr

08011a9e <__swrite>:
 8011a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa2:	461f      	mov	r7, r3
 8011aa4:	898b      	ldrh	r3, [r1, #12]
 8011aa6:	05db      	lsls	r3, r3, #23
 8011aa8:	4605      	mov	r5, r0
 8011aaa:	460c      	mov	r4, r1
 8011aac:	4616      	mov	r6, r2
 8011aae:	d505      	bpl.n	8011abc <__swrite+0x1e>
 8011ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab4:	2302      	movs	r3, #2
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f000 f92a 	bl	8011d10 <_lseek_r>
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011ac6:	81a3      	strh	r3, [r4, #12]
 8011ac8:	4632      	mov	r2, r6
 8011aca:	463b      	mov	r3, r7
 8011acc:	4628      	mov	r0, r5
 8011ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad2:	f000 b941 	b.w	8011d58 <_write_r>

08011ad6 <__sseek>:
 8011ad6:	b510      	push	{r4, lr}
 8011ad8:	460c      	mov	r4, r1
 8011ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ade:	f000 f917 	bl	8011d10 <_lseek_r>
 8011ae2:	1c43      	adds	r3, r0, #1
 8011ae4:	89a3      	ldrh	r3, [r4, #12]
 8011ae6:	bf15      	itete	ne
 8011ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011af2:	81a3      	strheq	r3, [r4, #12]
 8011af4:	bf18      	it	ne
 8011af6:	81a3      	strhne	r3, [r4, #12]
 8011af8:	bd10      	pop	{r4, pc}

08011afa <__sclose>:
 8011afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011afe:	f000 b8a1 	b.w	8011c44 <_close_r>

08011b02 <__swbuf_r>:
 8011b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b04:	460e      	mov	r6, r1
 8011b06:	4614      	mov	r4, r2
 8011b08:	4605      	mov	r5, r0
 8011b0a:	b118      	cbz	r0, 8011b14 <__swbuf_r+0x12>
 8011b0c:	6a03      	ldr	r3, [r0, #32]
 8011b0e:	b90b      	cbnz	r3, 8011b14 <__swbuf_r+0x12>
 8011b10:	f7ff fe0e 	bl	8011730 <__sinit>
 8011b14:	69a3      	ldr	r3, [r4, #24]
 8011b16:	60a3      	str	r3, [r4, #8]
 8011b18:	89a3      	ldrh	r3, [r4, #12]
 8011b1a:	071a      	lsls	r2, r3, #28
 8011b1c:	d501      	bpl.n	8011b22 <__swbuf_r+0x20>
 8011b1e:	6923      	ldr	r3, [r4, #16]
 8011b20:	b943      	cbnz	r3, 8011b34 <__swbuf_r+0x32>
 8011b22:	4621      	mov	r1, r4
 8011b24:	4628      	mov	r0, r5
 8011b26:	f000 f82b 	bl	8011b80 <__swsetup_r>
 8011b2a:	b118      	cbz	r0, 8011b34 <__swbuf_r+0x32>
 8011b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8011b30:	4638      	mov	r0, r7
 8011b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b34:	6823      	ldr	r3, [r4, #0]
 8011b36:	6922      	ldr	r2, [r4, #16]
 8011b38:	1a98      	subs	r0, r3, r2
 8011b3a:	6963      	ldr	r3, [r4, #20]
 8011b3c:	b2f6      	uxtb	r6, r6
 8011b3e:	4283      	cmp	r3, r0
 8011b40:	4637      	mov	r7, r6
 8011b42:	dc05      	bgt.n	8011b50 <__swbuf_r+0x4e>
 8011b44:	4621      	mov	r1, r4
 8011b46:	4628      	mov	r0, r5
 8011b48:	f003 f952 	bl	8014df0 <_fflush_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d1ed      	bne.n	8011b2c <__swbuf_r+0x2a>
 8011b50:	68a3      	ldr	r3, [r4, #8]
 8011b52:	3b01      	subs	r3, #1
 8011b54:	60a3      	str	r3, [r4, #8]
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	1c5a      	adds	r2, r3, #1
 8011b5a:	6022      	str	r2, [r4, #0]
 8011b5c:	701e      	strb	r6, [r3, #0]
 8011b5e:	6962      	ldr	r2, [r4, #20]
 8011b60:	1c43      	adds	r3, r0, #1
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d004      	beq.n	8011b70 <__swbuf_r+0x6e>
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	07db      	lsls	r3, r3, #31
 8011b6a:	d5e1      	bpl.n	8011b30 <__swbuf_r+0x2e>
 8011b6c:	2e0a      	cmp	r6, #10
 8011b6e:	d1df      	bne.n	8011b30 <__swbuf_r+0x2e>
 8011b70:	4621      	mov	r1, r4
 8011b72:	4628      	mov	r0, r5
 8011b74:	f003 f93c 	bl	8014df0 <_fflush_r>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d0d9      	beq.n	8011b30 <__swbuf_r+0x2e>
 8011b7c:	e7d6      	b.n	8011b2c <__swbuf_r+0x2a>
	...

08011b80 <__swsetup_r>:
 8011b80:	b538      	push	{r3, r4, r5, lr}
 8011b82:	4b29      	ldr	r3, [pc, #164]	@ (8011c28 <__swsetup_r+0xa8>)
 8011b84:	4605      	mov	r5, r0
 8011b86:	6818      	ldr	r0, [r3, #0]
 8011b88:	460c      	mov	r4, r1
 8011b8a:	b118      	cbz	r0, 8011b94 <__swsetup_r+0x14>
 8011b8c:	6a03      	ldr	r3, [r0, #32]
 8011b8e:	b90b      	cbnz	r3, 8011b94 <__swsetup_r+0x14>
 8011b90:	f7ff fdce 	bl	8011730 <__sinit>
 8011b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b98:	0719      	lsls	r1, r3, #28
 8011b9a:	d422      	bmi.n	8011be2 <__swsetup_r+0x62>
 8011b9c:	06da      	lsls	r2, r3, #27
 8011b9e:	d407      	bmi.n	8011bb0 <__swsetup_r+0x30>
 8011ba0:	2209      	movs	r2, #9
 8011ba2:	602a      	str	r2, [r5, #0]
 8011ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ba8:	81a3      	strh	r3, [r4, #12]
 8011baa:	f04f 30ff 	mov.w	r0, #4294967295
 8011bae:	e033      	b.n	8011c18 <__swsetup_r+0x98>
 8011bb0:	0758      	lsls	r0, r3, #29
 8011bb2:	d512      	bpl.n	8011bda <__swsetup_r+0x5a>
 8011bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bb6:	b141      	cbz	r1, 8011bca <__swsetup_r+0x4a>
 8011bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bbc:	4299      	cmp	r1, r3
 8011bbe:	d002      	beq.n	8011bc6 <__swsetup_r+0x46>
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f000 fefb 	bl	80129bc <_free_r>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bca:	89a3      	ldrh	r3, [r4, #12]
 8011bcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011bd0:	81a3      	strh	r3, [r4, #12]
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	6063      	str	r3, [r4, #4]
 8011bd6:	6923      	ldr	r3, [r4, #16]
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	f043 0308 	orr.w	r3, r3, #8
 8011be0:	81a3      	strh	r3, [r4, #12]
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	b94b      	cbnz	r3, 8011bfa <__swsetup_r+0x7a>
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011bf0:	d003      	beq.n	8011bfa <__swsetup_r+0x7a>
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f003 f949 	bl	8014e8c <__smakebuf_r>
 8011bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bfe:	f013 0201 	ands.w	r2, r3, #1
 8011c02:	d00a      	beq.n	8011c1a <__swsetup_r+0x9a>
 8011c04:	2200      	movs	r2, #0
 8011c06:	60a2      	str	r2, [r4, #8]
 8011c08:	6962      	ldr	r2, [r4, #20]
 8011c0a:	4252      	negs	r2, r2
 8011c0c:	61a2      	str	r2, [r4, #24]
 8011c0e:	6922      	ldr	r2, [r4, #16]
 8011c10:	b942      	cbnz	r2, 8011c24 <__swsetup_r+0xa4>
 8011c12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c16:	d1c5      	bne.n	8011ba4 <__swsetup_r+0x24>
 8011c18:	bd38      	pop	{r3, r4, r5, pc}
 8011c1a:	0799      	lsls	r1, r3, #30
 8011c1c:	bf58      	it	pl
 8011c1e:	6962      	ldrpl	r2, [r4, #20]
 8011c20:	60a2      	str	r2, [r4, #8]
 8011c22:	e7f4      	b.n	8011c0e <__swsetup_r+0x8e>
 8011c24:	2000      	movs	r0, #0
 8011c26:	e7f7      	b.n	8011c18 <__swsetup_r+0x98>
 8011c28:	2400002c 	.word	0x2400002c

08011c2c <memset>:
 8011c2c:	4402      	add	r2, r0
 8011c2e:	4603      	mov	r3, r0
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d100      	bne.n	8011c36 <memset+0xa>
 8011c34:	4770      	bx	lr
 8011c36:	f803 1b01 	strb.w	r1, [r3], #1
 8011c3a:	e7f9      	b.n	8011c30 <memset+0x4>

08011c3c <_localeconv_r>:
 8011c3c:	4800      	ldr	r0, [pc, #0]	@ (8011c40 <_localeconv_r+0x4>)
 8011c3e:	4770      	bx	lr
 8011c40:	2400016c 	.word	0x2400016c

08011c44 <_close_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4d06      	ldr	r5, [pc, #24]	@ (8011c60 <_close_r+0x1c>)
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	4608      	mov	r0, r1
 8011c4e:	602b      	str	r3, [r5, #0]
 8011c50:	f7f2 fe02 	bl	8004858 <_close>
 8011c54:	1c43      	adds	r3, r0, #1
 8011c56:	d102      	bne.n	8011c5e <_close_r+0x1a>
 8011c58:	682b      	ldr	r3, [r5, #0]
 8011c5a:	b103      	cbz	r3, 8011c5e <_close_r+0x1a>
 8011c5c:	6023      	str	r3, [r4, #0]
 8011c5e:	bd38      	pop	{r3, r4, r5, pc}
 8011c60:	24005248 	.word	0x24005248

08011c64 <_reclaim_reent>:
 8011c64:	4b29      	ldr	r3, [pc, #164]	@ (8011d0c <_reclaim_reent+0xa8>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4283      	cmp	r3, r0
 8011c6a:	b570      	push	{r4, r5, r6, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	d04b      	beq.n	8011d08 <_reclaim_reent+0xa4>
 8011c70:	69c3      	ldr	r3, [r0, #28]
 8011c72:	b1ab      	cbz	r3, 8011ca0 <_reclaim_reent+0x3c>
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	b16b      	cbz	r3, 8011c94 <_reclaim_reent+0x30>
 8011c78:	2500      	movs	r5, #0
 8011c7a:	69e3      	ldr	r3, [r4, #28]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	5959      	ldr	r1, [r3, r5]
 8011c80:	2900      	cmp	r1, #0
 8011c82:	d13b      	bne.n	8011cfc <_reclaim_reent+0x98>
 8011c84:	3504      	adds	r5, #4
 8011c86:	2d80      	cmp	r5, #128	@ 0x80
 8011c88:	d1f7      	bne.n	8011c7a <_reclaim_reent+0x16>
 8011c8a:	69e3      	ldr	r3, [r4, #28]
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	68d9      	ldr	r1, [r3, #12]
 8011c90:	f000 fe94 	bl	80129bc <_free_r>
 8011c94:	69e3      	ldr	r3, [r4, #28]
 8011c96:	6819      	ldr	r1, [r3, #0]
 8011c98:	b111      	cbz	r1, 8011ca0 <_reclaim_reent+0x3c>
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f000 fe8e 	bl	80129bc <_free_r>
 8011ca0:	6961      	ldr	r1, [r4, #20]
 8011ca2:	b111      	cbz	r1, 8011caa <_reclaim_reent+0x46>
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f000 fe89 	bl	80129bc <_free_r>
 8011caa:	69e1      	ldr	r1, [r4, #28]
 8011cac:	b111      	cbz	r1, 8011cb4 <_reclaim_reent+0x50>
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 fe84 	bl	80129bc <_free_r>
 8011cb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011cb6:	b111      	cbz	r1, 8011cbe <_reclaim_reent+0x5a>
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 fe7f 	bl	80129bc <_free_r>
 8011cbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cc0:	b111      	cbz	r1, 8011cc8 <_reclaim_reent+0x64>
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 fe7a 	bl	80129bc <_free_r>
 8011cc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011cca:	b111      	cbz	r1, 8011cd2 <_reclaim_reent+0x6e>
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f000 fe75 	bl	80129bc <_free_r>
 8011cd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011cd4:	b111      	cbz	r1, 8011cdc <_reclaim_reent+0x78>
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f000 fe70 	bl	80129bc <_free_r>
 8011cdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011cde:	b111      	cbz	r1, 8011ce6 <_reclaim_reent+0x82>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f000 fe6b 	bl	80129bc <_free_r>
 8011ce6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011ce8:	b111      	cbz	r1, 8011cf0 <_reclaim_reent+0x8c>
 8011cea:	4620      	mov	r0, r4
 8011cec:	f000 fe66 	bl	80129bc <_free_r>
 8011cf0:	6a23      	ldr	r3, [r4, #32]
 8011cf2:	b14b      	cbz	r3, 8011d08 <_reclaim_reent+0xa4>
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cfa:	4718      	bx	r3
 8011cfc:	680e      	ldr	r6, [r1, #0]
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f000 fe5c 	bl	80129bc <_free_r>
 8011d04:	4631      	mov	r1, r6
 8011d06:	e7bb      	b.n	8011c80 <_reclaim_reent+0x1c>
 8011d08:	bd70      	pop	{r4, r5, r6, pc}
 8011d0a:	bf00      	nop
 8011d0c:	2400002c 	.word	0x2400002c

08011d10 <_lseek_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4d07      	ldr	r5, [pc, #28]	@ (8011d30 <_lseek_r+0x20>)
 8011d14:	4604      	mov	r4, r0
 8011d16:	4608      	mov	r0, r1
 8011d18:	4611      	mov	r1, r2
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	602a      	str	r2, [r5, #0]
 8011d1e:	461a      	mov	r2, r3
 8011d20:	f7f2 fdc1 	bl	80048a6 <_lseek>
 8011d24:	1c43      	adds	r3, r0, #1
 8011d26:	d102      	bne.n	8011d2e <_lseek_r+0x1e>
 8011d28:	682b      	ldr	r3, [r5, #0]
 8011d2a:	b103      	cbz	r3, 8011d2e <_lseek_r+0x1e>
 8011d2c:	6023      	str	r3, [r4, #0]
 8011d2e:	bd38      	pop	{r3, r4, r5, pc}
 8011d30:	24005248 	.word	0x24005248

08011d34 <_read_r>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	4d07      	ldr	r5, [pc, #28]	@ (8011d54 <_read_r+0x20>)
 8011d38:	4604      	mov	r4, r0
 8011d3a:	4608      	mov	r0, r1
 8011d3c:	4611      	mov	r1, r2
 8011d3e:	2200      	movs	r2, #0
 8011d40:	602a      	str	r2, [r5, #0]
 8011d42:	461a      	mov	r2, r3
 8011d44:	f7f2 fd4f 	bl	80047e6 <_read>
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	d102      	bne.n	8011d52 <_read_r+0x1e>
 8011d4c:	682b      	ldr	r3, [r5, #0]
 8011d4e:	b103      	cbz	r3, 8011d52 <_read_r+0x1e>
 8011d50:	6023      	str	r3, [r4, #0]
 8011d52:	bd38      	pop	{r3, r4, r5, pc}
 8011d54:	24005248 	.word	0x24005248

08011d58 <_write_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d07      	ldr	r5, [pc, #28]	@ (8011d78 <_write_r+0x20>)
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	4611      	mov	r1, r2
 8011d62:	2200      	movs	r2, #0
 8011d64:	602a      	str	r2, [r5, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	f7f2 fd5a 	bl	8004820 <_write>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d102      	bne.n	8011d76 <_write_r+0x1e>
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	b103      	cbz	r3, 8011d76 <_write_r+0x1e>
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	24005248 	.word	0x24005248

08011d7c <__errno>:
 8011d7c:	4b01      	ldr	r3, [pc, #4]	@ (8011d84 <__errno+0x8>)
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	2400002c 	.word	0x2400002c

08011d88 <__libc_init_array>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8011dc0 <__libc_init_array+0x38>)
 8011d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8011dc4 <__libc_init_array+0x3c>)
 8011d8e:	1b64      	subs	r4, r4, r5
 8011d90:	10a4      	asrs	r4, r4, #2
 8011d92:	2600      	movs	r6, #0
 8011d94:	42a6      	cmp	r6, r4
 8011d96:	d109      	bne.n	8011dac <__libc_init_array+0x24>
 8011d98:	4d0b      	ldr	r5, [pc, #44]	@ (8011dc8 <__libc_init_array+0x40>)
 8011d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8011dcc <__libc_init_array+0x44>)
 8011d9c:	f004 fc34 	bl	8016608 <_init>
 8011da0:	1b64      	subs	r4, r4, r5
 8011da2:	10a4      	asrs	r4, r4, #2
 8011da4:	2600      	movs	r6, #0
 8011da6:	42a6      	cmp	r6, r4
 8011da8:	d105      	bne.n	8011db6 <__libc_init_array+0x2e>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db0:	4798      	blx	r3
 8011db2:	3601      	adds	r6, #1
 8011db4:	e7ee      	b.n	8011d94 <__libc_init_array+0xc>
 8011db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dba:	4798      	blx	r3
 8011dbc:	3601      	adds	r6, #1
 8011dbe:	e7f2      	b.n	8011da6 <__libc_init_array+0x1e>
 8011dc0:	08017560 	.word	0x08017560
 8011dc4:	08017560 	.word	0x08017560
 8011dc8:	08017560 	.word	0x08017560
 8011dcc:	08017564 	.word	0x08017564

08011dd0 <__retarget_lock_init_recursive>:
 8011dd0:	4770      	bx	lr

08011dd2 <__retarget_lock_acquire_recursive>:
 8011dd2:	4770      	bx	lr

08011dd4 <__retarget_lock_release_recursive>:
 8011dd4:	4770      	bx	lr

08011dd6 <memcpy>:
 8011dd6:	440a      	add	r2, r1
 8011dd8:	4291      	cmp	r1, r2
 8011dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dde:	d100      	bne.n	8011de2 <memcpy+0xc>
 8011de0:	4770      	bx	lr
 8011de2:	b510      	push	{r4, lr}
 8011de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dec:	4291      	cmp	r1, r2
 8011dee:	d1f9      	bne.n	8011de4 <memcpy+0xe>
 8011df0:	bd10      	pop	{r4, pc}
	...

08011df4 <nanf>:
 8011df4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011dfc <nanf+0x8>
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	7fc00000 	.word	0x7fc00000

08011e00 <quorem>:
 8011e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	6903      	ldr	r3, [r0, #16]
 8011e06:	690c      	ldr	r4, [r1, #16]
 8011e08:	42a3      	cmp	r3, r4
 8011e0a:	4607      	mov	r7, r0
 8011e0c:	db7e      	blt.n	8011f0c <quorem+0x10c>
 8011e0e:	3c01      	subs	r4, #1
 8011e10:	f101 0814 	add.w	r8, r1, #20
 8011e14:	00a3      	lsls	r3, r4, #2
 8011e16:	f100 0514 	add.w	r5, r0, #20
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e20:	9301      	str	r3, [sp, #4]
 8011e22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e32:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e36:	d32e      	bcc.n	8011e96 <quorem+0x96>
 8011e38:	f04f 0a00 	mov.w	sl, #0
 8011e3c:	46c4      	mov	ip, r8
 8011e3e:	46ae      	mov	lr, r5
 8011e40:	46d3      	mov	fp, sl
 8011e42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011e46:	b298      	uxth	r0, r3
 8011e48:	fb06 a000 	mla	r0, r6, r0, sl
 8011e4c:	0c02      	lsrs	r2, r0, #16
 8011e4e:	0c1b      	lsrs	r3, r3, #16
 8011e50:	fb06 2303 	mla	r3, r6, r3, r2
 8011e54:	f8de 2000 	ldr.w	r2, [lr]
 8011e58:	b280      	uxth	r0, r0
 8011e5a:	b292      	uxth	r2, r2
 8011e5c:	1a12      	subs	r2, r2, r0
 8011e5e:	445a      	add	r2, fp
 8011e60:	f8de 0000 	ldr.w	r0, [lr]
 8011e64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011e6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011e72:	b292      	uxth	r2, r2
 8011e74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011e78:	45e1      	cmp	r9, ip
 8011e7a:	f84e 2b04 	str.w	r2, [lr], #4
 8011e7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011e82:	d2de      	bcs.n	8011e42 <quorem+0x42>
 8011e84:	9b00      	ldr	r3, [sp, #0]
 8011e86:	58eb      	ldr	r3, [r5, r3]
 8011e88:	b92b      	cbnz	r3, 8011e96 <quorem+0x96>
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	3b04      	subs	r3, #4
 8011e8e:	429d      	cmp	r5, r3
 8011e90:	461a      	mov	r2, r3
 8011e92:	d32f      	bcc.n	8011ef4 <quorem+0xf4>
 8011e94:	613c      	str	r4, [r7, #16]
 8011e96:	4638      	mov	r0, r7
 8011e98:	f001 f954 	bl	8013144 <__mcmp>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	db25      	blt.n	8011eec <quorem+0xec>
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ea8:	f8d1 c000 	ldr.w	ip, [r1]
 8011eac:	fa1f fe82 	uxth.w	lr, r2
 8011eb0:	fa1f f38c 	uxth.w	r3, ip
 8011eb4:	eba3 030e 	sub.w	r3, r3, lr
 8011eb8:	4403      	add	r3, r0
 8011eba:	0c12      	lsrs	r2, r2, #16
 8011ebc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011ec0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eca:	45c1      	cmp	r9, r8
 8011ecc:	f841 3b04 	str.w	r3, [r1], #4
 8011ed0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ed4:	d2e6      	bcs.n	8011ea4 <quorem+0xa4>
 8011ed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ede:	b922      	cbnz	r2, 8011eea <quorem+0xea>
 8011ee0:	3b04      	subs	r3, #4
 8011ee2:	429d      	cmp	r5, r3
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	d30b      	bcc.n	8011f00 <quorem+0x100>
 8011ee8:	613c      	str	r4, [r7, #16]
 8011eea:	3601      	adds	r6, #1
 8011eec:	4630      	mov	r0, r6
 8011eee:	b003      	add	sp, #12
 8011ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef4:	6812      	ldr	r2, [r2, #0]
 8011ef6:	3b04      	subs	r3, #4
 8011ef8:	2a00      	cmp	r2, #0
 8011efa:	d1cb      	bne.n	8011e94 <quorem+0x94>
 8011efc:	3c01      	subs	r4, #1
 8011efe:	e7c6      	b.n	8011e8e <quorem+0x8e>
 8011f00:	6812      	ldr	r2, [r2, #0]
 8011f02:	3b04      	subs	r3, #4
 8011f04:	2a00      	cmp	r2, #0
 8011f06:	d1ef      	bne.n	8011ee8 <quorem+0xe8>
 8011f08:	3c01      	subs	r4, #1
 8011f0a:	e7ea      	b.n	8011ee2 <quorem+0xe2>
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	e7ee      	b.n	8011eee <quorem+0xee>

08011f10 <_dtoa_r>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	ed2d 8b02 	vpush	{d8}
 8011f18:	69c7      	ldr	r7, [r0, #28]
 8011f1a:	b091      	sub	sp, #68	@ 0x44
 8011f1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f20:	ec55 4b10 	vmov	r4, r5, d0
 8011f24:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011f26:	9107      	str	r1, [sp, #28]
 8011f28:	4681      	mov	r9, r0
 8011f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f2e:	b97f      	cbnz	r7, 8011f50 <_dtoa_r+0x40>
 8011f30:	2010      	movs	r0, #16
 8011f32:	f000 fd8d 	bl	8012a50 <malloc>
 8011f36:	4602      	mov	r2, r0
 8011f38:	f8c9 001c 	str.w	r0, [r9, #28]
 8011f3c:	b920      	cbnz	r0, 8011f48 <_dtoa_r+0x38>
 8011f3e:	4ba0      	ldr	r3, [pc, #640]	@ (80121c0 <_dtoa_r+0x2b0>)
 8011f40:	21ef      	movs	r1, #239	@ 0xef
 8011f42:	48a0      	ldr	r0, [pc, #640]	@ (80121c4 <_dtoa_r+0x2b4>)
 8011f44:	f003 f8b8 	bl	80150b8 <__assert_func>
 8011f48:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011f4c:	6007      	str	r7, [r0, #0]
 8011f4e:	60c7      	str	r7, [r0, #12]
 8011f50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011f54:	6819      	ldr	r1, [r3, #0]
 8011f56:	b159      	cbz	r1, 8011f70 <_dtoa_r+0x60>
 8011f58:	685a      	ldr	r2, [r3, #4]
 8011f5a:	604a      	str	r2, [r1, #4]
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	4093      	lsls	r3, r2
 8011f60:	608b      	str	r3, [r1, #8]
 8011f62:	4648      	mov	r0, r9
 8011f64:	f000 fe6a 	bl	8012c3c <_Bfree>
 8011f68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	601a      	str	r2, [r3, #0]
 8011f70:	1e2b      	subs	r3, r5, #0
 8011f72:	bfbb      	ittet	lt
 8011f74:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011f78:	9303      	strlt	r3, [sp, #12]
 8011f7a:	2300      	movge	r3, #0
 8011f7c:	2201      	movlt	r2, #1
 8011f7e:	bfac      	ite	ge
 8011f80:	6033      	strge	r3, [r6, #0]
 8011f82:	6032      	strlt	r2, [r6, #0]
 8011f84:	4b90      	ldr	r3, [pc, #576]	@ (80121c8 <_dtoa_r+0x2b8>)
 8011f86:	9e03      	ldr	r6, [sp, #12]
 8011f88:	43b3      	bics	r3, r6
 8011f8a:	d110      	bne.n	8011fae <_dtoa_r+0x9e>
 8011f8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f8e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011f98:	4323      	orrs	r3, r4
 8011f9a:	f000 84de 	beq.w	801295a <_dtoa_r+0xa4a>
 8011f9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011fa0:	4f8a      	ldr	r7, [pc, #552]	@ (80121cc <_dtoa_r+0x2bc>)
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 84e0 	beq.w	8012968 <_dtoa_r+0xa58>
 8011fa8:	1cfb      	adds	r3, r7, #3
 8011faa:	f000 bcdb 	b.w	8012964 <_dtoa_r+0xa54>
 8011fae:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011fb2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fba:	d10a      	bne.n	8011fd2 <_dtoa_r+0xc2>
 8011fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	6013      	str	r3, [r2, #0]
 8011fc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011fc4:	b113      	cbz	r3, 8011fcc <_dtoa_r+0xbc>
 8011fc6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011fc8:	4b81      	ldr	r3, [pc, #516]	@ (80121d0 <_dtoa_r+0x2c0>)
 8011fca:	6013      	str	r3, [r2, #0]
 8011fcc:	4f81      	ldr	r7, [pc, #516]	@ (80121d4 <_dtoa_r+0x2c4>)
 8011fce:	f000 bccb 	b.w	8012968 <_dtoa_r+0xa58>
 8011fd2:	aa0e      	add	r2, sp, #56	@ 0x38
 8011fd4:	a90f      	add	r1, sp, #60	@ 0x3c
 8011fd6:	4648      	mov	r0, r9
 8011fd8:	eeb0 0b48 	vmov.f64	d0, d8
 8011fdc:	f001 f9d2 	bl	8013384 <__d2b>
 8011fe0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fe6:	9001      	str	r0, [sp, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d045      	beq.n	8012078 <_dtoa_r+0x168>
 8011fec:	eeb0 7b48 	vmov.f64	d7, d8
 8011ff0:	ee18 1a90 	vmov	r1, s17
 8011ff4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011ff8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011ffc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012000:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012004:	2500      	movs	r5, #0
 8012006:	ee07 1a90 	vmov	s15, r1
 801200a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801200e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80121a8 <_dtoa_r+0x298>
 8012012:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012016:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80121b0 <_dtoa_r+0x2a0>
 801201a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801201e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80121b8 <_dtoa_r+0x2a8>
 8012022:	ee07 3a90 	vmov	s15, r3
 8012026:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801202a:	eeb0 7b46 	vmov.f64	d7, d6
 801202e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012032:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012036:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203e:	ee16 8a90 	vmov	r8, s13
 8012042:	d508      	bpl.n	8012056 <_dtoa_r+0x146>
 8012044:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012048:	eeb4 6b47 	vcmp.f64	d6, d7
 801204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012050:	bf18      	it	ne
 8012052:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012056:	f1b8 0f16 	cmp.w	r8, #22
 801205a:	d82b      	bhi.n	80120b4 <_dtoa_r+0x1a4>
 801205c:	495e      	ldr	r1, [pc, #376]	@ (80121d8 <_dtoa_r+0x2c8>)
 801205e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012062:	ed91 7b00 	vldr	d7, [r1]
 8012066:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	d501      	bpl.n	8012074 <_dtoa_r+0x164>
 8012070:	f108 38ff 	add.w	r8, r8, #4294967295
 8012074:	2100      	movs	r1, #0
 8012076:	e01e      	b.n	80120b6 <_dtoa_r+0x1a6>
 8012078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801207a:	4413      	add	r3, r2
 801207c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012080:	2920      	cmp	r1, #32
 8012082:	bfc1      	itttt	gt
 8012084:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012088:	408e      	lslgt	r6, r1
 801208a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801208e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012092:	bfd6      	itet	le
 8012094:	f1c1 0120 	rsble	r1, r1, #32
 8012098:	4331      	orrgt	r1, r6
 801209a:	fa04 f101 	lslle.w	r1, r4, r1
 801209e:	ee07 1a90 	vmov	s15, r1
 80120a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80120a6:	3b01      	subs	r3, #1
 80120a8:	ee17 1a90 	vmov	r1, s15
 80120ac:	2501      	movs	r5, #1
 80120ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80120b2:	e7a8      	b.n	8012006 <_dtoa_r+0xf6>
 80120b4:	2101      	movs	r1, #1
 80120b6:	1ad2      	subs	r2, r2, r3
 80120b8:	1e53      	subs	r3, r2, #1
 80120ba:	9306      	str	r3, [sp, #24]
 80120bc:	bf45      	ittet	mi
 80120be:	f1c2 0301 	rsbmi	r3, r2, #1
 80120c2:	9305      	strmi	r3, [sp, #20]
 80120c4:	2300      	movpl	r3, #0
 80120c6:	2300      	movmi	r3, #0
 80120c8:	bf4c      	ite	mi
 80120ca:	9306      	strmi	r3, [sp, #24]
 80120cc:	9305      	strpl	r3, [sp, #20]
 80120ce:	f1b8 0f00 	cmp.w	r8, #0
 80120d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80120d4:	db18      	blt.n	8012108 <_dtoa_r+0x1f8>
 80120d6:	9b06      	ldr	r3, [sp, #24]
 80120d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80120dc:	4443      	add	r3, r8
 80120de:	9306      	str	r3, [sp, #24]
 80120e0:	2300      	movs	r3, #0
 80120e2:	9a07      	ldr	r2, [sp, #28]
 80120e4:	2a09      	cmp	r2, #9
 80120e6:	d849      	bhi.n	801217c <_dtoa_r+0x26c>
 80120e8:	2a05      	cmp	r2, #5
 80120ea:	bfc4      	itt	gt
 80120ec:	3a04      	subgt	r2, #4
 80120ee:	9207      	strgt	r2, [sp, #28]
 80120f0:	9a07      	ldr	r2, [sp, #28]
 80120f2:	f1a2 0202 	sub.w	r2, r2, #2
 80120f6:	bfcc      	ite	gt
 80120f8:	2400      	movgt	r4, #0
 80120fa:	2401      	movle	r4, #1
 80120fc:	2a03      	cmp	r2, #3
 80120fe:	d848      	bhi.n	8012192 <_dtoa_r+0x282>
 8012100:	e8df f002 	tbb	[pc, r2]
 8012104:	3a2c2e0b 	.word	0x3a2c2e0b
 8012108:	9b05      	ldr	r3, [sp, #20]
 801210a:	2200      	movs	r2, #0
 801210c:	eba3 0308 	sub.w	r3, r3, r8
 8012110:	9305      	str	r3, [sp, #20]
 8012112:	920a      	str	r2, [sp, #40]	@ 0x28
 8012114:	f1c8 0300 	rsb	r3, r8, #0
 8012118:	e7e3      	b.n	80120e2 <_dtoa_r+0x1d2>
 801211a:	2200      	movs	r2, #0
 801211c:	9208      	str	r2, [sp, #32]
 801211e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012120:	2a00      	cmp	r2, #0
 8012122:	dc39      	bgt.n	8012198 <_dtoa_r+0x288>
 8012124:	f04f 0b01 	mov.w	fp, #1
 8012128:	46da      	mov	sl, fp
 801212a:	465a      	mov	r2, fp
 801212c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012130:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012134:	2100      	movs	r1, #0
 8012136:	2004      	movs	r0, #4
 8012138:	f100 0614 	add.w	r6, r0, #20
 801213c:	4296      	cmp	r6, r2
 801213e:	d930      	bls.n	80121a2 <_dtoa_r+0x292>
 8012140:	6079      	str	r1, [r7, #4]
 8012142:	4648      	mov	r0, r9
 8012144:	9304      	str	r3, [sp, #16]
 8012146:	f000 fd39 	bl	8012bbc <_Balloc>
 801214a:	9b04      	ldr	r3, [sp, #16]
 801214c:	4607      	mov	r7, r0
 801214e:	2800      	cmp	r0, #0
 8012150:	d146      	bne.n	80121e0 <_dtoa_r+0x2d0>
 8012152:	4b22      	ldr	r3, [pc, #136]	@ (80121dc <_dtoa_r+0x2cc>)
 8012154:	4602      	mov	r2, r0
 8012156:	f240 11af 	movw	r1, #431	@ 0x1af
 801215a:	e6f2      	b.n	8011f42 <_dtoa_r+0x32>
 801215c:	2201      	movs	r2, #1
 801215e:	e7dd      	b.n	801211c <_dtoa_r+0x20c>
 8012160:	2200      	movs	r2, #0
 8012162:	9208      	str	r2, [sp, #32]
 8012164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012166:	eb08 0b02 	add.w	fp, r8, r2
 801216a:	f10b 0a01 	add.w	sl, fp, #1
 801216e:	4652      	mov	r2, sl
 8012170:	2a01      	cmp	r2, #1
 8012172:	bfb8      	it	lt
 8012174:	2201      	movlt	r2, #1
 8012176:	e7db      	b.n	8012130 <_dtoa_r+0x220>
 8012178:	2201      	movs	r2, #1
 801217a:	e7f2      	b.n	8012162 <_dtoa_r+0x252>
 801217c:	2401      	movs	r4, #1
 801217e:	2200      	movs	r2, #0
 8012180:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012184:	f04f 3bff 	mov.w	fp, #4294967295
 8012188:	2100      	movs	r1, #0
 801218a:	46da      	mov	sl, fp
 801218c:	2212      	movs	r2, #18
 801218e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012190:	e7ce      	b.n	8012130 <_dtoa_r+0x220>
 8012192:	2201      	movs	r2, #1
 8012194:	9208      	str	r2, [sp, #32]
 8012196:	e7f5      	b.n	8012184 <_dtoa_r+0x274>
 8012198:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801219c:	46da      	mov	sl, fp
 801219e:	465a      	mov	r2, fp
 80121a0:	e7c6      	b.n	8012130 <_dtoa_r+0x220>
 80121a2:	3101      	adds	r1, #1
 80121a4:	0040      	lsls	r0, r0, #1
 80121a6:	e7c7      	b.n	8012138 <_dtoa_r+0x228>
 80121a8:	636f4361 	.word	0x636f4361
 80121ac:	3fd287a7 	.word	0x3fd287a7
 80121b0:	8b60c8b3 	.word	0x8b60c8b3
 80121b4:	3fc68a28 	.word	0x3fc68a28
 80121b8:	509f79fb 	.word	0x509f79fb
 80121bc:	3fd34413 	.word	0x3fd34413
 80121c0:	08016f78 	.word	0x08016f78
 80121c4:	08016f8f 	.word	0x08016f8f
 80121c8:	7ff00000 	.word	0x7ff00000
 80121cc:	08016f74 	.word	0x08016f74
 80121d0:	080172d1 	.word	0x080172d1
 80121d4:	080172d0 	.word	0x080172d0
 80121d8:	08017088 	.word	0x08017088
 80121dc:	08016fe7 	.word	0x08016fe7
 80121e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80121e4:	f1ba 0f0e 	cmp.w	sl, #14
 80121e8:	6010      	str	r0, [r2, #0]
 80121ea:	d86f      	bhi.n	80122cc <_dtoa_r+0x3bc>
 80121ec:	2c00      	cmp	r4, #0
 80121ee:	d06d      	beq.n	80122cc <_dtoa_r+0x3bc>
 80121f0:	f1b8 0f00 	cmp.w	r8, #0
 80121f4:	f340 80c2 	ble.w	801237c <_dtoa_r+0x46c>
 80121f8:	4aca      	ldr	r2, [pc, #808]	@ (8012524 <_dtoa_r+0x614>)
 80121fa:	f008 010f 	and.w	r1, r8, #15
 80121fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012202:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012206:	ed92 7b00 	vldr	d7, [r2]
 801220a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801220e:	f000 80a9 	beq.w	8012364 <_dtoa_r+0x454>
 8012212:	4ac5      	ldr	r2, [pc, #788]	@ (8012528 <_dtoa_r+0x618>)
 8012214:	ed92 6b08 	vldr	d6, [r2, #32]
 8012218:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801221c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012220:	f001 010f 	and.w	r1, r1, #15
 8012224:	2203      	movs	r2, #3
 8012226:	48c0      	ldr	r0, [pc, #768]	@ (8012528 <_dtoa_r+0x618>)
 8012228:	2900      	cmp	r1, #0
 801222a:	f040 809d 	bne.w	8012368 <_dtoa_r+0x458>
 801222e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012232:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012236:	ed8d 7b02 	vstr	d7, [sp, #8]
 801223a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801223c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012240:	2900      	cmp	r1, #0
 8012242:	f000 80c1 	beq.w	80123c8 <_dtoa_r+0x4b8>
 8012246:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801224a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012252:	f140 80b9 	bpl.w	80123c8 <_dtoa_r+0x4b8>
 8012256:	f1ba 0f00 	cmp.w	sl, #0
 801225a:	f000 80b5 	beq.w	80123c8 <_dtoa_r+0x4b8>
 801225e:	f1bb 0f00 	cmp.w	fp, #0
 8012262:	dd31      	ble.n	80122c8 <_dtoa_r+0x3b8>
 8012264:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012268:	ee27 7b06 	vmul.f64	d7, d7, d6
 801226c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012270:	f108 31ff 	add.w	r1, r8, #4294967295
 8012274:	9104      	str	r1, [sp, #16]
 8012276:	3201      	adds	r2, #1
 8012278:	465c      	mov	r4, fp
 801227a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801227e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012282:	ee07 2a90 	vmov	s15, r2
 8012286:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801228a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801228e:	ee15 2a90 	vmov	r2, s11
 8012292:	ec51 0b15 	vmov	r0, r1, d5
 8012296:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801229a:	2c00      	cmp	r4, #0
 801229c:	f040 8098 	bne.w	80123d0 <_dtoa_r+0x4c0>
 80122a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80122a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122a8:	ec41 0b17 	vmov	d7, r0, r1
 80122ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b4:	f300 8261 	bgt.w	801277a <_dtoa_r+0x86a>
 80122b8:	eeb1 7b47 	vneg.f64	d7, d7
 80122bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c4:	f100 80f5 	bmi.w	80124b2 <_dtoa_r+0x5a2>
 80122c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80122cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80122ce:	2a00      	cmp	r2, #0
 80122d0:	f2c0 812c 	blt.w	801252c <_dtoa_r+0x61c>
 80122d4:	f1b8 0f0e 	cmp.w	r8, #14
 80122d8:	f300 8128 	bgt.w	801252c <_dtoa_r+0x61c>
 80122dc:	4b91      	ldr	r3, [pc, #580]	@ (8012524 <_dtoa_r+0x614>)
 80122de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80122e2:	ed93 6b00 	vldr	d6, [r3]
 80122e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	da03      	bge.n	80122f4 <_dtoa_r+0x3e4>
 80122ec:	f1ba 0f00 	cmp.w	sl, #0
 80122f0:	f340 80d2 	ble.w	8012498 <_dtoa_r+0x588>
 80122f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80122f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122fc:	463e      	mov	r6, r7
 80122fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012302:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012306:	ee15 3a10 	vmov	r3, s10
 801230a:	3330      	adds	r3, #48	@ 0x30
 801230c:	f806 3b01 	strb.w	r3, [r6], #1
 8012310:	1bf3      	subs	r3, r6, r7
 8012312:	459a      	cmp	sl, r3
 8012314:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012318:	eea3 7b46 	vfms.f64	d7, d3, d6
 801231c:	f040 80f8 	bne.w	8012510 <_dtoa_r+0x600>
 8012320:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012324:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232c:	f300 80dd 	bgt.w	80124ea <_dtoa_r+0x5da>
 8012330:	eeb4 7b46 	vcmp.f64	d7, d6
 8012334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012338:	d104      	bne.n	8012344 <_dtoa_r+0x434>
 801233a:	ee15 3a10 	vmov	r3, s10
 801233e:	07db      	lsls	r3, r3, #31
 8012340:	f100 80d3 	bmi.w	80124ea <_dtoa_r+0x5da>
 8012344:	9901      	ldr	r1, [sp, #4]
 8012346:	4648      	mov	r0, r9
 8012348:	f000 fc78 	bl	8012c3c <_Bfree>
 801234c:	2300      	movs	r3, #0
 801234e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012350:	7033      	strb	r3, [r6, #0]
 8012352:	f108 0301 	add.w	r3, r8, #1
 8012356:	6013      	str	r3, [r2, #0]
 8012358:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801235a:	2b00      	cmp	r3, #0
 801235c:	f000 8304 	beq.w	8012968 <_dtoa_r+0xa58>
 8012360:	601e      	str	r6, [r3, #0]
 8012362:	e301      	b.n	8012968 <_dtoa_r+0xa58>
 8012364:	2202      	movs	r2, #2
 8012366:	e75e      	b.n	8012226 <_dtoa_r+0x316>
 8012368:	07cc      	lsls	r4, r1, #31
 801236a:	d504      	bpl.n	8012376 <_dtoa_r+0x466>
 801236c:	ed90 6b00 	vldr	d6, [r0]
 8012370:	3201      	adds	r2, #1
 8012372:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012376:	1049      	asrs	r1, r1, #1
 8012378:	3008      	adds	r0, #8
 801237a:	e755      	b.n	8012228 <_dtoa_r+0x318>
 801237c:	d022      	beq.n	80123c4 <_dtoa_r+0x4b4>
 801237e:	f1c8 0100 	rsb	r1, r8, #0
 8012382:	4a68      	ldr	r2, [pc, #416]	@ (8012524 <_dtoa_r+0x614>)
 8012384:	f001 000f 	and.w	r0, r1, #15
 8012388:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801238c:	ed92 7b00 	vldr	d7, [r2]
 8012390:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012398:	4863      	ldr	r0, [pc, #396]	@ (8012528 <_dtoa_r+0x618>)
 801239a:	1109      	asrs	r1, r1, #4
 801239c:	2400      	movs	r4, #0
 801239e:	2202      	movs	r2, #2
 80123a0:	b929      	cbnz	r1, 80123ae <_dtoa_r+0x49e>
 80123a2:	2c00      	cmp	r4, #0
 80123a4:	f43f af49 	beq.w	801223a <_dtoa_r+0x32a>
 80123a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80123ac:	e745      	b.n	801223a <_dtoa_r+0x32a>
 80123ae:	07ce      	lsls	r6, r1, #31
 80123b0:	d505      	bpl.n	80123be <_dtoa_r+0x4ae>
 80123b2:	ed90 6b00 	vldr	d6, [r0]
 80123b6:	3201      	adds	r2, #1
 80123b8:	2401      	movs	r4, #1
 80123ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123be:	1049      	asrs	r1, r1, #1
 80123c0:	3008      	adds	r0, #8
 80123c2:	e7ed      	b.n	80123a0 <_dtoa_r+0x490>
 80123c4:	2202      	movs	r2, #2
 80123c6:	e738      	b.n	801223a <_dtoa_r+0x32a>
 80123c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80123cc:	4654      	mov	r4, sl
 80123ce:	e754      	b.n	801227a <_dtoa_r+0x36a>
 80123d0:	4a54      	ldr	r2, [pc, #336]	@ (8012524 <_dtoa_r+0x614>)
 80123d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80123d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80123da:	9a08      	ldr	r2, [sp, #32]
 80123dc:	ec41 0b17 	vmov	d7, r0, r1
 80123e0:	443c      	add	r4, r7
 80123e2:	b34a      	cbz	r2, 8012438 <_dtoa_r+0x528>
 80123e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80123e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80123ec:	463e      	mov	r6, r7
 80123ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80123f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80123f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80123fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123fe:	ee14 2a90 	vmov	r2, s9
 8012402:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012406:	3230      	adds	r2, #48	@ 0x30
 8012408:	ee36 6b45 	vsub.f64	d6, d6, d5
 801240c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012414:	f806 2b01 	strb.w	r2, [r6], #1
 8012418:	d438      	bmi.n	801248c <_dtoa_r+0x57c>
 801241a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801241e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	d462      	bmi.n	80124ee <_dtoa_r+0x5de>
 8012428:	42a6      	cmp	r6, r4
 801242a:	f43f af4d 	beq.w	80122c8 <_dtoa_r+0x3b8>
 801242e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012432:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012436:	e7e0      	b.n	80123fa <_dtoa_r+0x4ea>
 8012438:	4621      	mov	r1, r4
 801243a:	463e      	mov	r6, r7
 801243c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012440:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012444:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012448:	ee14 2a90 	vmov	r2, s9
 801244c:	3230      	adds	r2, #48	@ 0x30
 801244e:	f806 2b01 	strb.w	r2, [r6], #1
 8012452:	42a6      	cmp	r6, r4
 8012454:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012458:	ee36 6b45 	vsub.f64	d6, d6, d5
 801245c:	d119      	bne.n	8012492 <_dtoa_r+0x582>
 801245e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012462:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012466:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246e:	dc3e      	bgt.n	80124ee <_dtoa_r+0x5de>
 8012470:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012474:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247c:	f57f af24 	bpl.w	80122c8 <_dtoa_r+0x3b8>
 8012480:	460e      	mov	r6, r1
 8012482:	3901      	subs	r1, #1
 8012484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012488:	2b30      	cmp	r3, #48	@ 0x30
 801248a:	d0f9      	beq.n	8012480 <_dtoa_r+0x570>
 801248c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012490:	e758      	b.n	8012344 <_dtoa_r+0x434>
 8012492:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012496:	e7d5      	b.n	8012444 <_dtoa_r+0x534>
 8012498:	d10b      	bne.n	80124b2 <_dtoa_r+0x5a2>
 801249a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801249e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80124a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ae:	f2c0 8161 	blt.w	8012774 <_dtoa_r+0x864>
 80124b2:	2400      	movs	r4, #0
 80124b4:	4625      	mov	r5, r4
 80124b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124b8:	43db      	mvns	r3, r3
 80124ba:	9304      	str	r3, [sp, #16]
 80124bc:	463e      	mov	r6, r7
 80124be:	f04f 0800 	mov.w	r8, #0
 80124c2:	4621      	mov	r1, r4
 80124c4:	4648      	mov	r0, r9
 80124c6:	f000 fbb9 	bl	8012c3c <_Bfree>
 80124ca:	2d00      	cmp	r5, #0
 80124cc:	d0de      	beq.n	801248c <_dtoa_r+0x57c>
 80124ce:	f1b8 0f00 	cmp.w	r8, #0
 80124d2:	d005      	beq.n	80124e0 <_dtoa_r+0x5d0>
 80124d4:	45a8      	cmp	r8, r5
 80124d6:	d003      	beq.n	80124e0 <_dtoa_r+0x5d0>
 80124d8:	4641      	mov	r1, r8
 80124da:	4648      	mov	r0, r9
 80124dc:	f000 fbae 	bl	8012c3c <_Bfree>
 80124e0:	4629      	mov	r1, r5
 80124e2:	4648      	mov	r0, r9
 80124e4:	f000 fbaa 	bl	8012c3c <_Bfree>
 80124e8:	e7d0      	b.n	801248c <_dtoa_r+0x57c>
 80124ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80124ee:	4633      	mov	r3, r6
 80124f0:	461e      	mov	r6, r3
 80124f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124f6:	2a39      	cmp	r2, #57	@ 0x39
 80124f8:	d106      	bne.n	8012508 <_dtoa_r+0x5f8>
 80124fa:	429f      	cmp	r7, r3
 80124fc:	d1f8      	bne.n	80124f0 <_dtoa_r+0x5e0>
 80124fe:	9a04      	ldr	r2, [sp, #16]
 8012500:	3201      	adds	r2, #1
 8012502:	9204      	str	r2, [sp, #16]
 8012504:	2230      	movs	r2, #48	@ 0x30
 8012506:	703a      	strb	r2, [r7, #0]
 8012508:	781a      	ldrb	r2, [r3, #0]
 801250a:	3201      	adds	r2, #1
 801250c:	701a      	strb	r2, [r3, #0]
 801250e:	e7bd      	b.n	801248c <_dtoa_r+0x57c>
 8012510:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012514:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251c:	f47f aeef 	bne.w	80122fe <_dtoa_r+0x3ee>
 8012520:	e710      	b.n	8012344 <_dtoa_r+0x434>
 8012522:	bf00      	nop
 8012524:	08017088 	.word	0x08017088
 8012528:	08017060 	.word	0x08017060
 801252c:	9908      	ldr	r1, [sp, #32]
 801252e:	2900      	cmp	r1, #0
 8012530:	f000 80e3 	beq.w	80126fa <_dtoa_r+0x7ea>
 8012534:	9907      	ldr	r1, [sp, #28]
 8012536:	2901      	cmp	r1, #1
 8012538:	f300 80c8 	bgt.w	80126cc <_dtoa_r+0x7bc>
 801253c:	2d00      	cmp	r5, #0
 801253e:	f000 80c1 	beq.w	80126c4 <_dtoa_r+0x7b4>
 8012542:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012546:	9e05      	ldr	r6, [sp, #20]
 8012548:	461c      	mov	r4, r3
 801254a:	9304      	str	r3, [sp, #16]
 801254c:	9b05      	ldr	r3, [sp, #20]
 801254e:	4413      	add	r3, r2
 8012550:	9305      	str	r3, [sp, #20]
 8012552:	9b06      	ldr	r3, [sp, #24]
 8012554:	2101      	movs	r1, #1
 8012556:	4413      	add	r3, r2
 8012558:	4648      	mov	r0, r9
 801255a:	9306      	str	r3, [sp, #24]
 801255c:	f000 fc6c 	bl	8012e38 <__i2b>
 8012560:	9b04      	ldr	r3, [sp, #16]
 8012562:	4605      	mov	r5, r0
 8012564:	b166      	cbz	r6, 8012580 <_dtoa_r+0x670>
 8012566:	9a06      	ldr	r2, [sp, #24]
 8012568:	2a00      	cmp	r2, #0
 801256a:	dd09      	ble.n	8012580 <_dtoa_r+0x670>
 801256c:	42b2      	cmp	r2, r6
 801256e:	9905      	ldr	r1, [sp, #20]
 8012570:	bfa8      	it	ge
 8012572:	4632      	movge	r2, r6
 8012574:	1a89      	subs	r1, r1, r2
 8012576:	9105      	str	r1, [sp, #20]
 8012578:	9906      	ldr	r1, [sp, #24]
 801257a:	1ab6      	subs	r6, r6, r2
 801257c:	1a8a      	subs	r2, r1, r2
 801257e:	9206      	str	r2, [sp, #24]
 8012580:	b1fb      	cbz	r3, 80125c2 <_dtoa_r+0x6b2>
 8012582:	9a08      	ldr	r2, [sp, #32]
 8012584:	2a00      	cmp	r2, #0
 8012586:	f000 80bc 	beq.w	8012702 <_dtoa_r+0x7f2>
 801258a:	b19c      	cbz	r4, 80125b4 <_dtoa_r+0x6a4>
 801258c:	4629      	mov	r1, r5
 801258e:	4622      	mov	r2, r4
 8012590:	4648      	mov	r0, r9
 8012592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012594:	f000 fd10 	bl	8012fb8 <__pow5mult>
 8012598:	9a01      	ldr	r2, [sp, #4]
 801259a:	4601      	mov	r1, r0
 801259c:	4605      	mov	r5, r0
 801259e:	4648      	mov	r0, r9
 80125a0:	f000 fc60 	bl	8012e64 <__multiply>
 80125a4:	9901      	ldr	r1, [sp, #4]
 80125a6:	9004      	str	r0, [sp, #16]
 80125a8:	4648      	mov	r0, r9
 80125aa:	f000 fb47 	bl	8012c3c <_Bfree>
 80125ae:	9a04      	ldr	r2, [sp, #16]
 80125b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125b2:	9201      	str	r2, [sp, #4]
 80125b4:	1b1a      	subs	r2, r3, r4
 80125b6:	d004      	beq.n	80125c2 <_dtoa_r+0x6b2>
 80125b8:	9901      	ldr	r1, [sp, #4]
 80125ba:	4648      	mov	r0, r9
 80125bc:	f000 fcfc 	bl	8012fb8 <__pow5mult>
 80125c0:	9001      	str	r0, [sp, #4]
 80125c2:	2101      	movs	r1, #1
 80125c4:	4648      	mov	r0, r9
 80125c6:	f000 fc37 	bl	8012e38 <__i2b>
 80125ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125cc:	4604      	mov	r4, r0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	f000 81d0 	beq.w	8012974 <_dtoa_r+0xa64>
 80125d4:	461a      	mov	r2, r3
 80125d6:	4601      	mov	r1, r0
 80125d8:	4648      	mov	r0, r9
 80125da:	f000 fced 	bl	8012fb8 <__pow5mult>
 80125de:	9b07      	ldr	r3, [sp, #28]
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	4604      	mov	r4, r0
 80125e4:	f300 8095 	bgt.w	8012712 <_dtoa_r+0x802>
 80125e8:	9b02      	ldr	r3, [sp, #8]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f040 808b 	bne.w	8012706 <_dtoa_r+0x7f6>
 80125f0:	9b03      	ldr	r3, [sp, #12]
 80125f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80125f6:	2a00      	cmp	r2, #0
 80125f8:	f040 8087 	bne.w	801270a <_dtoa_r+0x7fa>
 80125fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012600:	0d12      	lsrs	r2, r2, #20
 8012602:	0512      	lsls	r2, r2, #20
 8012604:	2a00      	cmp	r2, #0
 8012606:	f000 8082 	beq.w	801270e <_dtoa_r+0x7fe>
 801260a:	9b05      	ldr	r3, [sp, #20]
 801260c:	3301      	adds	r3, #1
 801260e:	9305      	str	r3, [sp, #20]
 8012610:	9b06      	ldr	r3, [sp, #24]
 8012612:	3301      	adds	r3, #1
 8012614:	9306      	str	r3, [sp, #24]
 8012616:	2301      	movs	r3, #1
 8012618:	930b      	str	r3, [sp, #44]	@ 0x2c
 801261a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801261c:	2b00      	cmp	r3, #0
 801261e:	f000 81af 	beq.w	8012980 <_dtoa_r+0xa70>
 8012622:	6922      	ldr	r2, [r4, #16]
 8012624:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012628:	6910      	ldr	r0, [r2, #16]
 801262a:	f000 fbb9 	bl	8012da0 <__hi0bits>
 801262e:	f1c0 0020 	rsb	r0, r0, #32
 8012632:	9b06      	ldr	r3, [sp, #24]
 8012634:	4418      	add	r0, r3
 8012636:	f010 001f 	ands.w	r0, r0, #31
 801263a:	d076      	beq.n	801272a <_dtoa_r+0x81a>
 801263c:	f1c0 0220 	rsb	r2, r0, #32
 8012640:	2a04      	cmp	r2, #4
 8012642:	dd69      	ble.n	8012718 <_dtoa_r+0x808>
 8012644:	9b05      	ldr	r3, [sp, #20]
 8012646:	f1c0 001c 	rsb	r0, r0, #28
 801264a:	4403      	add	r3, r0
 801264c:	9305      	str	r3, [sp, #20]
 801264e:	9b06      	ldr	r3, [sp, #24]
 8012650:	4406      	add	r6, r0
 8012652:	4403      	add	r3, r0
 8012654:	9306      	str	r3, [sp, #24]
 8012656:	9b05      	ldr	r3, [sp, #20]
 8012658:	2b00      	cmp	r3, #0
 801265a:	dd05      	ble.n	8012668 <_dtoa_r+0x758>
 801265c:	9901      	ldr	r1, [sp, #4]
 801265e:	461a      	mov	r2, r3
 8012660:	4648      	mov	r0, r9
 8012662:	f000 fd03 	bl	801306c <__lshift>
 8012666:	9001      	str	r0, [sp, #4]
 8012668:	9b06      	ldr	r3, [sp, #24]
 801266a:	2b00      	cmp	r3, #0
 801266c:	dd05      	ble.n	801267a <_dtoa_r+0x76a>
 801266e:	4621      	mov	r1, r4
 8012670:	461a      	mov	r2, r3
 8012672:	4648      	mov	r0, r9
 8012674:	f000 fcfa 	bl	801306c <__lshift>
 8012678:	4604      	mov	r4, r0
 801267a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801267c:	2b00      	cmp	r3, #0
 801267e:	d056      	beq.n	801272e <_dtoa_r+0x81e>
 8012680:	9801      	ldr	r0, [sp, #4]
 8012682:	4621      	mov	r1, r4
 8012684:	f000 fd5e 	bl	8013144 <__mcmp>
 8012688:	2800      	cmp	r0, #0
 801268a:	da50      	bge.n	801272e <_dtoa_r+0x81e>
 801268c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	9901      	ldr	r1, [sp, #4]
 8012694:	2300      	movs	r3, #0
 8012696:	220a      	movs	r2, #10
 8012698:	4648      	mov	r0, r9
 801269a:	f000 faf1 	bl	8012c80 <__multadd>
 801269e:	9b08      	ldr	r3, [sp, #32]
 80126a0:	9001      	str	r0, [sp, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 816e 	beq.w	8012984 <_dtoa_r+0xa74>
 80126a8:	4629      	mov	r1, r5
 80126aa:	2300      	movs	r3, #0
 80126ac:	220a      	movs	r2, #10
 80126ae:	4648      	mov	r0, r9
 80126b0:	f000 fae6 	bl	8012c80 <__multadd>
 80126b4:	f1bb 0f00 	cmp.w	fp, #0
 80126b8:	4605      	mov	r5, r0
 80126ba:	dc64      	bgt.n	8012786 <_dtoa_r+0x876>
 80126bc:	9b07      	ldr	r3, [sp, #28]
 80126be:	2b02      	cmp	r3, #2
 80126c0:	dc3e      	bgt.n	8012740 <_dtoa_r+0x830>
 80126c2:	e060      	b.n	8012786 <_dtoa_r+0x876>
 80126c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80126ca:	e73c      	b.n	8012546 <_dtoa_r+0x636>
 80126cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80126d0:	42a3      	cmp	r3, r4
 80126d2:	bfbf      	itttt	lt
 80126d4:	1ae2      	sublt	r2, r4, r3
 80126d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80126d8:	189b      	addlt	r3, r3, r2
 80126da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80126dc:	bfae      	itee	ge
 80126de:	1b1c      	subge	r4, r3, r4
 80126e0:	4623      	movlt	r3, r4
 80126e2:	2400      	movlt	r4, #0
 80126e4:	f1ba 0f00 	cmp.w	sl, #0
 80126e8:	bfb5      	itete	lt
 80126ea:	9a05      	ldrlt	r2, [sp, #20]
 80126ec:	9e05      	ldrge	r6, [sp, #20]
 80126ee:	eba2 060a 	sublt.w	r6, r2, sl
 80126f2:	4652      	movge	r2, sl
 80126f4:	bfb8      	it	lt
 80126f6:	2200      	movlt	r2, #0
 80126f8:	e727      	b.n	801254a <_dtoa_r+0x63a>
 80126fa:	9e05      	ldr	r6, [sp, #20]
 80126fc:	9d08      	ldr	r5, [sp, #32]
 80126fe:	461c      	mov	r4, r3
 8012700:	e730      	b.n	8012564 <_dtoa_r+0x654>
 8012702:	461a      	mov	r2, r3
 8012704:	e758      	b.n	80125b8 <_dtoa_r+0x6a8>
 8012706:	2300      	movs	r3, #0
 8012708:	e786      	b.n	8012618 <_dtoa_r+0x708>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	e784      	b.n	8012618 <_dtoa_r+0x708>
 801270e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012710:	e783      	b.n	801261a <_dtoa_r+0x70a>
 8012712:	2300      	movs	r3, #0
 8012714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012716:	e784      	b.n	8012622 <_dtoa_r+0x712>
 8012718:	d09d      	beq.n	8012656 <_dtoa_r+0x746>
 801271a:	9b05      	ldr	r3, [sp, #20]
 801271c:	321c      	adds	r2, #28
 801271e:	4413      	add	r3, r2
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	9b06      	ldr	r3, [sp, #24]
 8012724:	4416      	add	r6, r2
 8012726:	4413      	add	r3, r2
 8012728:	e794      	b.n	8012654 <_dtoa_r+0x744>
 801272a:	4602      	mov	r2, r0
 801272c:	e7f5      	b.n	801271a <_dtoa_r+0x80a>
 801272e:	f1ba 0f00 	cmp.w	sl, #0
 8012732:	f8cd 8010 	str.w	r8, [sp, #16]
 8012736:	46d3      	mov	fp, sl
 8012738:	dc21      	bgt.n	801277e <_dtoa_r+0x86e>
 801273a:	9b07      	ldr	r3, [sp, #28]
 801273c:	2b02      	cmp	r3, #2
 801273e:	dd1e      	ble.n	801277e <_dtoa_r+0x86e>
 8012740:	f1bb 0f00 	cmp.w	fp, #0
 8012744:	f47f aeb7 	bne.w	80124b6 <_dtoa_r+0x5a6>
 8012748:	4621      	mov	r1, r4
 801274a:	465b      	mov	r3, fp
 801274c:	2205      	movs	r2, #5
 801274e:	4648      	mov	r0, r9
 8012750:	f000 fa96 	bl	8012c80 <__multadd>
 8012754:	4601      	mov	r1, r0
 8012756:	4604      	mov	r4, r0
 8012758:	9801      	ldr	r0, [sp, #4]
 801275a:	f000 fcf3 	bl	8013144 <__mcmp>
 801275e:	2800      	cmp	r0, #0
 8012760:	f77f aea9 	ble.w	80124b6 <_dtoa_r+0x5a6>
 8012764:	463e      	mov	r6, r7
 8012766:	2331      	movs	r3, #49	@ 0x31
 8012768:	f806 3b01 	strb.w	r3, [r6], #1
 801276c:	9b04      	ldr	r3, [sp, #16]
 801276e:	3301      	adds	r3, #1
 8012770:	9304      	str	r3, [sp, #16]
 8012772:	e6a4      	b.n	80124be <_dtoa_r+0x5ae>
 8012774:	f8cd 8010 	str.w	r8, [sp, #16]
 8012778:	4654      	mov	r4, sl
 801277a:	4625      	mov	r5, r4
 801277c:	e7f2      	b.n	8012764 <_dtoa_r+0x854>
 801277e:	9b08      	ldr	r3, [sp, #32]
 8012780:	2b00      	cmp	r3, #0
 8012782:	f000 8103 	beq.w	801298c <_dtoa_r+0xa7c>
 8012786:	2e00      	cmp	r6, #0
 8012788:	dd05      	ble.n	8012796 <_dtoa_r+0x886>
 801278a:	4629      	mov	r1, r5
 801278c:	4632      	mov	r2, r6
 801278e:	4648      	mov	r0, r9
 8012790:	f000 fc6c 	bl	801306c <__lshift>
 8012794:	4605      	mov	r5, r0
 8012796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012798:	2b00      	cmp	r3, #0
 801279a:	d058      	beq.n	801284e <_dtoa_r+0x93e>
 801279c:	6869      	ldr	r1, [r5, #4]
 801279e:	4648      	mov	r0, r9
 80127a0:	f000 fa0c 	bl	8012bbc <_Balloc>
 80127a4:	4606      	mov	r6, r0
 80127a6:	b928      	cbnz	r0, 80127b4 <_dtoa_r+0x8a4>
 80127a8:	4b82      	ldr	r3, [pc, #520]	@ (80129b4 <_dtoa_r+0xaa4>)
 80127aa:	4602      	mov	r2, r0
 80127ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80127b0:	f7ff bbc7 	b.w	8011f42 <_dtoa_r+0x32>
 80127b4:	692a      	ldr	r2, [r5, #16]
 80127b6:	3202      	adds	r2, #2
 80127b8:	0092      	lsls	r2, r2, #2
 80127ba:	f105 010c 	add.w	r1, r5, #12
 80127be:	300c      	adds	r0, #12
 80127c0:	f7ff fb09 	bl	8011dd6 <memcpy>
 80127c4:	2201      	movs	r2, #1
 80127c6:	4631      	mov	r1, r6
 80127c8:	4648      	mov	r0, r9
 80127ca:	f000 fc4f 	bl	801306c <__lshift>
 80127ce:	1c7b      	adds	r3, r7, #1
 80127d0:	9305      	str	r3, [sp, #20]
 80127d2:	eb07 030b 	add.w	r3, r7, fp
 80127d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80127d8:	9b02      	ldr	r3, [sp, #8]
 80127da:	f003 0301 	and.w	r3, r3, #1
 80127de:	46a8      	mov	r8, r5
 80127e0:	9308      	str	r3, [sp, #32]
 80127e2:	4605      	mov	r5, r0
 80127e4:	9b05      	ldr	r3, [sp, #20]
 80127e6:	9801      	ldr	r0, [sp, #4]
 80127e8:	4621      	mov	r1, r4
 80127ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80127ee:	f7ff fb07 	bl	8011e00 <quorem>
 80127f2:	4641      	mov	r1, r8
 80127f4:	9002      	str	r0, [sp, #8]
 80127f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80127fa:	9801      	ldr	r0, [sp, #4]
 80127fc:	f000 fca2 	bl	8013144 <__mcmp>
 8012800:	462a      	mov	r2, r5
 8012802:	9006      	str	r0, [sp, #24]
 8012804:	4621      	mov	r1, r4
 8012806:	4648      	mov	r0, r9
 8012808:	f000 fcb8 	bl	801317c <__mdiff>
 801280c:	68c2      	ldr	r2, [r0, #12]
 801280e:	4606      	mov	r6, r0
 8012810:	b9fa      	cbnz	r2, 8012852 <_dtoa_r+0x942>
 8012812:	4601      	mov	r1, r0
 8012814:	9801      	ldr	r0, [sp, #4]
 8012816:	f000 fc95 	bl	8013144 <__mcmp>
 801281a:	4602      	mov	r2, r0
 801281c:	4631      	mov	r1, r6
 801281e:	4648      	mov	r0, r9
 8012820:	920a      	str	r2, [sp, #40]	@ 0x28
 8012822:	f000 fa0b 	bl	8012c3c <_Bfree>
 8012826:	9b07      	ldr	r3, [sp, #28]
 8012828:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801282a:	9e05      	ldr	r6, [sp, #20]
 801282c:	ea43 0102 	orr.w	r1, r3, r2
 8012830:	9b08      	ldr	r3, [sp, #32]
 8012832:	4319      	orrs	r1, r3
 8012834:	d10f      	bne.n	8012856 <_dtoa_r+0x946>
 8012836:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801283a:	d028      	beq.n	801288e <_dtoa_r+0x97e>
 801283c:	9b06      	ldr	r3, [sp, #24]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dd02      	ble.n	8012848 <_dtoa_r+0x938>
 8012842:	9b02      	ldr	r3, [sp, #8]
 8012844:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012848:	f88b a000 	strb.w	sl, [fp]
 801284c:	e639      	b.n	80124c2 <_dtoa_r+0x5b2>
 801284e:	4628      	mov	r0, r5
 8012850:	e7bd      	b.n	80127ce <_dtoa_r+0x8be>
 8012852:	2201      	movs	r2, #1
 8012854:	e7e2      	b.n	801281c <_dtoa_r+0x90c>
 8012856:	9b06      	ldr	r3, [sp, #24]
 8012858:	2b00      	cmp	r3, #0
 801285a:	db04      	blt.n	8012866 <_dtoa_r+0x956>
 801285c:	9907      	ldr	r1, [sp, #28]
 801285e:	430b      	orrs	r3, r1
 8012860:	9908      	ldr	r1, [sp, #32]
 8012862:	430b      	orrs	r3, r1
 8012864:	d120      	bne.n	80128a8 <_dtoa_r+0x998>
 8012866:	2a00      	cmp	r2, #0
 8012868:	ddee      	ble.n	8012848 <_dtoa_r+0x938>
 801286a:	9901      	ldr	r1, [sp, #4]
 801286c:	2201      	movs	r2, #1
 801286e:	4648      	mov	r0, r9
 8012870:	f000 fbfc 	bl	801306c <__lshift>
 8012874:	4621      	mov	r1, r4
 8012876:	9001      	str	r0, [sp, #4]
 8012878:	f000 fc64 	bl	8013144 <__mcmp>
 801287c:	2800      	cmp	r0, #0
 801287e:	dc03      	bgt.n	8012888 <_dtoa_r+0x978>
 8012880:	d1e2      	bne.n	8012848 <_dtoa_r+0x938>
 8012882:	f01a 0f01 	tst.w	sl, #1
 8012886:	d0df      	beq.n	8012848 <_dtoa_r+0x938>
 8012888:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801288c:	d1d9      	bne.n	8012842 <_dtoa_r+0x932>
 801288e:	2339      	movs	r3, #57	@ 0x39
 8012890:	f88b 3000 	strb.w	r3, [fp]
 8012894:	4633      	mov	r3, r6
 8012896:	461e      	mov	r6, r3
 8012898:	3b01      	subs	r3, #1
 801289a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801289e:	2a39      	cmp	r2, #57	@ 0x39
 80128a0:	d053      	beq.n	801294a <_dtoa_r+0xa3a>
 80128a2:	3201      	adds	r2, #1
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	e60c      	b.n	80124c2 <_dtoa_r+0x5b2>
 80128a8:	2a00      	cmp	r2, #0
 80128aa:	dd07      	ble.n	80128bc <_dtoa_r+0x9ac>
 80128ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80128b0:	d0ed      	beq.n	801288e <_dtoa_r+0x97e>
 80128b2:	f10a 0301 	add.w	r3, sl, #1
 80128b6:	f88b 3000 	strb.w	r3, [fp]
 80128ba:	e602      	b.n	80124c2 <_dtoa_r+0x5b2>
 80128bc:	9b05      	ldr	r3, [sp, #20]
 80128be:	9a05      	ldr	r2, [sp, #20]
 80128c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80128c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d029      	beq.n	801291e <_dtoa_r+0xa0e>
 80128ca:	9901      	ldr	r1, [sp, #4]
 80128cc:	2300      	movs	r3, #0
 80128ce:	220a      	movs	r2, #10
 80128d0:	4648      	mov	r0, r9
 80128d2:	f000 f9d5 	bl	8012c80 <__multadd>
 80128d6:	45a8      	cmp	r8, r5
 80128d8:	9001      	str	r0, [sp, #4]
 80128da:	f04f 0300 	mov.w	r3, #0
 80128de:	f04f 020a 	mov.w	r2, #10
 80128e2:	4641      	mov	r1, r8
 80128e4:	4648      	mov	r0, r9
 80128e6:	d107      	bne.n	80128f8 <_dtoa_r+0x9e8>
 80128e8:	f000 f9ca 	bl	8012c80 <__multadd>
 80128ec:	4680      	mov	r8, r0
 80128ee:	4605      	mov	r5, r0
 80128f0:	9b05      	ldr	r3, [sp, #20]
 80128f2:	3301      	adds	r3, #1
 80128f4:	9305      	str	r3, [sp, #20]
 80128f6:	e775      	b.n	80127e4 <_dtoa_r+0x8d4>
 80128f8:	f000 f9c2 	bl	8012c80 <__multadd>
 80128fc:	4629      	mov	r1, r5
 80128fe:	4680      	mov	r8, r0
 8012900:	2300      	movs	r3, #0
 8012902:	220a      	movs	r2, #10
 8012904:	4648      	mov	r0, r9
 8012906:	f000 f9bb 	bl	8012c80 <__multadd>
 801290a:	4605      	mov	r5, r0
 801290c:	e7f0      	b.n	80128f0 <_dtoa_r+0x9e0>
 801290e:	f1bb 0f00 	cmp.w	fp, #0
 8012912:	bfcc      	ite	gt
 8012914:	465e      	movgt	r6, fp
 8012916:	2601      	movle	r6, #1
 8012918:	443e      	add	r6, r7
 801291a:	f04f 0800 	mov.w	r8, #0
 801291e:	9901      	ldr	r1, [sp, #4]
 8012920:	2201      	movs	r2, #1
 8012922:	4648      	mov	r0, r9
 8012924:	f000 fba2 	bl	801306c <__lshift>
 8012928:	4621      	mov	r1, r4
 801292a:	9001      	str	r0, [sp, #4]
 801292c:	f000 fc0a 	bl	8013144 <__mcmp>
 8012930:	2800      	cmp	r0, #0
 8012932:	dcaf      	bgt.n	8012894 <_dtoa_r+0x984>
 8012934:	d102      	bne.n	801293c <_dtoa_r+0xa2c>
 8012936:	f01a 0f01 	tst.w	sl, #1
 801293a:	d1ab      	bne.n	8012894 <_dtoa_r+0x984>
 801293c:	4633      	mov	r3, r6
 801293e:	461e      	mov	r6, r3
 8012940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012944:	2a30      	cmp	r2, #48	@ 0x30
 8012946:	d0fa      	beq.n	801293e <_dtoa_r+0xa2e>
 8012948:	e5bb      	b.n	80124c2 <_dtoa_r+0x5b2>
 801294a:	429f      	cmp	r7, r3
 801294c:	d1a3      	bne.n	8012896 <_dtoa_r+0x986>
 801294e:	9b04      	ldr	r3, [sp, #16]
 8012950:	3301      	adds	r3, #1
 8012952:	9304      	str	r3, [sp, #16]
 8012954:	2331      	movs	r3, #49	@ 0x31
 8012956:	703b      	strb	r3, [r7, #0]
 8012958:	e5b3      	b.n	80124c2 <_dtoa_r+0x5b2>
 801295a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801295c:	4f16      	ldr	r7, [pc, #88]	@ (80129b8 <_dtoa_r+0xaa8>)
 801295e:	b11b      	cbz	r3, 8012968 <_dtoa_r+0xa58>
 8012960:	f107 0308 	add.w	r3, r7, #8
 8012964:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012966:	6013      	str	r3, [r2, #0]
 8012968:	4638      	mov	r0, r7
 801296a:	b011      	add	sp, #68	@ 0x44
 801296c:	ecbd 8b02 	vpop	{d8}
 8012970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012974:	9b07      	ldr	r3, [sp, #28]
 8012976:	2b01      	cmp	r3, #1
 8012978:	f77f ae36 	ble.w	80125e8 <_dtoa_r+0x6d8>
 801297c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801297e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012980:	2001      	movs	r0, #1
 8012982:	e656      	b.n	8012632 <_dtoa_r+0x722>
 8012984:	f1bb 0f00 	cmp.w	fp, #0
 8012988:	f77f aed7 	ble.w	801273a <_dtoa_r+0x82a>
 801298c:	463e      	mov	r6, r7
 801298e:	9801      	ldr	r0, [sp, #4]
 8012990:	4621      	mov	r1, r4
 8012992:	f7ff fa35 	bl	8011e00 <quorem>
 8012996:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801299a:	f806 ab01 	strb.w	sl, [r6], #1
 801299e:	1bf2      	subs	r2, r6, r7
 80129a0:	4593      	cmp	fp, r2
 80129a2:	ddb4      	ble.n	801290e <_dtoa_r+0x9fe>
 80129a4:	9901      	ldr	r1, [sp, #4]
 80129a6:	2300      	movs	r3, #0
 80129a8:	220a      	movs	r2, #10
 80129aa:	4648      	mov	r0, r9
 80129ac:	f000 f968 	bl	8012c80 <__multadd>
 80129b0:	9001      	str	r0, [sp, #4]
 80129b2:	e7ec      	b.n	801298e <_dtoa_r+0xa7e>
 80129b4:	08016fe7 	.word	0x08016fe7
 80129b8:	08016f6b 	.word	0x08016f6b

080129bc <_free_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4605      	mov	r5, r0
 80129c0:	2900      	cmp	r1, #0
 80129c2:	d041      	beq.n	8012a48 <_free_r+0x8c>
 80129c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129c8:	1f0c      	subs	r4, r1, #4
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	bfb8      	it	lt
 80129ce:	18e4      	addlt	r4, r4, r3
 80129d0:	f000 f8e8 	bl	8012ba4 <__malloc_lock>
 80129d4:	4a1d      	ldr	r2, [pc, #116]	@ (8012a4c <_free_r+0x90>)
 80129d6:	6813      	ldr	r3, [r2, #0]
 80129d8:	b933      	cbnz	r3, 80129e8 <_free_r+0x2c>
 80129da:	6063      	str	r3, [r4, #4]
 80129dc:	6014      	str	r4, [r2, #0]
 80129de:	4628      	mov	r0, r5
 80129e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e4:	f000 b8e4 	b.w	8012bb0 <__malloc_unlock>
 80129e8:	42a3      	cmp	r3, r4
 80129ea:	d908      	bls.n	80129fe <_free_r+0x42>
 80129ec:	6820      	ldr	r0, [r4, #0]
 80129ee:	1821      	adds	r1, r4, r0
 80129f0:	428b      	cmp	r3, r1
 80129f2:	bf01      	itttt	eq
 80129f4:	6819      	ldreq	r1, [r3, #0]
 80129f6:	685b      	ldreq	r3, [r3, #4]
 80129f8:	1809      	addeq	r1, r1, r0
 80129fa:	6021      	streq	r1, [r4, #0]
 80129fc:	e7ed      	b.n	80129da <_free_r+0x1e>
 80129fe:	461a      	mov	r2, r3
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	b10b      	cbz	r3, 8012a08 <_free_r+0x4c>
 8012a04:	42a3      	cmp	r3, r4
 8012a06:	d9fa      	bls.n	80129fe <_free_r+0x42>
 8012a08:	6811      	ldr	r1, [r2, #0]
 8012a0a:	1850      	adds	r0, r2, r1
 8012a0c:	42a0      	cmp	r0, r4
 8012a0e:	d10b      	bne.n	8012a28 <_free_r+0x6c>
 8012a10:	6820      	ldr	r0, [r4, #0]
 8012a12:	4401      	add	r1, r0
 8012a14:	1850      	adds	r0, r2, r1
 8012a16:	4283      	cmp	r3, r0
 8012a18:	6011      	str	r1, [r2, #0]
 8012a1a:	d1e0      	bne.n	80129de <_free_r+0x22>
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	6053      	str	r3, [r2, #4]
 8012a22:	4408      	add	r0, r1
 8012a24:	6010      	str	r0, [r2, #0]
 8012a26:	e7da      	b.n	80129de <_free_r+0x22>
 8012a28:	d902      	bls.n	8012a30 <_free_r+0x74>
 8012a2a:	230c      	movs	r3, #12
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	e7d6      	b.n	80129de <_free_r+0x22>
 8012a30:	6820      	ldr	r0, [r4, #0]
 8012a32:	1821      	adds	r1, r4, r0
 8012a34:	428b      	cmp	r3, r1
 8012a36:	bf04      	itt	eq
 8012a38:	6819      	ldreq	r1, [r3, #0]
 8012a3a:	685b      	ldreq	r3, [r3, #4]
 8012a3c:	6063      	str	r3, [r4, #4]
 8012a3e:	bf04      	itt	eq
 8012a40:	1809      	addeq	r1, r1, r0
 8012a42:	6021      	streq	r1, [r4, #0]
 8012a44:	6054      	str	r4, [r2, #4]
 8012a46:	e7ca      	b.n	80129de <_free_r+0x22>
 8012a48:	bd38      	pop	{r3, r4, r5, pc}
 8012a4a:	bf00      	nop
 8012a4c:	24005254 	.word	0x24005254

08012a50 <malloc>:
 8012a50:	4b02      	ldr	r3, [pc, #8]	@ (8012a5c <malloc+0xc>)
 8012a52:	4601      	mov	r1, r0
 8012a54:	6818      	ldr	r0, [r3, #0]
 8012a56:	f000 b825 	b.w	8012aa4 <_malloc_r>
 8012a5a:	bf00      	nop
 8012a5c:	2400002c 	.word	0x2400002c

08012a60 <sbrk_aligned>:
 8012a60:	b570      	push	{r4, r5, r6, lr}
 8012a62:	4e0f      	ldr	r6, [pc, #60]	@ (8012aa0 <sbrk_aligned+0x40>)
 8012a64:	460c      	mov	r4, r1
 8012a66:	6831      	ldr	r1, [r6, #0]
 8012a68:	4605      	mov	r5, r0
 8012a6a:	b911      	cbnz	r1, 8012a72 <sbrk_aligned+0x12>
 8012a6c:	f002 fb0c 	bl	8015088 <_sbrk_r>
 8012a70:	6030      	str	r0, [r6, #0]
 8012a72:	4621      	mov	r1, r4
 8012a74:	4628      	mov	r0, r5
 8012a76:	f002 fb07 	bl	8015088 <_sbrk_r>
 8012a7a:	1c43      	adds	r3, r0, #1
 8012a7c:	d103      	bne.n	8012a86 <sbrk_aligned+0x26>
 8012a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8012a82:	4620      	mov	r0, r4
 8012a84:	bd70      	pop	{r4, r5, r6, pc}
 8012a86:	1cc4      	adds	r4, r0, #3
 8012a88:	f024 0403 	bic.w	r4, r4, #3
 8012a8c:	42a0      	cmp	r0, r4
 8012a8e:	d0f8      	beq.n	8012a82 <sbrk_aligned+0x22>
 8012a90:	1a21      	subs	r1, r4, r0
 8012a92:	4628      	mov	r0, r5
 8012a94:	f002 faf8 	bl	8015088 <_sbrk_r>
 8012a98:	3001      	adds	r0, #1
 8012a9a:	d1f2      	bne.n	8012a82 <sbrk_aligned+0x22>
 8012a9c:	e7ef      	b.n	8012a7e <sbrk_aligned+0x1e>
 8012a9e:	bf00      	nop
 8012aa0:	24005250 	.word	0x24005250

08012aa4 <_malloc_r>:
 8012aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aa8:	1ccd      	adds	r5, r1, #3
 8012aaa:	f025 0503 	bic.w	r5, r5, #3
 8012aae:	3508      	adds	r5, #8
 8012ab0:	2d0c      	cmp	r5, #12
 8012ab2:	bf38      	it	cc
 8012ab4:	250c      	movcc	r5, #12
 8012ab6:	2d00      	cmp	r5, #0
 8012ab8:	4606      	mov	r6, r0
 8012aba:	db01      	blt.n	8012ac0 <_malloc_r+0x1c>
 8012abc:	42a9      	cmp	r1, r5
 8012abe:	d904      	bls.n	8012aca <_malloc_r+0x26>
 8012ac0:	230c      	movs	r3, #12
 8012ac2:	6033      	str	r3, [r6, #0]
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ba0 <_malloc_r+0xfc>
 8012ace:	f000 f869 	bl	8012ba4 <__malloc_lock>
 8012ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ad6:	461c      	mov	r4, r3
 8012ad8:	bb44      	cbnz	r4, 8012b2c <_malloc_r+0x88>
 8012ada:	4629      	mov	r1, r5
 8012adc:	4630      	mov	r0, r6
 8012ade:	f7ff ffbf 	bl	8012a60 <sbrk_aligned>
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	d158      	bne.n	8012b9a <_malloc_r+0xf6>
 8012ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8012aec:	4627      	mov	r7, r4
 8012aee:	2f00      	cmp	r7, #0
 8012af0:	d143      	bne.n	8012b7a <_malloc_r+0xd6>
 8012af2:	2c00      	cmp	r4, #0
 8012af4:	d04b      	beq.n	8012b8e <_malloc_r+0xea>
 8012af6:	6823      	ldr	r3, [r4, #0]
 8012af8:	4639      	mov	r1, r7
 8012afa:	4630      	mov	r0, r6
 8012afc:	eb04 0903 	add.w	r9, r4, r3
 8012b00:	f002 fac2 	bl	8015088 <_sbrk_r>
 8012b04:	4581      	cmp	r9, r0
 8012b06:	d142      	bne.n	8012b8e <_malloc_r+0xea>
 8012b08:	6821      	ldr	r1, [r4, #0]
 8012b0a:	1a6d      	subs	r5, r5, r1
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	4630      	mov	r0, r6
 8012b10:	f7ff ffa6 	bl	8012a60 <sbrk_aligned>
 8012b14:	3001      	adds	r0, #1
 8012b16:	d03a      	beq.n	8012b8e <_malloc_r+0xea>
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	442b      	add	r3, r5
 8012b1c:	6023      	str	r3, [r4, #0]
 8012b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8012b22:	685a      	ldr	r2, [r3, #4]
 8012b24:	bb62      	cbnz	r2, 8012b80 <_malloc_r+0xdc>
 8012b26:	f8c8 7000 	str.w	r7, [r8]
 8012b2a:	e00f      	b.n	8012b4c <_malloc_r+0xa8>
 8012b2c:	6822      	ldr	r2, [r4, #0]
 8012b2e:	1b52      	subs	r2, r2, r5
 8012b30:	d420      	bmi.n	8012b74 <_malloc_r+0xd0>
 8012b32:	2a0b      	cmp	r2, #11
 8012b34:	d917      	bls.n	8012b66 <_malloc_r+0xc2>
 8012b36:	1961      	adds	r1, r4, r5
 8012b38:	42a3      	cmp	r3, r4
 8012b3a:	6025      	str	r5, [r4, #0]
 8012b3c:	bf18      	it	ne
 8012b3e:	6059      	strne	r1, [r3, #4]
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	bf08      	it	eq
 8012b44:	f8c8 1000 	streq.w	r1, [r8]
 8012b48:	5162      	str	r2, [r4, r5]
 8012b4a:	604b      	str	r3, [r1, #4]
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	f000 f82f 	bl	8012bb0 <__malloc_unlock>
 8012b52:	f104 000b 	add.w	r0, r4, #11
 8012b56:	1d23      	adds	r3, r4, #4
 8012b58:	f020 0007 	bic.w	r0, r0, #7
 8012b5c:	1ac2      	subs	r2, r0, r3
 8012b5e:	bf1c      	itt	ne
 8012b60:	1a1b      	subne	r3, r3, r0
 8012b62:	50a3      	strne	r3, [r4, r2]
 8012b64:	e7af      	b.n	8012ac6 <_malloc_r+0x22>
 8012b66:	6862      	ldr	r2, [r4, #4]
 8012b68:	42a3      	cmp	r3, r4
 8012b6a:	bf0c      	ite	eq
 8012b6c:	f8c8 2000 	streq.w	r2, [r8]
 8012b70:	605a      	strne	r2, [r3, #4]
 8012b72:	e7eb      	b.n	8012b4c <_malloc_r+0xa8>
 8012b74:	4623      	mov	r3, r4
 8012b76:	6864      	ldr	r4, [r4, #4]
 8012b78:	e7ae      	b.n	8012ad8 <_malloc_r+0x34>
 8012b7a:	463c      	mov	r4, r7
 8012b7c:	687f      	ldr	r7, [r7, #4]
 8012b7e:	e7b6      	b.n	8012aee <_malloc_r+0x4a>
 8012b80:	461a      	mov	r2, r3
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	42a3      	cmp	r3, r4
 8012b86:	d1fb      	bne.n	8012b80 <_malloc_r+0xdc>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	6053      	str	r3, [r2, #4]
 8012b8c:	e7de      	b.n	8012b4c <_malloc_r+0xa8>
 8012b8e:	230c      	movs	r3, #12
 8012b90:	6033      	str	r3, [r6, #0]
 8012b92:	4630      	mov	r0, r6
 8012b94:	f000 f80c 	bl	8012bb0 <__malloc_unlock>
 8012b98:	e794      	b.n	8012ac4 <_malloc_r+0x20>
 8012b9a:	6005      	str	r5, [r0, #0]
 8012b9c:	e7d6      	b.n	8012b4c <_malloc_r+0xa8>
 8012b9e:	bf00      	nop
 8012ba0:	24005254 	.word	0x24005254

08012ba4 <__malloc_lock>:
 8012ba4:	4801      	ldr	r0, [pc, #4]	@ (8012bac <__malloc_lock+0x8>)
 8012ba6:	f7ff b914 	b.w	8011dd2 <__retarget_lock_acquire_recursive>
 8012baa:	bf00      	nop
 8012bac:	2400524c 	.word	0x2400524c

08012bb0 <__malloc_unlock>:
 8012bb0:	4801      	ldr	r0, [pc, #4]	@ (8012bb8 <__malloc_unlock+0x8>)
 8012bb2:	f7ff b90f 	b.w	8011dd4 <__retarget_lock_release_recursive>
 8012bb6:	bf00      	nop
 8012bb8:	2400524c 	.word	0x2400524c

08012bbc <_Balloc>:
 8012bbc:	b570      	push	{r4, r5, r6, lr}
 8012bbe:	69c6      	ldr	r6, [r0, #28]
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	460d      	mov	r5, r1
 8012bc4:	b976      	cbnz	r6, 8012be4 <_Balloc+0x28>
 8012bc6:	2010      	movs	r0, #16
 8012bc8:	f7ff ff42 	bl	8012a50 <malloc>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	61e0      	str	r0, [r4, #28]
 8012bd0:	b920      	cbnz	r0, 8012bdc <_Balloc+0x20>
 8012bd2:	4b18      	ldr	r3, [pc, #96]	@ (8012c34 <_Balloc+0x78>)
 8012bd4:	4818      	ldr	r0, [pc, #96]	@ (8012c38 <_Balloc+0x7c>)
 8012bd6:	216b      	movs	r1, #107	@ 0x6b
 8012bd8:	f002 fa6e 	bl	80150b8 <__assert_func>
 8012bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012be0:	6006      	str	r6, [r0, #0]
 8012be2:	60c6      	str	r6, [r0, #12]
 8012be4:	69e6      	ldr	r6, [r4, #28]
 8012be6:	68f3      	ldr	r3, [r6, #12]
 8012be8:	b183      	cbz	r3, 8012c0c <_Balloc+0x50>
 8012bea:	69e3      	ldr	r3, [r4, #28]
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012bf2:	b9b8      	cbnz	r0, 8012c24 <_Balloc+0x68>
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8012bfa:	1d72      	adds	r2, r6, #5
 8012bfc:	0092      	lsls	r2, r2, #2
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f002 fa78 	bl	80150f4 <_calloc_r>
 8012c04:	b160      	cbz	r0, 8012c20 <_Balloc+0x64>
 8012c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c0a:	e00e      	b.n	8012c2a <_Balloc+0x6e>
 8012c0c:	2221      	movs	r2, #33	@ 0x21
 8012c0e:	2104      	movs	r1, #4
 8012c10:	4620      	mov	r0, r4
 8012c12:	f002 fa6f 	bl	80150f4 <_calloc_r>
 8012c16:	69e3      	ldr	r3, [r4, #28]
 8012c18:	60f0      	str	r0, [r6, #12]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d1e4      	bne.n	8012bea <_Balloc+0x2e>
 8012c20:	2000      	movs	r0, #0
 8012c22:	bd70      	pop	{r4, r5, r6, pc}
 8012c24:	6802      	ldr	r2, [r0, #0]
 8012c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c30:	e7f7      	b.n	8012c22 <_Balloc+0x66>
 8012c32:	bf00      	nop
 8012c34:	08016f78 	.word	0x08016f78
 8012c38:	08016ff8 	.word	0x08016ff8

08012c3c <_Bfree>:
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	69c6      	ldr	r6, [r0, #28]
 8012c40:	4605      	mov	r5, r0
 8012c42:	460c      	mov	r4, r1
 8012c44:	b976      	cbnz	r6, 8012c64 <_Bfree+0x28>
 8012c46:	2010      	movs	r0, #16
 8012c48:	f7ff ff02 	bl	8012a50 <malloc>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	61e8      	str	r0, [r5, #28]
 8012c50:	b920      	cbnz	r0, 8012c5c <_Bfree+0x20>
 8012c52:	4b09      	ldr	r3, [pc, #36]	@ (8012c78 <_Bfree+0x3c>)
 8012c54:	4809      	ldr	r0, [pc, #36]	@ (8012c7c <_Bfree+0x40>)
 8012c56:	218f      	movs	r1, #143	@ 0x8f
 8012c58:	f002 fa2e 	bl	80150b8 <__assert_func>
 8012c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c60:	6006      	str	r6, [r0, #0]
 8012c62:	60c6      	str	r6, [r0, #12]
 8012c64:	b13c      	cbz	r4, 8012c76 <_Bfree+0x3a>
 8012c66:	69eb      	ldr	r3, [r5, #28]
 8012c68:	6862      	ldr	r2, [r4, #4]
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c70:	6021      	str	r1, [r4, #0]
 8012c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c76:	bd70      	pop	{r4, r5, r6, pc}
 8012c78:	08016f78 	.word	0x08016f78
 8012c7c:	08016ff8 	.word	0x08016ff8

08012c80 <__multadd>:
 8012c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c84:	690d      	ldr	r5, [r1, #16]
 8012c86:	4607      	mov	r7, r0
 8012c88:	460c      	mov	r4, r1
 8012c8a:	461e      	mov	r6, r3
 8012c8c:	f101 0c14 	add.w	ip, r1, #20
 8012c90:	2000      	movs	r0, #0
 8012c92:	f8dc 3000 	ldr.w	r3, [ip]
 8012c96:	b299      	uxth	r1, r3
 8012c98:	fb02 6101 	mla	r1, r2, r1, r6
 8012c9c:	0c1e      	lsrs	r6, r3, #16
 8012c9e:	0c0b      	lsrs	r3, r1, #16
 8012ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8012ca4:	b289      	uxth	r1, r1
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012cac:	4285      	cmp	r5, r0
 8012cae:	f84c 1b04 	str.w	r1, [ip], #4
 8012cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012cb6:	dcec      	bgt.n	8012c92 <__multadd+0x12>
 8012cb8:	b30e      	cbz	r6, 8012cfe <__multadd+0x7e>
 8012cba:	68a3      	ldr	r3, [r4, #8]
 8012cbc:	42ab      	cmp	r3, r5
 8012cbe:	dc19      	bgt.n	8012cf4 <__multadd+0x74>
 8012cc0:	6861      	ldr	r1, [r4, #4]
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	3101      	adds	r1, #1
 8012cc6:	f7ff ff79 	bl	8012bbc <_Balloc>
 8012cca:	4680      	mov	r8, r0
 8012ccc:	b928      	cbnz	r0, 8012cda <__multadd+0x5a>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8012d04 <__multadd+0x84>)
 8012cd2:	480d      	ldr	r0, [pc, #52]	@ (8012d08 <__multadd+0x88>)
 8012cd4:	21ba      	movs	r1, #186	@ 0xba
 8012cd6:	f002 f9ef 	bl	80150b8 <__assert_func>
 8012cda:	6922      	ldr	r2, [r4, #16]
 8012cdc:	3202      	adds	r2, #2
 8012cde:	f104 010c 	add.w	r1, r4, #12
 8012ce2:	0092      	lsls	r2, r2, #2
 8012ce4:	300c      	adds	r0, #12
 8012ce6:	f7ff f876 	bl	8011dd6 <memcpy>
 8012cea:	4621      	mov	r1, r4
 8012cec:	4638      	mov	r0, r7
 8012cee:	f7ff ffa5 	bl	8012c3c <_Bfree>
 8012cf2:	4644      	mov	r4, r8
 8012cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012cf8:	3501      	adds	r5, #1
 8012cfa:	615e      	str	r6, [r3, #20]
 8012cfc:	6125      	str	r5, [r4, #16]
 8012cfe:	4620      	mov	r0, r4
 8012d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d04:	08016fe7 	.word	0x08016fe7
 8012d08:	08016ff8 	.word	0x08016ff8

08012d0c <__s2b>:
 8012d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d10:	460c      	mov	r4, r1
 8012d12:	4615      	mov	r5, r2
 8012d14:	461f      	mov	r7, r3
 8012d16:	2209      	movs	r2, #9
 8012d18:	3308      	adds	r3, #8
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d20:	2100      	movs	r1, #0
 8012d22:	2201      	movs	r2, #1
 8012d24:	429a      	cmp	r2, r3
 8012d26:	db09      	blt.n	8012d3c <__s2b+0x30>
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f7ff ff47 	bl	8012bbc <_Balloc>
 8012d2e:	b940      	cbnz	r0, 8012d42 <__s2b+0x36>
 8012d30:	4602      	mov	r2, r0
 8012d32:	4b19      	ldr	r3, [pc, #100]	@ (8012d98 <__s2b+0x8c>)
 8012d34:	4819      	ldr	r0, [pc, #100]	@ (8012d9c <__s2b+0x90>)
 8012d36:	21d3      	movs	r1, #211	@ 0xd3
 8012d38:	f002 f9be 	bl	80150b8 <__assert_func>
 8012d3c:	0052      	lsls	r2, r2, #1
 8012d3e:	3101      	adds	r1, #1
 8012d40:	e7f0      	b.n	8012d24 <__s2b+0x18>
 8012d42:	9b08      	ldr	r3, [sp, #32]
 8012d44:	6143      	str	r3, [r0, #20]
 8012d46:	2d09      	cmp	r5, #9
 8012d48:	f04f 0301 	mov.w	r3, #1
 8012d4c:	6103      	str	r3, [r0, #16]
 8012d4e:	dd16      	ble.n	8012d7e <__s2b+0x72>
 8012d50:	f104 0909 	add.w	r9, r4, #9
 8012d54:	46c8      	mov	r8, r9
 8012d56:	442c      	add	r4, r5
 8012d58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012d5c:	4601      	mov	r1, r0
 8012d5e:	3b30      	subs	r3, #48	@ 0x30
 8012d60:	220a      	movs	r2, #10
 8012d62:	4630      	mov	r0, r6
 8012d64:	f7ff ff8c 	bl	8012c80 <__multadd>
 8012d68:	45a0      	cmp	r8, r4
 8012d6a:	d1f5      	bne.n	8012d58 <__s2b+0x4c>
 8012d6c:	f1a5 0408 	sub.w	r4, r5, #8
 8012d70:	444c      	add	r4, r9
 8012d72:	1b2d      	subs	r5, r5, r4
 8012d74:	1963      	adds	r3, r4, r5
 8012d76:	42bb      	cmp	r3, r7
 8012d78:	db04      	blt.n	8012d84 <__s2b+0x78>
 8012d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7e:	340a      	adds	r4, #10
 8012d80:	2509      	movs	r5, #9
 8012d82:	e7f6      	b.n	8012d72 <__s2b+0x66>
 8012d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012d88:	4601      	mov	r1, r0
 8012d8a:	3b30      	subs	r3, #48	@ 0x30
 8012d8c:	220a      	movs	r2, #10
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f7ff ff76 	bl	8012c80 <__multadd>
 8012d94:	e7ee      	b.n	8012d74 <__s2b+0x68>
 8012d96:	bf00      	nop
 8012d98:	08016fe7 	.word	0x08016fe7
 8012d9c:	08016ff8 	.word	0x08016ff8

08012da0 <__hi0bits>:
 8012da0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012da4:	4603      	mov	r3, r0
 8012da6:	bf36      	itet	cc
 8012da8:	0403      	lslcc	r3, r0, #16
 8012daa:	2000      	movcs	r0, #0
 8012dac:	2010      	movcc	r0, #16
 8012dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012db2:	bf3c      	itt	cc
 8012db4:	021b      	lslcc	r3, r3, #8
 8012db6:	3008      	addcc	r0, #8
 8012db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012dbc:	bf3c      	itt	cc
 8012dbe:	011b      	lslcc	r3, r3, #4
 8012dc0:	3004      	addcc	r0, #4
 8012dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012dc6:	bf3c      	itt	cc
 8012dc8:	009b      	lslcc	r3, r3, #2
 8012dca:	3002      	addcc	r0, #2
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	db05      	blt.n	8012ddc <__hi0bits+0x3c>
 8012dd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012dd4:	f100 0001 	add.w	r0, r0, #1
 8012dd8:	bf08      	it	eq
 8012dda:	2020      	moveq	r0, #32
 8012ddc:	4770      	bx	lr

08012dde <__lo0bits>:
 8012dde:	6803      	ldr	r3, [r0, #0]
 8012de0:	4602      	mov	r2, r0
 8012de2:	f013 0007 	ands.w	r0, r3, #7
 8012de6:	d00b      	beq.n	8012e00 <__lo0bits+0x22>
 8012de8:	07d9      	lsls	r1, r3, #31
 8012dea:	d421      	bmi.n	8012e30 <__lo0bits+0x52>
 8012dec:	0798      	lsls	r0, r3, #30
 8012dee:	bf49      	itett	mi
 8012df0:	085b      	lsrmi	r3, r3, #1
 8012df2:	089b      	lsrpl	r3, r3, #2
 8012df4:	2001      	movmi	r0, #1
 8012df6:	6013      	strmi	r3, [r2, #0]
 8012df8:	bf5c      	itt	pl
 8012dfa:	6013      	strpl	r3, [r2, #0]
 8012dfc:	2002      	movpl	r0, #2
 8012dfe:	4770      	bx	lr
 8012e00:	b299      	uxth	r1, r3
 8012e02:	b909      	cbnz	r1, 8012e08 <__lo0bits+0x2a>
 8012e04:	0c1b      	lsrs	r3, r3, #16
 8012e06:	2010      	movs	r0, #16
 8012e08:	b2d9      	uxtb	r1, r3
 8012e0a:	b909      	cbnz	r1, 8012e10 <__lo0bits+0x32>
 8012e0c:	3008      	adds	r0, #8
 8012e0e:	0a1b      	lsrs	r3, r3, #8
 8012e10:	0719      	lsls	r1, r3, #28
 8012e12:	bf04      	itt	eq
 8012e14:	091b      	lsreq	r3, r3, #4
 8012e16:	3004      	addeq	r0, #4
 8012e18:	0799      	lsls	r1, r3, #30
 8012e1a:	bf04      	itt	eq
 8012e1c:	089b      	lsreq	r3, r3, #2
 8012e1e:	3002      	addeq	r0, #2
 8012e20:	07d9      	lsls	r1, r3, #31
 8012e22:	d403      	bmi.n	8012e2c <__lo0bits+0x4e>
 8012e24:	085b      	lsrs	r3, r3, #1
 8012e26:	f100 0001 	add.w	r0, r0, #1
 8012e2a:	d003      	beq.n	8012e34 <__lo0bits+0x56>
 8012e2c:	6013      	str	r3, [r2, #0]
 8012e2e:	4770      	bx	lr
 8012e30:	2000      	movs	r0, #0
 8012e32:	4770      	bx	lr
 8012e34:	2020      	movs	r0, #32
 8012e36:	4770      	bx	lr

08012e38 <__i2b>:
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	2101      	movs	r1, #1
 8012e3e:	f7ff febd 	bl	8012bbc <_Balloc>
 8012e42:	4602      	mov	r2, r0
 8012e44:	b928      	cbnz	r0, 8012e52 <__i2b+0x1a>
 8012e46:	4b05      	ldr	r3, [pc, #20]	@ (8012e5c <__i2b+0x24>)
 8012e48:	4805      	ldr	r0, [pc, #20]	@ (8012e60 <__i2b+0x28>)
 8012e4a:	f240 1145 	movw	r1, #325	@ 0x145
 8012e4e:	f002 f933 	bl	80150b8 <__assert_func>
 8012e52:	2301      	movs	r3, #1
 8012e54:	6144      	str	r4, [r0, #20]
 8012e56:	6103      	str	r3, [r0, #16]
 8012e58:	bd10      	pop	{r4, pc}
 8012e5a:	bf00      	nop
 8012e5c:	08016fe7 	.word	0x08016fe7
 8012e60:	08016ff8 	.word	0x08016ff8

08012e64 <__multiply>:
 8012e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e68:	4614      	mov	r4, r2
 8012e6a:	690a      	ldr	r2, [r1, #16]
 8012e6c:	6923      	ldr	r3, [r4, #16]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	bfa8      	it	ge
 8012e72:	4623      	movge	r3, r4
 8012e74:	460f      	mov	r7, r1
 8012e76:	bfa4      	itt	ge
 8012e78:	460c      	movge	r4, r1
 8012e7a:	461f      	movge	r7, r3
 8012e7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012e80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012e84:	68a3      	ldr	r3, [r4, #8]
 8012e86:	6861      	ldr	r1, [r4, #4]
 8012e88:	eb0a 0609 	add.w	r6, sl, r9
 8012e8c:	42b3      	cmp	r3, r6
 8012e8e:	b085      	sub	sp, #20
 8012e90:	bfb8      	it	lt
 8012e92:	3101      	addlt	r1, #1
 8012e94:	f7ff fe92 	bl	8012bbc <_Balloc>
 8012e98:	b930      	cbnz	r0, 8012ea8 <__multiply+0x44>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	4b44      	ldr	r3, [pc, #272]	@ (8012fb0 <__multiply+0x14c>)
 8012e9e:	4845      	ldr	r0, [pc, #276]	@ (8012fb4 <__multiply+0x150>)
 8012ea0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012ea4:	f002 f908 	bl	80150b8 <__assert_func>
 8012ea8:	f100 0514 	add.w	r5, r0, #20
 8012eac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012eb0:	462b      	mov	r3, r5
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	4543      	cmp	r3, r8
 8012eb6:	d321      	bcc.n	8012efc <__multiply+0x98>
 8012eb8:	f107 0114 	add.w	r1, r7, #20
 8012ebc:	f104 0214 	add.w	r2, r4, #20
 8012ec0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ec4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ec8:	9302      	str	r3, [sp, #8]
 8012eca:	1b13      	subs	r3, r2, r4
 8012ecc:	3b15      	subs	r3, #21
 8012ece:	f023 0303 	bic.w	r3, r3, #3
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	f104 0715 	add.w	r7, r4, #21
 8012ed8:	42ba      	cmp	r2, r7
 8012eda:	bf38      	it	cc
 8012edc:	2304      	movcc	r3, #4
 8012ede:	9301      	str	r3, [sp, #4]
 8012ee0:	9b02      	ldr	r3, [sp, #8]
 8012ee2:	9103      	str	r1, [sp, #12]
 8012ee4:	428b      	cmp	r3, r1
 8012ee6:	d80c      	bhi.n	8012f02 <__multiply+0x9e>
 8012ee8:	2e00      	cmp	r6, #0
 8012eea:	dd03      	ble.n	8012ef4 <__multiply+0x90>
 8012eec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d05b      	beq.n	8012fac <__multiply+0x148>
 8012ef4:	6106      	str	r6, [r0, #16]
 8012ef6:	b005      	add	sp, #20
 8012ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efc:	f843 2b04 	str.w	r2, [r3], #4
 8012f00:	e7d8      	b.n	8012eb4 <__multiply+0x50>
 8012f02:	f8b1 a000 	ldrh.w	sl, [r1]
 8012f06:	f1ba 0f00 	cmp.w	sl, #0
 8012f0a:	d024      	beq.n	8012f56 <__multiply+0xf2>
 8012f0c:	f104 0e14 	add.w	lr, r4, #20
 8012f10:	46a9      	mov	r9, r5
 8012f12:	f04f 0c00 	mov.w	ip, #0
 8012f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8012f1e:	fa1f fb87 	uxth.w	fp, r7
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	fb0a 330b 	mla	r3, sl, fp, r3
 8012f28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012f2c:	f8d9 7000 	ldr.w	r7, [r9]
 8012f30:	4463      	add	r3, ip
 8012f32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f36:	fb0a c70b 	mla	r7, sl, fp, ip
 8012f3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f44:	4572      	cmp	r2, lr
 8012f46:	f849 3b04 	str.w	r3, [r9], #4
 8012f4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f4e:	d8e2      	bhi.n	8012f16 <__multiply+0xb2>
 8012f50:	9b01      	ldr	r3, [sp, #4]
 8012f52:	f845 c003 	str.w	ip, [r5, r3]
 8012f56:	9b03      	ldr	r3, [sp, #12]
 8012f58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012f5c:	3104      	adds	r1, #4
 8012f5e:	f1b9 0f00 	cmp.w	r9, #0
 8012f62:	d021      	beq.n	8012fa8 <__multiply+0x144>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	f104 0c14 	add.w	ip, r4, #20
 8012f6a:	46ae      	mov	lr, r5
 8012f6c:	f04f 0a00 	mov.w	sl, #0
 8012f70:	f8bc b000 	ldrh.w	fp, [ip]
 8012f74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012f78:	fb09 770b 	mla	r7, r9, fp, r7
 8012f7c:	4457      	add	r7, sl
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f84:	f84e 3b04 	str.w	r3, [lr], #4
 8012f88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012f8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f90:	f8be 3000 	ldrh.w	r3, [lr]
 8012f94:	fb09 330a 	mla	r3, r9, sl, r3
 8012f98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012f9c:	4562      	cmp	r2, ip
 8012f9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fa2:	d8e5      	bhi.n	8012f70 <__multiply+0x10c>
 8012fa4:	9f01      	ldr	r7, [sp, #4]
 8012fa6:	51eb      	str	r3, [r5, r7]
 8012fa8:	3504      	adds	r5, #4
 8012faa:	e799      	b.n	8012ee0 <__multiply+0x7c>
 8012fac:	3e01      	subs	r6, #1
 8012fae:	e79b      	b.n	8012ee8 <__multiply+0x84>
 8012fb0:	08016fe7 	.word	0x08016fe7
 8012fb4:	08016ff8 	.word	0x08016ff8

08012fb8 <__pow5mult>:
 8012fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fbc:	4615      	mov	r5, r2
 8012fbe:	f012 0203 	ands.w	r2, r2, #3
 8012fc2:	4607      	mov	r7, r0
 8012fc4:	460e      	mov	r6, r1
 8012fc6:	d007      	beq.n	8012fd8 <__pow5mult+0x20>
 8012fc8:	4c25      	ldr	r4, [pc, #148]	@ (8013060 <__pow5mult+0xa8>)
 8012fca:	3a01      	subs	r2, #1
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012fd2:	f7ff fe55 	bl	8012c80 <__multadd>
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	10ad      	asrs	r5, r5, #2
 8012fda:	d03d      	beq.n	8013058 <__pow5mult+0xa0>
 8012fdc:	69fc      	ldr	r4, [r7, #28]
 8012fde:	b97c      	cbnz	r4, 8013000 <__pow5mult+0x48>
 8012fe0:	2010      	movs	r0, #16
 8012fe2:	f7ff fd35 	bl	8012a50 <malloc>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	61f8      	str	r0, [r7, #28]
 8012fea:	b928      	cbnz	r0, 8012ff8 <__pow5mult+0x40>
 8012fec:	4b1d      	ldr	r3, [pc, #116]	@ (8013064 <__pow5mult+0xac>)
 8012fee:	481e      	ldr	r0, [pc, #120]	@ (8013068 <__pow5mult+0xb0>)
 8012ff0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012ff4:	f002 f860 	bl	80150b8 <__assert_func>
 8012ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ffc:	6004      	str	r4, [r0, #0]
 8012ffe:	60c4      	str	r4, [r0, #12]
 8013000:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013008:	b94c      	cbnz	r4, 801301e <__pow5mult+0x66>
 801300a:	f240 2171 	movw	r1, #625	@ 0x271
 801300e:	4638      	mov	r0, r7
 8013010:	f7ff ff12 	bl	8012e38 <__i2b>
 8013014:	2300      	movs	r3, #0
 8013016:	f8c8 0008 	str.w	r0, [r8, #8]
 801301a:	4604      	mov	r4, r0
 801301c:	6003      	str	r3, [r0, #0]
 801301e:	f04f 0900 	mov.w	r9, #0
 8013022:	07eb      	lsls	r3, r5, #31
 8013024:	d50a      	bpl.n	801303c <__pow5mult+0x84>
 8013026:	4631      	mov	r1, r6
 8013028:	4622      	mov	r2, r4
 801302a:	4638      	mov	r0, r7
 801302c:	f7ff ff1a 	bl	8012e64 <__multiply>
 8013030:	4631      	mov	r1, r6
 8013032:	4680      	mov	r8, r0
 8013034:	4638      	mov	r0, r7
 8013036:	f7ff fe01 	bl	8012c3c <_Bfree>
 801303a:	4646      	mov	r6, r8
 801303c:	106d      	asrs	r5, r5, #1
 801303e:	d00b      	beq.n	8013058 <__pow5mult+0xa0>
 8013040:	6820      	ldr	r0, [r4, #0]
 8013042:	b938      	cbnz	r0, 8013054 <__pow5mult+0x9c>
 8013044:	4622      	mov	r2, r4
 8013046:	4621      	mov	r1, r4
 8013048:	4638      	mov	r0, r7
 801304a:	f7ff ff0b 	bl	8012e64 <__multiply>
 801304e:	6020      	str	r0, [r4, #0]
 8013050:	f8c0 9000 	str.w	r9, [r0]
 8013054:	4604      	mov	r4, r0
 8013056:	e7e4      	b.n	8013022 <__pow5mult+0x6a>
 8013058:	4630      	mov	r0, r6
 801305a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801305e:	bf00      	nop
 8013060:	08017054 	.word	0x08017054
 8013064:	08016f78 	.word	0x08016f78
 8013068:	08016ff8 	.word	0x08016ff8

0801306c <__lshift>:
 801306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013070:	460c      	mov	r4, r1
 8013072:	6849      	ldr	r1, [r1, #4]
 8013074:	6923      	ldr	r3, [r4, #16]
 8013076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801307a:	68a3      	ldr	r3, [r4, #8]
 801307c:	4607      	mov	r7, r0
 801307e:	4691      	mov	r9, r2
 8013080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013084:	f108 0601 	add.w	r6, r8, #1
 8013088:	42b3      	cmp	r3, r6
 801308a:	db0b      	blt.n	80130a4 <__lshift+0x38>
 801308c:	4638      	mov	r0, r7
 801308e:	f7ff fd95 	bl	8012bbc <_Balloc>
 8013092:	4605      	mov	r5, r0
 8013094:	b948      	cbnz	r0, 80130aa <__lshift+0x3e>
 8013096:	4602      	mov	r2, r0
 8013098:	4b28      	ldr	r3, [pc, #160]	@ (801313c <__lshift+0xd0>)
 801309a:	4829      	ldr	r0, [pc, #164]	@ (8013140 <__lshift+0xd4>)
 801309c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80130a0:	f002 f80a 	bl	80150b8 <__assert_func>
 80130a4:	3101      	adds	r1, #1
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	e7ee      	b.n	8013088 <__lshift+0x1c>
 80130aa:	2300      	movs	r3, #0
 80130ac:	f100 0114 	add.w	r1, r0, #20
 80130b0:	f100 0210 	add.w	r2, r0, #16
 80130b4:	4618      	mov	r0, r3
 80130b6:	4553      	cmp	r3, sl
 80130b8:	db33      	blt.n	8013122 <__lshift+0xb6>
 80130ba:	6920      	ldr	r0, [r4, #16]
 80130bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130c0:	f104 0314 	add.w	r3, r4, #20
 80130c4:	f019 091f 	ands.w	r9, r9, #31
 80130c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130d0:	d02b      	beq.n	801312a <__lshift+0xbe>
 80130d2:	f1c9 0e20 	rsb	lr, r9, #32
 80130d6:	468a      	mov	sl, r1
 80130d8:	2200      	movs	r2, #0
 80130da:	6818      	ldr	r0, [r3, #0]
 80130dc:	fa00 f009 	lsl.w	r0, r0, r9
 80130e0:	4310      	orrs	r0, r2
 80130e2:	f84a 0b04 	str.w	r0, [sl], #4
 80130e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80130ea:	459c      	cmp	ip, r3
 80130ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80130f0:	d8f3      	bhi.n	80130da <__lshift+0x6e>
 80130f2:	ebac 0304 	sub.w	r3, ip, r4
 80130f6:	3b15      	subs	r3, #21
 80130f8:	f023 0303 	bic.w	r3, r3, #3
 80130fc:	3304      	adds	r3, #4
 80130fe:	f104 0015 	add.w	r0, r4, #21
 8013102:	4584      	cmp	ip, r0
 8013104:	bf38      	it	cc
 8013106:	2304      	movcc	r3, #4
 8013108:	50ca      	str	r2, [r1, r3]
 801310a:	b10a      	cbz	r2, 8013110 <__lshift+0xa4>
 801310c:	f108 0602 	add.w	r6, r8, #2
 8013110:	3e01      	subs	r6, #1
 8013112:	4638      	mov	r0, r7
 8013114:	612e      	str	r6, [r5, #16]
 8013116:	4621      	mov	r1, r4
 8013118:	f7ff fd90 	bl	8012c3c <_Bfree>
 801311c:	4628      	mov	r0, r5
 801311e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013122:	f842 0f04 	str.w	r0, [r2, #4]!
 8013126:	3301      	adds	r3, #1
 8013128:	e7c5      	b.n	80130b6 <__lshift+0x4a>
 801312a:	3904      	subs	r1, #4
 801312c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013130:	f841 2f04 	str.w	r2, [r1, #4]!
 8013134:	459c      	cmp	ip, r3
 8013136:	d8f9      	bhi.n	801312c <__lshift+0xc0>
 8013138:	e7ea      	b.n	8013110 <__lshift+0xa4>
 801313a:	bf00      	nop
 801313c:	08016fe7 	.word	0x08016fe7
 8013140:	08016ff8 	.word	0x08016ff8

08013144 <__mcmp>:
 8013144:	690a      	ldr	r2, [r1, #16]
 8013146:	4603      	mov	r3, r0
 8013148:	6900      	ldr	r0, [r0, #16]
 801314a:	1a80      	subs	r0, r0, r2
 801314c:	b530      	push	{r4, r5, lr}
 801314e:	d10e      	bne.n	801316e <__mcmp+0x2a>
 8013150:	3314      	adds	r3, #20
 8013152:	3114      	adds	r1, #20
 8013154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801315c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013164:	4295      	cmp	r5, r2
 8013166:	d003      	beq.n	8013170 <__mcmp+0x2c>
 8013168:	d205      	bcs.n	8013176 <__mcmp+0x32>
 801316a:	f04f 30ff 	mov.w	r0, #4294967295
 801316e:	bd30      	pop	{r4, r5, pc}
 8013170:	42a3      	cmp	r3, r4
 8013172:	d3f3      	bcc.n	801315c <__mcmp+0x18>
 8013174:	e7fb      	b.n	801316e <__mcmp+0x2a>
 8013176:	2001      	movs	r0, #1
 8013178:	e7f9      	b.n	801316e <__mcmp+0x2a>
	...

0801317c <__mdiff>:
 801317c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013180:	4689      	mov	r9, r1
 8013182:	4606      	mov	r6, r0
 8013184:	4611      	mov	r1, r2
 8013186:	4648      	mov	r0, r9
 8013188:	4614      	mov	r4, r2
 801318a:	f7ff ffdb 	bl	8013144 <__mcmp>
 801318e:	1e05      	subs	r5, r0, #0
 8013190:	d112      	bne.n	80131b8 <__mdiff+0x3c>
 8013192:	4629      	mov	r1, r5
 8013194:	4630      	mov	r0, r6
 8013196:	f7ff fd11 	bl	8012bbc <_Balloc>
 801319a:	4602      	mov	r2, r0
 801319c:	b928      	cbnz	r0, 80131aa <__mdiff+0x2e>
 801319e:	4b3f      	ldr	r3, [pc, #252]	@ (801329c <__mdiff+0x120>)
 80131a0:	f240 2137 	movw	r1, #567	@ 0x237
 80131a4:	483e      	ldr	r0, [pc, #248]	@ (80132a0 <__mdiff+0x124>)
 80131a6:	f001 ff87 	bl	80150b8 <__assert_func>
 80131aa:	2301      	movs	r3, #1
 80131ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131b0:	4610      	mov	r0, r2
 80131b2:	b003      	add	sp, #12
 80131b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b8:	bfbc      	itt	lt
 80131ba:	464b      	movlt	r3, r9
 80131bc:	46a1      	movlt	r9, r4
 80131be:	4630      	mov	r0, r6
 80131c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80131c4:	bfba      	itte	lt
 80131c6:	461c      	movlt	r4, r3
 80131c8:	2501      	movlt	r5, #1
 80131ca:	2500      	movge	r5, #0
 80131cc:	f7ff fcf6 	bl	8012bbc <_Balloc>
 80131d0:	4602      	mov	r2, r0
 80131d2:	b918      	cbnz	r0, 80131dc <__mdiff+0x60>
 80131d4:	4b31      	ldr	r3, [pc, #196]	@ (801329c <__mdiff+0x120>)
 80131d6:	f240 2145 	movw	r1, #581	@ 0x245
 80131da:	e7e3      	b.n	80131a4 <__mdiff+0x28>
 80131dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80131e0:	6926      	ldr	r6, [r4, #16]
 80131e2:	60c5      	str	r5, [r0, #12]
 80131e4:	f109 0310 	add.w	r3, r9, #16
 80131e8:	f109 0514 	add.w	r5, r9, #20
 80131ec:	f104 0e14 	add.w	lr, r4, #20
 80131f0:	f100 0b14 	add.w	fp, r0, #20
 80131f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80131f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80131fc:	9301      	str	r3, [sp, #4]
 80131fe:	46d9      	mov	r9, fp
 8013200:	f04f 0c00 	mov.w	ip, #0
 8013204:	9b01      	ldr	r3, [sp, #4]
 8013206:	f85e 0b04 	ldr.w	r0, [lr], #4
 801320a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801320e:	9301      	str	r3, [sp, #4]
 8013210:	fa1f f38a 	uxth.w	r3, sl
 8013214:	4619      	mov	r1, r3
 8013216:	b283      	uxth	r3, r0
 8013218:	1acb      	subs	r3, r1, r3
 801321a:	0c00      	lsrs	r0, r0, #16
 801321c:	4463      	add	r3, ip
 801321e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013222:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013226:	b29b      	uxth	r3, r3
 8013228:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801322c:	4576      	cmp	r6, lr
 801322e:	f849 3b04 	str.w	r3, [r9], #4
 8013232:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013236:	d8e5      	bhi.n	8013204 <__mdiff+0x88>
 8013238:	1b33      	subs	r3, r6, r4
 801323a:	3b15      	subs	r3, #21
 801323c:	f023 0303 	bic.w	r3, r3, #3
 8013240:	3415      	adds	r4, #21
 8013242:	3304      	adds	r3, #4
 8013244:	42a6      	cmp	r6, r4
 8013246:	bf38      	it	cc
 8013248:	2304      	movcc	r3, #4
 801324a:	441d      	add	r5, r3
 801324c:	445b      	add	r3, fp
 801324e:	461e      	mov	r6, r3
 8013250:	462c      	mov	r4, r5
 8013252:	4544      	cmp	r4, r8
 8013254:	d30e      	bcc.n	8013274 <__mdiff+0xf8>
 8013256:	f108 0103 	add.w	r1, r8, #3
 801325a:	1b49      	subs	r1, r1, r5
 801325c:	f021 0103 	bic.w	r1, r1, #3
 8013260:	3d03      	subs	r5, #3
 8013262:	45a8      	cmp	r8, r5
 8013264:	bf38      	it	cc
 8013266:	2100      	movcc	r1, #0
 8013268:	440b      	add	r3, r1
 801326a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801326e:	b191      	cbz	r1, 8013296 <__mdiff+0x11a>
 8013270:	6117      	str	r7, [r2, #16]
 8013272:	e79d      	b.n	80131b0 <__mdiff+0x34>
 8013274:	f854 1b04 	ldr.w	r1, [r4], #4
 8013278:	46e6      	mov	lr, ip
 801327a:	0c08      	lsrs	r0, r1, #16
 801327c:	fa1c fc81 	uxtah	ip, ip, r1
 8013280:	4471      	add	r1, lr
 8013282:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013286:	b289      	uxth	r1, r1
 8013288:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801328c:	f846 1b04 	str.w	r1, [r6], #4
 8013290:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013294:	e7dd      	b.n	8013252 <__mdiff+0xd6>
 8013296:	3f01      	subs	r7, #1
 8013298:	e7e7      	b.n	801326a <__mdiff+0xee>
 801329a:	bf00      	nop
 801329c:	08016fe7 	.word	0x08016fe7
 80132a0:	08016ff8 	.word	0x08016ff8

080132a4 <__ulp>:
 80132a4:	b082      	sub	sp, #8
 80132a6:	ed8d 0b00 	vstr	d0, [sp]
 80132aa:	9a01      	ldr	r2, [sp, #4]
 80132ac:	4b0f      	ldr	r3, [pc, #60]	@ (80132ec <__ulp+0x48>)
 80132ae:	4013      	ands	r3, r2
 80132b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dc08      	bgt.n	80132ca <__ulp+0x26>
 80132b8:	425b      	negs	r3, r3
 80132ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80132be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132c2:	da04      	bge.n	80132ce <__ulp+0x2a>
 80132c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80132c8:	4113      	asrs	r3, r2
 80132ca:	2200      	movs	r2, #0
 80132cc:	e008      	b.n	80132e0 <__ulp+0x3c>
 80132ce:	f1a2 0314 	sub.w	r3, r2, #20
 80132d2:	2b1e      	cmp	r3, #30
 80132d4:	bfda      	itte	le
 80132d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80132da:	40da      	lsrle	r2, r3
 80132dc:	2201      	movgt	r2, #1
 80132de:	2300      	movs	r3, #0
 80132e0:	4619      	mov	r1, r3
 80132e2:	4610      	mov	r0, r2
 80132e4:	ec41 0b10 	vmov	d0, r0, r1
 80132e8:	b002      	add	sp, #8
 80132ea:	4770      	bx	lr
 80132ec:	7ff00000 	.word	0x7ff00000

080132f0 <__b2d>:
 80132f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f4:	6906      	ldr	r6, [r0, #16]
 80132f6:	f100 0814 	add.w	r8, r0, #20
 80132fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80132fe:	1f37      	subs	r7, r6, #4
 8013300:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013304:	4610      	mov	r0, r2
 8013306:	f7ff fd4b 	bl	8012da0 <__hi0bits>
 801330a:	f1c0 0320 	rsb	r3, r0, #32
 801330e:	280a      	cmp	r0, #10
 8013310:	600b      	str	r3, [r1, #0]
 8013312:	491b      	ldr	r1, [pc, #108]	@ (8013380 <__b2d+0x90>)
 8013314:	dc15      	bgt.n	8013342 <__b2d+0x52>
 8013316:	f1c0 0c0b 	rsb	ip, r0, #11
 801331a:	fa22 f30c 	lsr.w	r3, r2, ip
 801331e:	45b8      	cmp	r8, r7
 8013320:	ea43 0501 	orr.w	r5, r3, r1
 8013324:	bf34      	ite	cc
 8013326:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801332a:	2300      	movcs	r3, #0
 801332c:	3015      	adds	r0, #21
 801332e:	fa02 f000 	lsl.w	r0, r2, r0
 8013332:	fa23 f30c 	lsr.w	r3, r3, ip
 8013336:	4303      	orrs	r3, r0
 8013338:	461c      	mov	r4, r3
 801333a:	ec45 4b10 	vmov	d0, r4, r5
 801333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013342:	45b8      	cmp	r8, r7
 8013344:	bf3a      	itte	cc
 8013346:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801334a:	f1a6 0708 	subcc.w	r7, r6, #8
 801334e:	2300      	movcs	r3, #0
 8013350:	380b      	subs	r0, #11
 8013352:	d012      	beq.n	801337a <__b2d+0x8a>
 8013354:	f1c0 0120 	rsb	r1, r0, #32
 8013358:	fa23 f401 	lsr.w	r4, r3, r1
 801335c:	4082      	lsls	r2, r0
 801335e:	4322      	orrs	r2, r4
 8013360:	4547      	cmp	r7, r8
 8013362:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013366:	bf8c      	ite	hi
 8013368:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801336c:	2200      	movls	r2, #0
 801336e:	4083      	lsls	r3, r0
 8013370:	40ca      	lsrs	r2, r1
 8013372:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013376:	4313      	orrs	r3, r2
 8013378:	e7de      	b.n	8013338 <__b2d+0x48>
 801337a:	ea42 0501 	orr.w	r5, r2, r1
 801337e:	e7db      	b.n	8013338 <__b2d+0x48>
 8013380:	3ff00000 	.word	0x3ff00000

08013384 <__d2b>:
 8013384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013388:	460f      	mov	r7, r1
 801338a:	2101      	movs	r1, #1
 801338c:	ec59 8b10 	vmov	r8, r9, d0
 8013390:	4616      	mov	r6, r2
 8013392:	f7ff fc13 	bl	8012bbc <_Balloc>
 8013396:	4604      	mov	r4, r0
 8013398:	b930      	cbnz	r0, 80133a8 <__d2b+0x24>
 801339a:	4602      	mov	r2, r0
 801339c:	4b23      	ldr	r3, [pc, #140]	@ (801342c <__d2b+0xa8>)
 801339e:	4824      	ldr	r0, [pc, #144]	@ (8013430 <__d2b+0xac>)
 80133a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80133a4:	f001 fe88 	bl	80150b8 <__assert_func>
 80133a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133b0:	b10d      	cbz	r5, 80133b6 <__d2b+0x32>
 80133b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133b6:	9301      	str	r3, [sp, #4]
 80133b8:	f1b8 0300 	subs.w	r3, r8, #0
 80133bc:	d023      	beq.n	8013406 <__d2b+0x82>
 80133be:	4668      	mov	r0, sp
 80133c0:	9300      	str	r3, [sp, #0]
 80133c2:	f7ff fd0c 	bl	8012dde <__lo0bits>
 80133c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133ca:	b1d0      	cbz	r0, 8013402 <__d2b+0x7e>
 80133cc:	f1c0 0320 	rsb	r3, r0, #32
 80133d0:	fa02 f303 	lsl.w	r3, r2, r3
 80133d4:	430b      	orrs	r3, r1
 80133d6:	40c2      	lsrs	r2, r0
 80133d8:	6163      	str	r3, [r4, #20]
 80133da:	9201      	str	r2, [sp, #4]
 80133dc:	9b01      	ldr	r3, [sp, #4]
 80133de:	61a3      	str	r3, [r4, #24]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bf0c      	ite	eq
 80133e4:	2201      	moveq	r2, #1
 80133e6:	2202      	movne	r2, #2
 80133e8:	6122      	str	r2, [r4, #16]
 80133ea:	b1a5      	cbz	r5, 8013416 <__d2b+0x92>
 80133ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80133f0:	4405      	add	r5, r0
 80133f2:	603d      	str	r5, [r7, #0]
 80133f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80133f8:	6030      	str	r0, [r6, #0]
 80133fa:	4620      	mov	r0, r4
 80133fc:	b003      	add	sp, #12
 80133fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013402:	6161      	str	r1, [r4, #20]
 8013404:	e7ea      	b.n	80133dc <__d2b+0x58>
 8013406:	a801      	add	r0, sp, #4
 8013408:	f7ff fce9 	bl	8012dde <__lo0bits>
 801340c:	9b01      	ldr	r3, [sp, #4]
 801340e:	6163      	str	r3, [r4, #20]
 8013410:	3020      	adds	r0, #32
 8013412:	2201      	movs	r2, #1
 8013414:	e7e8      	b.n	80133e8 <__d2b+0x64>
 8013416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801341a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801341e:	6038      	str	r0, [r7, #0]
 8013420:	6918      	ldr	r0, [r3, #16]
 8013422:	f7ff fcbd 	bl	8012da0 <__hi0bits>
 8013426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801342a:	e7e5      	b.n	80133f8 <__d2b+0x74>
 801342c:	08016fe7 	.word	0x08016fe7
 8013430:	08016ff8 	.word	0x08016ff8

08013434 <__ratio>:
 8013434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013438:	4688      	mov	r8, r1
 801343a:	4669      	mov	r1, sp
 801343c:	4681      	mov	r9, r0
 801343e:	f7ff ff57 	bl	80132f0 <__b2d>
 8013442:	a901      	add	r1, sp, #4
 8013444:	4640      	mov	r0, r8
 8013446:	ec55 4b10 	vmov	r4, r5, d0
 801344a:	f7ff ff51 	bl	80132f0 <__b2d>
 801344e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013452:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013456:	1ad2      	subs	r2, r2, r3
 8013458:	e9dd 3100 	ldrd	r3, r1, [sp]
 801345c:	1a5b      	subs	r3, r3, r1
 801345e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013462:	ec57 6b10 	vmov	r6, r7, d0
 8013466:	2b00      	cmp	r3, #0
 8013468:	bfd6      	itet	le
 801346a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801346e:	462a      	movgt	r2, r5
 8013470:	463a      	movle	r2, r7
 8013472:	46ab      	mov	fp, r5
 8013474:	46a2      	mov	sl, r4
 8013476:	bfce      	itee	gt
 8013478:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801347c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013480:	ee00 3a90 	vmovle	s1, r3
 8013484:	ec4b ab17 	vmov	d7, sl, fp
 8013488:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801348c:	b003      	add	sp, #12
 801348e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013492 <__copybits>:
 8013492:	3901      	subs	r1, #1
 8013494:	b570      	push	{r4, r5, r6, lr}
 8013496:	1149      	asrs	r1, r1, #5
 8013498:	6914      	ldr	r4, [r2, #16]
 801349a:	3101      	adds	r1, #1
 801349c:	f102 0314 	add.w	r3, r2, #20
 80134a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80134a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80134a8:	1f05      	subs	r5, r0, #4
 80134aa:	42a3      	cmp	r3, r4
 80134ac:	d30c      	bcc.n	80134c8 <__copybits+0x36>
 80134ae:	1aa3      	subs	r3, r4, r2
 80134b0:	3b11      	subs	r3, #17
 80134b2:	f023 0303 	bic.w	r3, r3, #3
 80134b6:	3211      	adds	r2, #17
 80134b8:	42a2      	cmp	r2, r4
 80134ba:	bf88      	it	hi
 80134bc:	2300      	movhi	r3, #0
 80134be:	4418      	add	r0, r3
 80134c0:	2300      	movs	r3, #0
 80134c2:	4288      	cmp	r0, r1
 80134c4:	d305      	bcc.n	80134d2 <__copybits+0x40>
 80134c6:	bd70      	pop	{r4, r5, r6, pc}
 80134c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80134cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80134d0:	e7eb      	b.n	80134aa <__copybits+0x18>
 80134d2:	f840 3b04 	str.w	r3, [r0], #4
 80134d6:	e7f4      	b.n	80134c2 <__copybits+0x30>

080134d8 <__any_on>:
 80134d8:	f100 0214 	add.w	r2, r0, #20
 80134dc:	6900      	ldr	r0, [r0, #16]
 80134de:	114b      	asrs	r3, r1, #5
 80134e0:	4298      	cmp	r0, r3
 80134e2:	b510      	push	{r4, lr}
 80134e4:	db11      	blt.n	801350a <__any_on+0x32>
 80134e6:	dd0a      	ble.n	80134fe <__any_on+0x26>
 80134e8:	f011 011f 	ands.w	r1, r1, #31
 80134ec:	d007      	beq.n	80134fe <__any_on+0x26>
 80134ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80134f2:	fa24 f001 	lsr.w	r0, r4, r1
 80134f6:	fa00 f101 	lsl.w	r1, r0, r1
 80134fa:	428c      	cmp	r4, r1
 80134fc:	d10b      	bne.n	8013516 <__any_on+0x3e>
 80134fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013502:	4293      	cmp	r3, r2
 8013504:	d803      	bhi.n	801350e <__any_on+0x36>
 8013506:	2000      	movs	r0, #0
 8013508:	bd10      	pop	{r4, pc}
 801350a:	4603      	mov	r3, r0
 801350c:	e7f7      	b.n	80134fe <__any_on+0x26>
 801350e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013512:	2900      	cmp	r1, #0
 8013514:	d0f5      	beq.n	8013502 <__any_on+0x2a>
 8013516:	2001      	movs	r0, #1
 8013518:	e7f6      	b.n	8013508 <__any_on+0x30>

0801351a <sulp>:
 801351a:	b570      	push	{r4, r5, r6, lr}
 801351c:	4604      	mov	r4, r0
 801351e:	460d      	mov	r5, r1
 8013520:	4616      	mov	r6, r2
 8013522:	ec45 4b10 	vmov	d0, r4, r5
 8013526:	f7ff febd 	bl	80132a4 <__ulp>
 801352a:	b17e      	cbz	r6, 801354c <sulp+0x32>
 801352c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013530:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013534:	2b00      	cmp	r3, #0
 8013536:	dd09      	ble.n	801354c <sulp+0x32>
 8013538:	051b      	lsls	r3, r3, #20
 801353a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801353e:	2000      	movs	r0, #0
 8013540:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013544:	ec41 0b17 	vmov	d7, r0, r1
 8013548:	ee20 0b07 	vmul.f64	d0, d0, d7
 801354c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013550 <_strtod_l>:
 8013550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013554:	ed2d 8b0a 	vpush	{d8-d12}
 8013558:	b097      	sub	sp, #92	@ 0x5c
 801355a:	4688      	mov	r8, r1
 801355c:	920e      	str	r2, [sp, #56]	@ 0x38
 801355e:	2200      	movs	r2, #0
 8013560:	9212      	str	r2, [sp, #72]	@ 0x48
 8013562:	9005      	str	r0, [sp, #20]
 8013564:	f04f 0a00 	mov.w	sl, #0
 8013568:	f04f 0b00 	mov.w	fp, #0
 801356c:	460a      	mov	r2, r1
 801356e:	9211      	str	r2, [sp, #68]	@ 0x44
 8013570:	7811      	ldrb	r1, [r2, #0]
 8013572:	292b      	cmp	r1, #43	@ 0x2b
 8013574:	d04c      	beq.n	8013610 <_strtod_l+0xc0>
 8013576:	d839      	bhi.n	80135ec <_strtod_l+0x9c>
 8013578:	290d      	cmp	r1, #13
 801357a:	d833      	bhi.n	80135e4 <_strtod_l+0x94>
 801357c:	2908      	cmp	r1, #8
 801357e:	d833      	bhi.n	80135e8 <_strtod_l+0x98>
 8013580:	2900      	cmp	r1, #0
 8013582:	d03c      	beq.n	80135fe <_strtod_l+0xae>
 8013584:	2200      	movs	r2, #0
 8013586:	9208      	str	r2, [sp, #32]
 8013588:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801358a:	782a      	ldrb	r2, [r5, #0]
 801358c:	2a30      	cmp	r2, #48	@ 0x30
 801358e:	f040 80b5 	bne.w	80136fc <_strtod_l+0x1ac>
 8013592:	786a      	ldrb	r2, [r5, #1]
 8013594:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013598:	2a58      	cmp	r2, #88	@ 0x58
 801359a:	d170      	bne.n	801367e <_strtod_l+0x12e>
 801359c:	9302      	str	r3, [sp, #8]
 801359e:	9b08      	ldr	r3, [sp, #32]
 80135a0:	9301      	str	r3, [sp, #4]
 80135a2:	ab12      	add	r3, sp, #72	@ 0x48
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	4a8b      	ldr	r2, [pc, #556]	@ (80137d4 <_strtod_l+0x284>)
 80135a8:	9805      	ldr	r0, [sp, #20]
 80135aa:	ab13      	add	r3, sp, #76	@ 0x4c
 80135ac:	a911      	add	r1, sp, #68	@ 0x44
 80135ae:	f001 fe1d 	bl	80151ec <__gethex>
 80135b2:	f010 060f 	ands.w	r6, r0, #15
 80135b6:	4604      	mov	r4, r0
 80135b8:	d005      	beq.n	80135c6 <_strtod_l+0x76>
 80135ba:	2e06      	cmp	r6, #6
 80135bc:	d12a      	bne.n	8013614 <_strtod_l+0xc4>
 80135be:	3501      	adds	r5, #1
 80135c0:	2300      	movs	r3, #0
 80135c2:	9511      	str	r5, [sp, #68]	@ 0x44
 80135c4:	9308      	str	r3, [sp, #32]
 80135c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f040 852f 	bne.w	801402c <_strtod_l+0xadc>
 80135ce:	9b08      	ldr	r3, [sp, #32]
 80135d0:	ec4b ab10 	vmov	d0, sl, fp
 80135d4:	b1cb      	cbz	r3, 801360a <_strtod_l+0xba>
 80135d6:	eeb1 0b40 	vneg.f64	d0, d0
 80135da:	b017      	add	sp, #92	@ 0x5c
 80135dc:	ecbd 8b0a 	vpop	{d8-d12}
 80135e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e4:	2920      	cmp	r1, #32
 80135e6:	d1cd      	bne.n	8013584 <_strtod_l+0x34>
 80135e8:	3201      	adds	r2, #1
 80135ea:	e7c0      	b.n	801356e <_strtod_l+0x1e>
 80135ec:	292d      	cmp	r1, #45	@ 0x2d
 80135ee:	d1c9      	bne.n	8013584 <_strtod_l+0x34>
 80135f0:	2101      	movs	r1, #1
 80135f2:	9108      	str	r1, [sp, #32]
 80135f4:	1c51      	adds	r1, r2, #1
 80135f6:	9111      	str	r1, [sp, #68]	@ 0x44
 80135f8:	7852      	ldrb	r2, [r2, #1]
 80135fa:	2a00      	cmp	r2, #0
 80135fc:	d1c4      	bne.n	8013588 <_strtod_l+0x38>
 80135fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013600:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013604:	2b00      	cmp	r3, #0
 8013606:	f040 850f 	bne.w	8014028 <_strtod_l+0xad8>
 801360a:	ec4b ab10 	vmov	d0, sl, fp
 801360e:	e7e4      	b.n	80135da <_strtod_l+0x8a>
 8013610:	2100      	movs	r1, #0
 8013612:	e7ee      	b.n	80135f2 <_strtod_l+0xa2>
 8013614:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013616:	b13a      	cbz	r2, 8013628 <_strtod_l+0xd8>
 8013618:	2135      	movs	r1, #53	@ 0x35
 801361a:	a814      	add	r0, sp, #80	@ 0x50
 801361c:	f7ff ff39 	bl	8013492 <__copybits>
 8013620:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013622:	9805      	ldr	r0, [sp, #20]
 8013624:	f7ff fb0a 	bl	8012c3c <_Bfree>
 8013628:	1e73      	subs	r3, r6, #1
 801362a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801362c:	2b04      	cmp	r3, #4
 801362e:	d806      	bhi.n	801363e <_strtod_l+0xee>
 8013630:	e8df f003 	tbb	[pc, r3]
 8013634:	201d0314 	.word	0x201d0314
 8013638:	14          	.byte	0x14
 8013639:	00          	.byte	0x00
 801363a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801363e:	05e3      	lsls	r3, r4, #23
 8013640:	bf48      	it	mi
 8013642:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801364a:	0d1b      	lsrs	r3, r3, #20
 801364c:	051b      	lsls	r3, r3, #20
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1b9      	bne.n	80135c6 <_strtod_l+0x76>
 8013652:	f7fe fb93 	bl	8011d7c <__errno>
 8013656:	2322      	movs	r3, #34	@ 0x22
 8013658:	6003      	str	r3, [r0, #0]
 801365a:	e7b4      	b.n	80135c6 <_strtod_l+0x76>
 801365c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013660:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013664:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013668:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801366c:	e7e7      	b.n	801363e <_strtod_l+0xee>
 801366e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80137dc <_strtod_l+0x28c>
 8013672:	e7e4      	b.n	801363e <_strtod_l+0xee>
 8013674:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013678:	f04f 3aff 	mov.w	sl, #4294967295
 801367c:	e7df      	b.n	801363e <_strtod_l+0xee>
 801367e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013680:	1c5a      	adds	r2, r3, #1
 8013682:	9211      	str	r2, [sp, #68]	@ 0x44
 8013684:	785b      	ldrb	r3, [r3, #1]
 8013686:	2b30      	cmp	r3, #48	@ 0x30
 8013688:	d0f9      	beq.n	801367e <_strtod_l+0x12e>
 801368a:	2b00      	cmp	r3, #0
 801368c:	d09b      	beq.n	80135c6 <_strtod_l+0x76>
 801368e:	2301      	movs	r3, #1
 8013690:	2600      	movs	r6, #0
 8013692:	9307      	str	r3, [sp, #28]
 8013694:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013696:	930a      	str	r3, [sp, #40]	@ 0x28
 8013698:	46b1      	mov	r9, r6
 801369a:	4635      	mov	r5, r6
 801369c:	220a      	movs	r2, #10
 801369e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80136a0:	7804      	ldrb	r4, [r0, #0]
 80136a2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80136a6:	b2d9      	uxtb	r1, r3
 80136a8:	2909      	cmp	r1, #9
 80136aa:	d929      	bls.n	8013700 <_strtod_l+0x1b0>
 80136ac:	494a      	ldr	r1, [pc, #296]	@ (80137d8 <_strtod_l+0x288>)
 80136ae:	2201      	movs	r2, #1
 80136b0:	f001 fcb5 	bl	801501e <strncmp>
 80136b4:	b378      	cbz	r0, 8013716 <_strtod_l+0x1c6>
 80136b6:	2000      	movs	r0, #0
 80136b8:	4622      	mov	r2, r4
 80136ba:	462b      	mov	r3, r5
 80136bc:	4607      	mov	r7, r0
 80136be:	9006      	str	r0, [sp, #24]
 80136c0:	2a65      	cmp	r2, #101	@ 0x65
 80136c2:	d001      	beq.n	80136c8 <_strtod_l+0x178>
 80136c4:	2a45      	cmp	r2, #69	@ 0x45
 80136c6:	d117      	bne.n	80136f8 <_strtod_l+0x1a8>
 80136c8:	b91b      	cbnz	r3, 80136d2 <_strtod_l+0x182>
 80136ca:	9b07      	ldr	r3, [sp, #28]
 80136cc:	4303      	orrs	r3, r0
 80136ce:	d096      	beq.n	80135fe <_strtod_l+0xae>
 80136d0:	2300      	movs	r3, #0
 80136d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80136d6:	f108 0201 	add.w	r2, r8, #1
 80136da:	9211      	str	r2, [sp, #68]	@ 0x44
 80136dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80136e0:	2a2b      	cmp	r2, #43	@ 0x2b
 80136e2:	d06b      	beq.n	80137bc <_strtod_l+0x26c>
 80136e4:	2a2d      	cmp	r2, #45	@ 0x2d
 80136e6:	d071      	beq.n	80137cc <_strtod_l+0x27c>
 80136e8:	f04f 0e00 	mov.w	lr, #0
 80136ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80136f0:	2c09      	cmp	r4, #9
 80136f2:	d979      	bls.n	80137e8 <_strtod_l+0x298>
 80136f4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80136f8:	2400      	movs	r4, #0
 80136fa:	e094      	b.n	8013826 <_strtod_l+0x2d6>
 80136fc:	2300      	movs	r3, #0
 80136fe:	e7c7      	b.n	8013690 <_strtod_l+0x140>
 8013700:	2d08      	cmp	r5, #8
 8013702:	f100 0001 	add.w	r0, r0, #1
 8013706:	bfd4      	ite	le
 8013708:	fb02 3909 	mlale	r9, r2, r9, r3
 801370c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8013710:	3501      	adds	r5, #1
 8013712:	9011      	str	r0, [sp, #68]	@ 0x44
 8013714:	e7c3      	b.n	801369e <_strtod_l+0x14e>
 8013716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013718:	1c5a      	adds	r2, r3, #1
 801371a:	9211      	str	r2, [sp, #68]	@ 0x44
 801371c:	785a      	ldrb	r2, [r3, #1]
 801371e:	b375      	cbz	r5, 801377e <_strtod_l+0x22e>
 8013720:	4607      	mov	r7, r0
 8013722:	462b      	mov	r3, r5
 8013724:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013728:	2909      	cmp	r1, #9
 801372a:	d913      	bls.n	8013754 <_strtod_l+0x204>
 801372c:	2101      	movs	r1, #1
 801372e:	9106      	str	r1, [sp, #24]
 8013730:	e7c6      	b.n	80136c0 <_strtod_l+0x170>
 8013732:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	9211      	str	r2, [sp, #68]	@ 0x44
 8013738:	785a      	ldrb	r2, [r3, #1]
 801373a:	3001      	adds	r0, #1
 801373c:	2a30      	cmp	r2, #48	@ 0x30
 801373e:	d0f8      	beq.n	8013732 <_strtod_l+0x1e2>
 8013740:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013744:	2b08      	cmp	r3, #8
 8013746:	f200 8476 	bhi.w	8014036 <_strtod_l+0xae6>
 801374a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801374c:	930a      	str	r3, [sp, #40]	@ 0x28
 801374e:	4607      	mov	r7, r0
 8013750:	2000      	movs	r0, #0
 8013752:	4603      	mov	r3, r0
 8013754:	3a30      	subs	r2, #48	@ 0x30
 8013756:	f100 0101 	add.w	r1, r0, #1
 801375a:	d023      	beq.n	80137a4 <_strtod_l+0x254>
 801375c:	440f      	add	r7, r1
 801375e:	eb00 0c03 	add.w	ip, r0, r3
 8013762:	4619      	mov	r1, r3
 8013764:	240a      	movs	r4, #10
 8013766:	4561      	cmp	r1, ip
 8013768:	d10b      	bne.n	8013782 <_strtod_l+0x232>
 801376a:	1c5c      	adds	r4, r3, #1
 801376c:	4403      	add	r3, r0
 801376e:	2b08      	cmp	r3, #8
 8013770:	4404      	add	r4, r0
 8013772:	dc11      	bgt.n	8013798 <_strtod_l+0x248>
 8013774:	230a      	movs	r3, #10
 8013776:	fb03 2909 	mla	r9, r3, r9, r2
 801377a:	2100      	movs	r1, #0
 801377c:	e013      	b.n	80137a6 <_strtod_l+0x256>
 801377e:	4628      	mov	r0, r5
 8013780:	e7dc      	b.n	801373c <_strtod_l+0x1ec>
 8013782:	2908      	cmp	r1, #8
 8013784:	f101 0101 	add.w	r1, r1, #1
 8013788:	dc02      	bgt.n	8013790 <_strtod_l+0x240>
 801378a:	fb04 f909 	mul.w	r9, r4, r9
 801378e:	e7ea      	b.n	8013766 <_strtod_l+0x216>
 8013790:	2910      	cmp	r1, #16
 8013792:	bfd8      	it	le
 8013794:	4366      	mulle	r6, r4
 8013796:	e7e6      	b.n	8013766 <_strtod_l+0x216>
 8013798:	2b0f      	cmp	r3, #15
 801379a:	dcee      	bgt.n	801377a <_strtod_l+0x22a>
 801379c:	230a      	movs	r3, #10
 801379e:	fb03 2606 	mla	r6, r3, r6, r2
 80137a2:	e7ea      	b.n	801377a <_strtod_l+0x22a>
 80137a4:	461c      	mov	r4, r3
 80137a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80137ac:	785a      	ldrb	r2, [r3, #1]
 80137ae:	4608      	mov	r0, r1
 80137b0:	4623      	mov	r3, r4
 80137b2:	e7b7      	b.n	8013724 <_strtod_l+0x1d4>
 80137b4:	2301      	movs	r3, #1
 80137b6:	2700      	movs	r7, #0
 80137b8:	9306      	str	r3, [sp, #24]
 80137ba:	e786      	b.n	80136ca <_strtod_l+0x17a>
 80137bc:	f04f 0e00 	mov.w	lr, #0
 80137c0:	f108 0202 	add.w	r2, r8, #2
 80137c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80137c6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80137ca:	e78f      	b.n	80136ec <_strtod_l+0x19c>
 80137cc:	f04f 0e01 	mov.w	lr, #1
 80137d0:	e7f6      	b.n	80137c0 <_strtod_l+0x270>
 80137d2:	bf00      	nop
 80137d4:	08017168 	.word	0x08017168
 80137d8:	08017150 	.word	0x08017150
 80137dc:	7ff00000 	.word	0x7ff00000
 80137e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137e2:	1c54      	adds	r4, r2, #1
 80137e4:	9411      	str	r4, [sp, #68]	@ 0x44
 80137e6:	7852      	ldrb	r2, [r2, #1]
 80137e8:	2a30      	cmp	r2, #48	@ 0x30
 80137ea:	d0f9      	beq.n	80137e0 <_strtod_l+0x290>
 80137ec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80137f0:	2c08      	cmp	r4, #8
 80137f2:	d881      	bhi.n	80136f8 <_strtod_l+0x1a8>
 80137f4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80137f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80137fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137fe:	1c51      	adds	r1, r2, #1
 8013800:	9111      	str	r1, [sp, #68]	@ 0x44
 8013802:	7852      	ldrb	r2, [r2, #1]
 8013804:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013808:	2c09      	cmp	r4, #9
 801380a:	d938      	bls.n	801387e <_strtod_l+0x32e>
 801380c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801380e:	1b0c      	subs	r4, r1, r4
 8013810:	2c08      	cmp	r4, #8
 8013812:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013816:	dc02      	bgt.n	801381e <_strtod_l+0x2ce>
 8013818:	4564      	cmp	r4, ip
 801381a:	bfa8      	it	ge
 801381c:	4664      	movge	r4, ip
 801381e:	f1be 0f00 	cmp.w	lr, #0
 8013822:	d000      	beq.n	8013826 <_strtod_l+0x2d6>
 8013824:	4264      	negs	r4, r4
 8013826:	2b00      	cmp	r3, #0
 8013828:	d14e      	bne.n	80138c8 <_strtod_l+0x378>
 801382a:	9b07      	ldr	r3, [sp, #28]
 801382c:	4318      	orrs	r0, r3
 801382e:	f47f aeca 	bne.w	80135c6 <_strtod_l+0x76>
 8013832:	9b06      	ldr	r3, [sp, #24]
 8013834:	2b00      	cmp	r3, #0
 8013836:	f47f aee2 	bne.w	80135fe <_strtod_l+0xae>
 801383a:	2a69      	cmp	r2, #105	@ 0x69
 801383c:	d027      	beq.n	801388e <_strtod_l+0x33e>
 801383e:	dc24      	bgt.n	801388a <_strtod_l+0x33a>
 8013840:	2a49      	cmp	r2, #73	@ 0x49
 8013842:	d024      	beq.n	801388e <_strtod_l+0x33e>
 8013844:	2a4e      	cmp	r2, #78	@ 0x4e
 8013846:	f47f aeda 	bne.w	80135fe <_strtod_l+0xae>
 801384a:	4997      	ldr	r1, [pc, #604]	@ (8013aa8 <_strtod_l+0x558>)
 801384c:	a811      	add	r0, sp, #68	@ 0x44
 801384e:	f001 feef 	bl	8015630 <__match>
 8013852:	2800      	cmp	r0, #0
 8013854:	f43f aed3 	beq.w	80135fe <_strtod_l+0xae>
 8013858:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b28      	cmp	r3, #40	@ 0x28
 801385e:	d12d      	bne.n	80138bc <_strtod_l+0x36c>
 8013860:	4992      	ldr	r1, [pc, #584]	@ (8013aac <_strtod_l+0x55c>)
 8013862:	aa14      	add	r2, sp, #80	@ 0x50
 8013864:	a811      	add	r0, sp, #68	@ 0x44
 8013866:	f001 fef7 	bl	8015658 <__hexnan>
 801386a:	2805      	cmp	r0, #5
 801386c:	d126      	bne.n	80138bc <_strtod_l+0x36c>
 801386e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013870:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013874:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013878:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801387c:	e6a3      	b.n	80135c6 <_strtod_l+0x76>
 801387e:	240a      	movs	r4, #10
 8013880:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013884:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013888:	e7b8      	b.n	80137fc <_strtod_l+0x2ac>
 801388a:	2a6e      	cmp	r2, #110	@ 0x6e
 801388c:	e7db      	b.n	8013846 <_strtod_l+0x2f6>
 801388e:	4988      	ldr	r1, [pc, #544]	@ (8013ab0 <_strtod_l+0x560>)
 8013890:	a811      	add	r0, sp, #68	@ 0x44
 8013892:	f001 fecd 	bl	8015630 <__match>
 8013896:	2800      	cmp	r0, #0
 8013898:	f43f aeb1 	beq.w	80135fe <_strtod_l+0xae>
 801389c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801389e:	4985      	ldr	r1, [pc, #532]	@ (8013ab4 <_strtod_l+0x564>)
 80138a0:	3b01      	subs	r3, #1
 80138a2:	a811      	add	r0, sp, #68	@ 0x44
 80138a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80138a6:	f001 fec3 	bl	8015630 <__match>
 80138aa:	b910      	cbnz	r0, 80138b2 <_strtod_l+0x362>
 80138ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138ae:	3301      	adds	r3, #1
 80138b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80138b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013ac8 <_strtod_l+0x578>
 80138b6:	f04f 0a00 	mov.w	sl, #0
 80138ba:	e684      	b.n	80135c6 <_strtod_l+0x76>
 80138bc:	487e      	ldr	r0, [pc, #504]	@ (8013ab8 <_strtod_l+0x568>)
 80138be:	f001 fbf3 	bl	80150a8 <nan>
 80138c2:	ec5b ab10 	vmov	sl, fp, d0
 80138c6:	e67e      	b.n	80135c6 <_strtod_l+0x76>
 80138c8:	ee07 9a90 	vmov	s15, r9
 80138cc:	1be2      	subs	r2, r4, r7
 80138ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80138d2:	2d00      	cmp	r5, #0
 80138d4:	bf08      	it	eq
 80138d6:	461d      	moveq	r5, r3
 80138d8:	2b10      	cmp	r3, #16
 80138da:	9209      	str	r2, [sp, #36]	@ 0x24
 80138dc:	461a      	mov	r2, r3
 80138de:	bfa8      	it	ge
 80138e0:	2210      	movge	r2, #16
 80138e2:	2b09      	cmp	r3, #9
 80138e4:	ec5b ab17 	vmov	sl, fp, d7
 80138e8:	dc15      	bgt.n	8013916 <_strtod_l+0x3c6>
 80138ea:	1be1      	subs	r1, r4, r7
 80138ec:	2900      	cmp	r1, #0
 80138ee:	f43f ae6a 	beq.w	80135c6 <_strtod_l+0x76>
 80138f2:	eba4 0107 	sub.w	r1, r4, r7
 80138f6:	dd72      	ble.n	80139de <_strtod_l+0x48e>
 80138f8:	2916      	cmp	r1, #22
 80138fa:	dc59      	bgt.n	80139b0 <_strtod_l+0x460>
 80138fc:	4b6f      	ldr	r3, [pc, #444]	@ (8013abc <_strtod_l+0x56c>)
 80138fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013904:	ed93 7b00 	vldr	d7, [r3]
 8013908:	ec4b ab16 	vmov	d6, sl, fp
 801390c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013910:	ec5b ab17 	vmov	sl, fp, d7
 8013914:	e657      	b.n	80135c6 <_strtod_l+0x76>
 8013916:	4969      	ldr	r1, [pc, #420]	@ (8013abc <_strtod_l+0x56c>)
 8013918:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801391c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013920:	ee06 6a90 	vmov	s13, r6
 8013924:	2b0f      	cmp	r3, #15
 8013926:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801392a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801392e:	ec5b ab16 	vmov	sl, fp, d6
 8013932:	ddda      	ble.n	80138ea <_strtod_l+0x39a>
 8013934:	1a9a      	subs	r2, r3, r2
 8013936:	1be1      	subs	r1, r4, r7
 8013938:	440a      	add	r2, r1
 801393a:	2a00      	cmp	r2, #0
 801393c:	f340 8094 	ble.w	8013a68 <_strtod_l+0x518>
 8013940:	f012 000f 	ands.w	r0, r2, #15
 8013944:	d00a      	beq.n	801395c <_strtod_l+0x40c>
 8013946:	495d      	ldr	r1, [pc, #372]	@ (8013abc <_strtod_l+0x56c>)
 8013948:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801394c:	ed91 7b00 	vldr	d7, [r1]
 8013950:	ec4b ab16 	vmov	d6, sl, fp
 8013954:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013958:	ec5b ab17 	vmov	sl, fp, d7
 801395c:	f032 020f 	bics.w	r2, r2, #15
 8013960:	d073      	beq.n	8013a4a <_strtod_l+0x4fa>
 8013962:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013966:	dd47      	ble.n	80139f8 <_strtod_l+0x4a8>
 8013968:	2400      	movs	r4, #0
 801396a:	4625      	mov	r5, r4
 801396c:	9407      	str	r4, [sp, #28]
 801396e:	4626      	mov	r6, r4
 8013970:	9a05      	ldr	r2, [sp, #20]
 8013972:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013ac8 <_strtod_l+0x578>
 8013976:	2322      	movs	r3, #34	@ 0x22
 8013978:	6013      	str	r3, [r2, #0]
 801397a:	f04f 0a00 	mov.w	sl, #0
 801397e:	9b07      	ldr	r3, [sp, #28]
 8013980:	2b00      	cmp	r3, #0
 8013982:	f43f ae20 	beq.w	80135c6 <_strtod_l+0x76>
 8013986:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013988:	9805      	ldr	r0, [sp, #20]
 801398a:	f7ff f957 	bl	8012c3c <_Bfree>
 801398e:	9805      	ldr	r0, [sp, #20]
 8013990:	4631      	mov	r1, r6
 8013992:	f7ff f953 	bl	8012c3c <_Bfree>
 8013996:	9805      	ldr	r0, [sp, #20]
 8013998:	4629      	mov	r1, r5
 801399a:	f7ff f94f 	bl	8012c3c <_Bfree>
 801399e:	9907      	ldr	r1, [sp, #28]
 80139a0:	9805      	ldr	r0, [sp, #20]
 80139a2:	f7ff f94b 	bl	8012c3c <_Bfree>
 80139a6:	9805      	ldr	r0, [sp, #20]
 80139a8:	4621      	mov	r1, r4
 80139aa:	f7ff f947 	bl	8012c3c <_Bfree>
 80139ae:	e60a      	b.n	80135c6 <_strtod_l+0x76>
 80139b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80139b4:	1be0      	subs	r0, r4, r7
 80139b6:	4281      	cmp	r1, r0
 80139b8:	dbbc      	blt.n	8013934 <_strtod_l+0x3e4>
 80139ba:	4a40      	ldr	r2, [pc, #256]	@ (8013abc <_strtod_l+0x56c>)
 80139bc:	f1c3 030f 	rsb	r3, r3, #15
 80139c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80139c4:	ed91 7b00 	vldr	d7, [r1]
 80139c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80139ca:	ec4b ab16 	vmov	d6, sl, fp
 80139ce:	1acb      	subs	r3, r1, r3
 80139d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80139d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139d8:	ed92 6b00 	vldr	d6, [r2]
 80139dc:	e796      	b.n	801390c <_strtod_l+0x3bc>
 80139de:	3116      	adds	r1, #22
 80139e0:	dba8      	blt.n	8013934 <_strtod_l+0x3e4>
 80139e2:	4b36      	ldr	r3, [pc, #216]	@ (8013abc <_strtod_l+0x56c>)
 80139e4:	1b3c      	subs	r4, r7, r4
 80139e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80139ea:	ed94 7b00 	vldr	d7, [r4]
 80139ee:	ec4b ab16 	vmov	d6, sl, fp
 80139f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80139f6:	e78b      	b.n	8013910 <_strtod_l+0x3c0>
 80139f8:	2000      	movs	r0, #0
 80139fa:	ec4b ab17 	vmov	d7, sl, fp
 80139fe:	4e30      	ldr	r6, [pc, #192]	@ (8013ac0 <_strtod_l+0x570>)
 8013a00:	1112      	asrs	r2, r2, #4
 8013a02:	4601      	mov	r1, r0
 8013a04:	2a01      	cmp	r2, #1
 8013a06:	dc23      	bgt.n	8013a50 <_strtod_l+0x500>
 8013a08:	b108      	cbz	r0, 8013a0e <_strtod_l+0x4be>
 8013a0a:	ec5b ab17 	vmov	sl, fp, d7
 8013a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8013ac0 <_strtod_l+0x570>)
 8013a10:	482c      	ldr	r0, [pc, #176]	@ (8013ac4 <_strtod_l+0x574>)
 8013a12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013a16:	ed92 7b00 	vldr	d7, [r2]
 8013a1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013a1e:	ec4b ab16 	vmov	d6, sl, fp
 8013a22:	4a29      	ldr	r2, [pc, #164]	@ (8013ac8 <_strtod_l+0x578>)
 8013a24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a28:	ee17 1a90 	vmov	r1, s15
 8013a2c:	400a      	ands	r2, r1
 8013a2e:	4282      	cmp	r2, r0
 8013a30:	ec5b ab17 	vmov	sl, fp, d7
 8013a34:	d898      	bhi.n	8013968 <_strtod_l+0x418>
 8013a36:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013a3a:	4282      	cmp	r2, r0
 8013a3c:	bf86      	itte	hi
 8013a3e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013acc <_strtod_l+0x57c>
 8013a42:	f04f 3aff 	movhi.w	sl, #4294967295
 8013a46:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	9206      	str	r2, [sp, #24]
 8013a4e:	e076      	b.n	8013b3e <_strtod_l+0x5ee>
 8013a50:	f012 0f01 	tst.w	r2, #1
 8013a54:	d004      	beq.n	8013a60 <_strtod_l+0x510>
 8013a56:	ed96 6b00 	vldr	d6, [r6]
 8013a5a:	2001      	movs	r0, #1
 8013a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a60:	3101      	adds	r1, #1
 8013a62:	1052      	asrs	r2, r2, #1
 8013a64:	3608      	adds	r6, #8
 8013a66:	e7cd      	b.n	8013a04 <_strtod_l+0x4b4>
 8013a68:	d0ef      	beq.n	8013a4a <_strtod_l+0x4fa>
 8013a6a:	4252      	negs	r2, r2
 8013a6c:	f012 000f 	ands.w	r0, r2, #15
 8013a70:	d00a      	beq.n	8013a88 <_strtod_l+0x538>
 8013a72:	4912      	ldr	r1, [pc, #72]	@ (8013abc <_strtod_l+0x56c>)
 8013a74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a78:	ed91 7b00 	vldr	d7, [r1]
 8013a7c:	ec4b ab16 	vmov	d6, sl, fp
 8013a80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a84:	ec5b ab17 	vmov	sl, fp, d7
 8013a88:	1112      	asrs	r2, r2, #4
 8013a8a:	d0de      	beq.n	8013a4a <_strtod_l+0x4fa>
 8013a8c:	2a1f      	cmp	r2, #31
 8013a8e:	dd1f      	ble.n	8013ad0 <_strtod_l+0x580>
 8013a90:	2400      	movs	r4, #0
 8013a92:	4625      	mov	r5, r4
 8013a94:	9407      	str	r4, [sp, #28]
 8013a96:	4626      	mov	r6, r4
 8013a98:	9a05      	ldr	r2, [sp, #20]
 8013a9a:	2322      	movs	r3, #34	@ 0x22
 8013a9c:	f04f 0a00 	mov.w	sl, #0
 8013aa0:	f04f 0b00 	mov.w	fp, #0
 8013aa4:	6013      	str	r3, [r2, #0]
 8013aa6:	e76a      	b.n	801397e <_strtod_l+0x42e>
 8013aa8:	08016f41 	.word	0x08016f41
 8013aac:	08017154 	.word	0x08017154
 8013ab0:	08016f39 	.word	0x08016f39
 8013ab4:	08016f6e 	.word	0x08016f6e
 8013ab8:	08017318 	.word	0x08017318
 8013abc:	08017088 	.word	0x08017088
 8013ac0:	08017060 	.word	0x08017060
 8013ac4:	7ca00000 	.word	0x7ca00000
 8013ac8:	7ff00000 	.word	0x7ff00000
 8013acc:	7fefffff 	.word	0x7fefffff
 8013ad0:	f012 0110 	ands.w	r1, r2, #16
 8013ad4:	bf18      	it	ne
 8013ad6:	216a      	movne	r1, #106	@ 0x6a
 8013ad8:	9106      	str	r1, [sp, #24]
 8013ada:	ec4b ab17 	vmov	d7, sl, fp
 8013ade:	49b0      	ldr	r1, [pc, #704]	@ (8013da0 <_strtod_l+0x850>)
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	07d6      	lsls	r6, r2, #31
 8013ae4:	d504      	bpl.n	8013af0 <_strtod_l+0x5a0>
 8013ae6:	ed91 6b00 	vldr	d6, [r1]
 8013aea:	2001      	movs	r0, #1
 8013aec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013af0:	1052      	asrs	r2, r2, #1
 8013af2:	f101 0108 	add.w	r1, r1, #8
 8013af6:	d1f4      	bne.n	8013ae2 <_strtod_l+0x592>
 8013af8:	b108      	cbz	r0, 8013afe <_strtod_l+0x5ae>
 8013afa:	ec5b ab17 	vmov	sl, fp, d7
 8013afe:	9a06      	ldr	r2, [sp, #24]
 8013b00:	b1b2      	cbz	r2, 8013b30 <_strtod_l+0x5e0>
 8013b02:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013b06:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013b0a:	2a00      	cmp	r2, #0
 8013b0c:	4658      	mov	r0, fp
 8013b0e:	dd0f      	ble.n	8013b30 <_strtod_l+0x5e0>
 8013b10:	2a1f      	cmp	r2, #31
 8013b12:	dd55      	ble.n	8013bc0 <_strtod_l+0x670>
 8013b14:	2a34      	cmp	r2, #52	@ 0x34
 8013b16:	bfde      	ittt	le
 8013b18:	f04f 32ff 	movle.w	r2, #4294967295
 8013b1c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013b20:	408a      	lslle	r2, r1
 8013b22:	f04f 0a00 	mov.w	sl, #0
 8013b26:	bfcc      	ite	gt
 8013b28:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013b2c:	ea02 0b00 	andle.w	fp, r2, r0
 8013b30:	ec4b ab17 	vmov	d7, sl, fp
 8013b34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3c:	d0a8      	beq.n	8013a90 <_strtod_l+0x540>
 8013b3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b40:	9805      	ldr	r0, [sp, #20]
 8013b42:	f8cd 9000 	str.w	r9, [sp]
 8013b46:	462a      	mov	r2, r5
 8013b48:	f7ff f8e0 	bl	8012d0c <__s2b>
 8013b4c:	9007      	str	r0, [sp, #28]
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	f43f af0a 	beq.w	8013968 <_strtod_l+0x418>
 8013b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b56:	1b3f      	subs	r7, r7, r4
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	bfb4      	ite	lt
 8013b5c:	463b      	movlt	r3, r7
 8013b5e:	2300      	movge	r3, #0
 8013b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b64:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8013d90 <_strtod_l+0x840>
 8013b68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b6c:	2400      	movs	r4, #0
 8013b6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013b70:	4625      	mov	r5, r4
 8013b72:	9b07      	ldr	r3, [sp, #28]
 8013b74:	9805      	ldr	r0, [sp, #20]
 8013b76:	6859      	ldr	r1, [r3, #4]
 8013b78:	f7ff f820 	bl	8012bbc <_Balloc>
 8013b7c:	4606      	mov	r6, r0
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	f43f aef6 	beq.w	8013970 <_strtod_l+0x420>
 8013b84:	9b07      	ldr	r3, [sp, #28]
 8013b86:	691a      	ldr	r2, [r3, #16]
 8013b88:	ec4b ab19 	vmov	d9, sl, fp
 8013b8c:	3202      	adds	r2, #2
 8013b8e:	f103 010c 	add.w	r1, r3, #12
 8013b92:	0092      	lsls	r2, r2, #2
 8013b94:	300c      	adds	r0, #12
 8013b96:	f7fe f91e 	bl	8011dd6 <memcpy>
 8013b9a:	eeb0 0b49 	vmov.f64	d0, d9
 8013b9e:	9805      	ldr	r0, [sp, #20]
 8013ba0:	aa14      	add	r2, sp, #80	@ 0x50
 8013ba2:	a913      	add	r1, sp, #76	@ 0x4c
 8013ba4:	f7ff fbee 	bl	8013384 <__d2b>
 8013ba8:	9012      	str	r0, [sp, #72]	@ 0x48
 8013baa:	2800      	cmp	r0, #0
 8013bac:	f43f aee0 	beq.w	8013970 <_strtod_l+0x420>
 8013bb0:	9805      	ldr	r0, [sp, #20]
 8013bb2:	2101      	movs	r1, #1
 8013bb4:	f7ff f940 	bl	8012e38 <__i2b>
 8013bb8:	4605      	mov	r5, r0
 8013bba:	b940      	cbnz	r0, 8013bce <_strtod_l+0x67e>
 8013bbc:	2500      	movs	r5, #0
 8013bbe:	e6d7      	b.n	8013970 <_strtod_l+0x420>
 8013bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8013bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8013bc8:	ea02 0a0a 	and.w	sl, r2, sl
 8013bcc:	e7b0      	b.n	8013b30 <_strtod_l+0x5e0>
 8013bce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013bd0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013bd2:	2f00      	cmp	r7, #0
 8013bd4:	bfab      	itete	ge
 8013bd6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013bd8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013bda:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013bde:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013be2:	bfac      	ite	ge
 8013be4:	eb07 0903 	addge.w	r9, r7, r3
 8013be8:	eba3 0807 	sublt.w	r8, r3, r7
 8013bec:	9b06      	ldr	r3, [sp, #24]
 8013bee:	1aff      	subs	r7, r7, r3
 8013bf0:	4417      	add	r7, r2
 8013bf2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8013da4 <_strtod_l+0x854>)
 8013bf8:	3f01      	subs	r7, #1
 8013bfa:	4297      	cmp	r7, r2
 8013bfc:	da51      	bge.n	8013ca2 <_strtod_l+0x752>
 8013bfe:	1bd1      	subs	r1, r2, r7
 8013c00:	291f      	cmp	r1, #31
 8013c02:	eba3 0301 	sub.w	r3, r3, r1
 8013c06:	f04f 0201 	mov.w	r2, #1
 8013c0a:	dc3e      	bgt.n	8013c8a <_strtod_l+0x73a>
 8013c0c:	408a      	lsls	r2, r1
 8013c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013c10:	2200      	movs	r2, #0
 8013c12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013c14:	eb09 0703 	add.w	r7, r9, r3
 8013c18:	4498      	add	r8, r3
 8013c1a:	9b06      	ldr	r3, [sp, #24]
 8013c1c:	45b9      	cmp	r9, r7
 8013c1e:	4498      	add	r8, r3
 8013c20:	464b      	mov	r3, r9
 8013c22:	bfa8      	it	ge
 8013c24:	463b      	movge	r3, r7
 8013c26:	4543      	cmp	r3, r8
 8013c28:	bfa8      	it	ge
 8013c2a:	4643      	movge	r3, r8
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	bfc2      	ittt	gt
 8013c30:	1aff      	subgt	r7, r7, r3
 8013c32:	eba8 0803 	subgt.w	r8, r8, r3
 8013c36:	eba9 0903 	subgt.w	r9, r9, r3
 8013c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	dd16      	ble.n	8013c6e <_strtod_l+0x71e>
 8013c40:	4629      	mov	r1, r5
 8013c42:	9805      	ldr	r0, [sp, #20]
 8013c44:	461a      	mov	r2, r3
 8013c46:	f7ff f9b7 	bl	8012fb8 <__pow5mult>
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d0b5      	beq.n	8013bbc <_strtod_l+0x66c>
 8013c50:	4601      	mov	r1, r0
 8013c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c54:	9805      	ldr	r0, [sp, #20]
 8013c56:	f7ff f905 	bl	8012e64 <__multiply>
 8013c5a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f43f ae87 	beq.w	8013970 <_strtod_l+0x420>
 8013c62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013c64:	9805      	ldr	r0, [sp, #20]
 8013c66:	f7fe ffe9 	bl	8012c3c <_Bfree>
 8013c6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8013c6e:	2f00      	cmp	r7, #0
 8013c70:	dc1b      	bgt.n	8013caa <_strtod_l+0x75a>
 8013c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	dd21      	ble.n	8013cbc <_strtod_l+0x76c>
 8013c78:	4631      	mov	r1, r6
 8013c7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c7c:	9805      	ldr	r0, [sp, #20]
 8013c7e:	f7ff f99b 	bl	8012fb8 <__pow5mult>
 8013c82:	4606      	mov	r6, r0
 8013c84:	b9d0      	cbnz	r0, 8013cbc <_strtod_l+0x76c>
 8013c86:	2600      	movs	r6, #0
 8013c88:	e672      	b.n	8013970 <_strtod_l+0x420>
 8013c8a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013c8e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013c92:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013c96:	37e2      	adds	r7, #226	@ 0xe2
 8013c98:	fa02 f107 	lsl.w	r1, r2, r7
 8013c9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013c9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013ca0:	e7b8      	b.n	8013c14 <_strtod_l+0x6c4>
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	e7f9      	b.n	8013c9e <_strtod_l+0x74e>
 8013caa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013cac:	9805      	ldr	r0, [sp, #20]
 8013cae:	463a      	mov	r2, r7
 8013cb0:	f7ff f9dc 	bl	801306c <__lshift>
 8013cb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d1db      	bne.n	8013c72 <_strtod_l+0x722>
 8013cba:	e659      	b.n	8013970 <_strtod_l+0x420>
 8013cbc:	f1b8 0f00 	cmp.w	r8, #0
 8013cc0:	dd07      	ble.n	8013cd2 <_strtod_l+0x782>
 8013cc2:	4631      	mov	r1, r6
 8013cc4:	9805      	ldr	r0, [sp, #20]
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	f7ff f9d0 	bl	801306c <__lshift>
 8013ccc:	4606      	mov	r6, r0
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d0d9      	beq.n	8013c86 <_strtod_l+0x736>
 8013cd2:	f1b9 0f00 	cmp.w	r9, #0
 8013cd6:	dd08      	ble.n	8013cea <_strtod_l+0x79a>
 8013cd8:	4629      	mov	r1, r5
 8013cda:	9805      	ldr	r0, [sp, #20]
 8013cdc:	464a      	mov	r2, r9
 8013cde:	f7ff f9c5 	bl	801306c <__lshift>
 8013ce2:	4605      	mov	r5, r0
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	f43f ae43 	beq.w	8013970 <_strtod_l+0x420>
 8013cea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013cec:	9805      	ldr	r0, [sp, #20]
 8013cee:	4632      	mov	r2, r6
 8013cf0:	f7ff fa44 	bl	801317c <__mdiff>
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	f43f ae3a 	beq.w	8013970 <_strtod_l+0x420>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013d02:	60c3      	str	r3, [r0, #12]
 8013d04:	4629      	mov	r1, r5
 8013d06:	f7ff fa1d 	bl	8013144 <__mcmp>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	da4e      	bge.n	8013dac <_strtod_l+0x85c>
 8013d0e:	ea58 080a 	orrs.w	r8, r8, sl
 8013d12:	d174      	bne.n	8013dfe <_strtod_l+0x8ae>
 8013d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d170      	bne.n	8013dfe <_strtod_l+0x8ae>
 8013d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d20:	0d1b      	lsrs	r3, r3, #20
 8013d22:	051b      	lsls	r3, r3, #20
 8013d24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013d28:	d969      	bls.n	8013dfe <_strtod_l+0x8ae>
 8013d2a:	6963      	ldr	r3, [r4, #20]
 8013d2c:	b913      	cbnz	r3, 8013d34 <_strtod_l+0x7e4>
 8013d2e:	6923      	ldr	r3, [r4, #16]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	dd64      	ble.n	8013dfe <_strtod_l+0x8ae>
 8013d34:	4621      	mov	r1, r4
 8013d36:	2201      	movs	r2, #1
 8013d38:	9805      	ldr	r0, [sp, #20]
 8013d3a:	f7ff f997 	bl	801306c <__lshift>
 8013d3e:	4629      	mov	r1, r5
 8013d40:	4604      	mov	r4, r0
 8013d42:	f7ff f9ff 	bl	8013144 <__mcmp>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	dd59      	ble.n	8013dfe <_strtod_l+0x8ae>
 8013d4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d4e:	9a06      	ldr	r2, [sp, #24]
 8013d50:	0d1b      	lsrs	r3, r3, #20
 8013d52:	051b      	lsls	r3, r3, #20
 8013d54:	2a00      	cmp	r2, #0
 8013d56:	d070      	beq.n	8013e3a <_strtod_l+0x8ea>
 8013d58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013d5c:	d86d      	bhi.n	8013e3a <_strtod_l+0x8ea>
 8013d5e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013d62:	f67f ae99 	bls.w	8013a98 <_strtod_l+0x548>
 8013d66:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013d98 <_strtod_l+0x848>
 8013d6a:	ec4b ab16 	vmov	d6, sl, fp
 8013d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8013da8 <_strtod_l+0x858>)
 8013d70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013d74:	ee17 2a90 	vmov	r2, s15
 8013d78:	4013      	ands	r3, r2
 8013d7a:	ec5b ab17 	vmov	sl, fp, d7
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f47f ae01 	bne.w	8013986 <_strtod_l+0x436>
 8013d84:	9a05      	ldr	r2, [sp, #20]
 8013d86:	2322      	movs	r3, #34	@ 0x22
 8013d88:	6013      	str	r3, [r2, #0]
 8013d8a:	e5fc      	b.n	8013986 <_strtod_l+0x436>
 8013d8c:	f3af 8000 	nop.w
 8013d90:	ffc00000 	.word	0xffc00000
 8013d94:	41dfffff 	.word	0x41dfffff
 8013d98:	00000000 	.word	0x00000000
 8013d9c:	39500000 	.word	0x39500000
 8013da0:	08017180 	.word	0x08017180
 8013da4:	fffffc02 	.word	0xfffffc02
 8013da8:	7ff00000 	.word	0x7ff00000
 8013dac:	46d9      	mov	r9, fp
 8013dae:	d15d      	bne.n	8013e6c <_strtod_l+0x91c>
 8013db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013db4:	f1b8 0f00 	cmp.w	r8, #0
 8013db8:	d02a      	beq.n	8013e10 <_strtod_l+0x8c0>
 8013dba:	4aab      	ldr	r2, [pc, #684]	@ (8014068 <_strtod_l+0xb18>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d12a      	bne.n	8013e16 <_strtod_l+0x8c6>
 8013dc0:	9b06      	ldr	r3, [sp, #24]
 8013dc2:	4652      	mov	r2, sl
 8013dc4:	b1fb      	cbz	r3, 8013e06 <_strtod_l+0x8b6>
 8013dc6:	4ba9      	ldr	r3, [pc, #676]	@ (801406c <_strtod_l+0xb1c>)
 8013dc8:	ea0b 0303 	and.w	r3, fp, r3
 8013dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8013dd4:	d81a      	bhi.n	8013e0c <_strtod_l+0x8bc>
 8013dd6:	0d1b      	lsrs	r3, r3, #20
 8013dd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d118      	bne.n	8013e16 <_strtod_l+0x8c6>
 8013de4:	4ba2      	ldr	r3, [pc, #648]	@ (8014070 <_strtod_l+0xb20>)
 8013de6:	4599      	cmp	r9, r3
 8013de8:	d102      	bne.n	8013df0 <_strtod_l+0x8a0>
 8013dea:	3201      	adds	r2, #1
 8013dec:	f43f adc0 	beq.w	8013970 <_strtod_l+0x420>
 8013df0:	4b9e      	ldr	r3, [pc, #632]	@ (801406c <_strtod_l+0xb1c>)
 8013df2:	ea09 0303 	and.w	r3, r9, r3
 8013df6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013dfa:	f04f 0a00 	mov.w	sl, #0
 8013dfe:	9b06      	ldr	r3, [sp, #24]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1b0      	bne.n	8013d66 <_strtod_l+0x816>
 8013e04:	e5bf      	b.n	8013986 <_strtod_l+0x436>
 8013e06:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0a:	e7e9      	b.n	8013de0 <_strtod_l+0x890>
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	e7e7      	b.n	8013de0 <_strtod_l+0x890>
 8013e10:	ea53 030a 	orrs.w	r3, r3, sl
 8013e14:	d099      	beq.n	8013d4a <_strtod_l+0x7fa>
 8013e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e18:	b1c3      	cbz	r3, 8013e4c <_strtod_l+0x8fc>
 8013e1a:	ea13 0f09 	tst.w	r3, r9
 8013e1e:	d0ee      	beq.n	8013dfe <_strtod_l+0x8ae>
 8013e20:	9a06      	ldr	r2, [sp, #24]
 8013e22:	4650      	mov	r0, sl
 8013e24:	4659      	mov	r1, fp
 8013e26:	f1b8 0f00 	cmp.w	r8, #0
 8013e2a:	d013      	beq.n	8013e54 <_strtod_l+0x904>
 8013e2c:	f7ff fb75 	bl	801351a <sulp>
 8013e30:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013e34:	ec5b ab17 	vmov	sl, fp, d7
 8013e38:	e7e1      	b.n	8013dfe <_strtod_l+0x8ae>
 8013e3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013e3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013e42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013e46:	f04f 3aff 	mov.w	sl, #4294967295
 8013e4a:	e7d8      	b.n	8013dfe <_strtod_l+0x8ae>
 8013e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e4e:	ea13 0f0a 	tst.w	r3, sl
 8013e52:	e7e4      	b.n	8013e1e <_strtod_l+0x8ce>
 8013e54:	f7ff fb61 	bl	801351a <sulp>
 8013e58:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013e5c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e64:	ec5b ab10 	vmov	sl, fp, d0
 8013e68:	d1c9      	bne.n	8013dfe <_strtod_l+0x8ae>
 8013e6a:	e615      	b.n	8013a98 <_strtod_l+0x548>
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f7ff fae0 	bl	8013434 <__ratio>
 8013e74:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013e78:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e80:	d85d      	bhi.n	8013f3e <_strtod_l+0x9ee>
 8013e82:	f1b8 0f00 	cmp.w	r8, #0
 8013e86:	d164      	bne.n	8013f52 <_strtod_l+0xa02>
 8013e88:	f1ba 0f00 	cmp.w	sl, #0
 8013e8c:	d14b      	bne.n	8013f26 <_strtod_l+0x9d6>
 8013e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e92:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d160      	bne.n	8013f5c <_strtod_l+0xa0c>
 8013e9a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013e9e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea6:	d401      	bmi.n	8013eac <_strtod_l+0x95c>
 8013ea8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013eac:	eeb1 ab48 	vneg.f64	d10, d8
 8013eb0:	486e      	ldr	r0, [pc, #440]	@ (801406c <_strtod_l+0xb1c>)
 8013eb2:	4970      	ldr	r1, [pc, #448]	@ (8014074 <_strtod_l+0xb24>)
 8013eb4:	ea09 0700 	and.w	r7, r9, r0
 8013eb8:	428f      	cmp	r7, r1
 8013eba:	ec53 2b1a 	vmov	r2, r3, d10
 8013ebe:	d17d      	bne.n	8013fbc <_strtod_l+0xa6c>
 8013ec0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013ec4:	ec4b ab1c 	vmov	d12, sl, fp
 8013ec8:	eeb0 0b4c 	vmov.f64	d0, d12
 8013ecc:	f7ff f9ea 	bl	80132a4 <__ulp>
 8013ed0:	4866      	ldr	r0, [pc, #408]	@ (801406c <_strtod_l+0xb1c>)
 8013ed2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013ed6:	ee1c 3a90 	vmov	r3, s25
 8013eda:	4a67      	ldr	r2, [pc, #412]	@ (8014078 <_strtod_l+0xb28>)
 8013edc:	ea03 0100 	and.w	r1, r3, r0
 8013ee0:	4291      	cmp	r1, r2
 8013ee2:	ec5b ab1c 	vmov	sl, fp, d12
 8013ee6:	d93c      	bls.n	8013f62 <_strtod_l+0xa12>
 8013ee8:	ee19 2a90 	vmov	r2, s19
 8013eec:	4b60      	ldr	r3, [pc, #384]	@ (8014070 <_strtod_l+0xb20>)
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d104      	bne.n	8013efc <_strtod_l+0x9ac>
 8013ef2:	ee19 3a10 	vmov	r3, s18
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	f43f ad3a 	beq.w	8013970 <_strtod_l+0x420>
 8013efc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8014070 <_strtod_l+0xb20>
 8013f00:	f04f 3aff 	mov.w	sl, #4294967295
 8013f04:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f06:	9805      	ldr	r0, [sp, #20]
 8013f08:	f7fe fe98 	bl	8012c3c <_Bfree>
 8013f0c:	9805      	ldr	r0, [sp, #20]
 8013f0e:	4631      	mov	r1, r6
 8013f10:	f7fe fe94 	bl	8012c3c <_Bfree>
 8013f14:	9805      	ldr	r0, [sp, #20]
 8013f16:	4629      	mov	r1, r5
 8013f18:	f7fe fe90 	bl	8012c3c <_Bfree>
 8013f1c:	9805      	ldr	r0, [sp, #20]
 8013f1e:	4621      	mov	r1, r4
 8013f20:	f7fe fe8c 	bl	8012c3c <_Bfree>
 8013f24:	e625      	b.n	8013b72 <_strtod_l+0x622>
 8013f26:	f1ba 0f01 	cmp.w	sl, #1
 8013f2a:	d103      	bne.n	8013f34 <_strtod_l+0x9e4>
 8013f2c:	f1bb 0f00 	cmp.w	fp, #0
 8013f30:	f43f adb2 	beq.w	8013a98 <_strtod_l+0x548>
 8013f34:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013f38:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013f3c:	e7b8      	b.n	8013eb0 <_strtod_l+0x960>
 8013f3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013f42:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013f46:	f1b8 0f00 	cmp.w	r8, #0
 8013f4a:	d0af      	beq.n	8013eac <_strtod_l+0x95c>
 8013f4c:	eeb0 ab48 	vmov.f64	d10, d8
 8013f50:	e7ae      	b.n	8013eb0 <_strtod_l+0x960>
 8013f52:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013f56:	eeb0 8b4a 	vmov.f64	d8, d10
 8013f5a:	e7a9      	b.n	8013eb0 <_strtod_l+0x960>
 8013f5c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013f60:	e7a6      	b.n	8013eb0 <_strtod_l+0x960>
 8013f62:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013f66:	9b06      	ldr	r3, [sp, #24]
 8013f68:	46d9      	mov	r9, fp
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d1ca      	bne.n	8013f04 <_strtod_l+0x9b4>
 8013f6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f72:	0d1b      	lsrs	r3, r3, #20
 8013f74:	051b      	lsls	r3, r3, #20
 8013f76:	429f      	cmp	r7, r3
 8013f78:	d1c4      	bne.n	8013f04 <_strtod_l+0x9b4>
 8013f7a:	ec51 0b18 	vmov	r0, r1, d8
 8013f7e:	f7ec fbdb 	bl	8000738 <__aeabi_d2lz>
 8013f82:	f7ec fb93 	bl	80006ac <__aeabi_l2d>
 8013f86:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8013f8a:	ec41 0b17 	vmov	d7, r0, r1
 8013f8e:	ea49 090a 	orr.w	r9, r9, sl
 8013f92:	ea59 0908 	orrs.w	r9, r9, r8
 8013f96:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013f9a:	d03c      	beq.n	8014016 <_strtod_l+0xac6>
 8013f9c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014050 <_strtod_l+0xb00>
 8013fa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa8:	f53f aced 	bmi.w	8013986 <_strtod_l+0x436>
 8013fac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014058 <_strtod_l+0xb08>
 8013fb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb8:	dda4      	ble.n	8013f04 <_strtod_l+0x9b4>
 8013fba:	e4e4      	b.n	8013986 <_strtod_l+0x436>
 8013fbc:	9906      	ldr	r1, [sp, #24]
 8013fbe:	b1e1      	cbz	r1, 8013ffa <_strtod_l+0xaaa>
 8013fc0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8013fc4:	d819      	bhi.n	8013ffa <_strtod_l+0xaaa>
 8013fc6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fce:	d811      	bhi.n	8013ff4 <_strtod_l+0xaa4>
 8013fd0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013fd4:	ee18 3a10 	vmov	r3, s16
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	bf38      	it	cc
 8013fdc:	2301      	movcc	r3, #1
 8013fde:	ee08 3a10 	vmov	s16, r3
 8013fe2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013fe6:	f1b8 0f00 	cmp.w	r8, #0
 8013fea:	d111      	bne.n	8014010 <_strtod_l+0xac0>
 8013fec:	eeb1 7b48 	vneg.f64	d7, d8
 8013ff0:	ec53 2b17 	vmov	r2, r3, d7
 8013ff4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013ff8:	1bcb      	subs	r3, r1, r7
 8013ffa:	eeb0 0b49 	vmov.f64	d0, d9
 8013ffe:	ec43 2b1a 	vmov	d10, r2, r3
 8014002:	f7ff f94f 	bl	80132a4 <__ulp>
 8014006:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801400a:	ec5b ab19 	vmov	sl, fp, d9
 801400e:	e7aa      	b.n	8013f66 <_strtod_l+0xa16>
 8014010:	eeb0 7b48 	vmov.f64	d7, d8
 8014014:	e7ec      	b.n	8013ff0 <_strtod_l+0xaa0>
 8014016:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8014060 <_strtod_l+0xb10>
 801401a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014022:	f57f af6f 	bpl.w	8013f04 <_strtod_l+0x9b4>
 8014026:	e4ae      	b.n	8013986 <_strtod_l+0x436>
 8014028:	2300      	movs	r3, #0
 801402a:	9308      	str	r3, [sp, #32]
 801402c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801402e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014030:	6013      	str	r3, [r2, #0]
 8014032:	f7ff bacc 	b.w	80135ce <_strtod_l+0x7e>
 8014036:	2a65      	cmp	r2, #101	@ 0x65
 8014038:	f43f abbc 	beq.w	80137b4 <_strtod_l+0x264>
 801403c:	2a45      	cmp	r2, #69	@ 0x45
 801403e:	f43f abb9 	beq.w	80137b4 <_strtod_l+0x264>
 8014042:	2301      	movs	r3, #1
 8014044:	9306      	str	r3, [sp, #24]
 8014046:	f7ff bbf0 	b.w	801382a <_strtod_l+0x2da>
 801404a:	bf00      	nop
 801404c:	f3af 8000 	nop.w
 8014050:	94a03595 	.word	0x94a03595
 8014054:	3fdfffff 	.word	0x3fdfffff
 8014058:	35afe535 	.word	0x35afe535
 801405c:	3fe00000 	.word	0x3fe00000
 8014060:	94a03595 	.word	0x94a03595
 8014064:	3fcfffff 	.word	0x3fcfffff
 8014068:	000fffff 	.word	0x000fffff
 801406c:	7ff00000 	.word	0x7ff00000
 8014070:	7fefffff 	.word	0x7fefffff
 8014074:	7fe00000 	.word	0x7fe00000
 8014078:	7c9fffff 	.word	0x7c9fffff

0801407c <_strtod_r>:
 801407c:	4b01      	ldr	r3, [pc, #4]	@ (8014084 <_strtod_r+0x8>)
 801407e:	f7ff ba67 	b.w	8013550 <_strtod_l>
 8014082:	bf00      	nop
 8014084:	2400007c 	.word	0x2400007c

08014088 <_strtol_l.constprop.0>:
 8014088:	2b24      	cmp	r3, #36	@ 0x24
 801408a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801408e:	4686      	mov	lr, r0
 8014090:	4690      	mov	r8, r2
 8014092:	d801      	bhi.n	8014098 <_strtol_l.constprop.0+0x10>
 8014094:	2b01      	cmp	r3, #1
 8014096:	d106      	bne.n	80140a6 <_strtol_l.constprop.0+0x1e>
 8014098:	f7fd fe70 	bl	8011d7c <__errno>
 801409c:	2316      	movs	r3, #22
 801409e:	6003      	str	r3, [r0, #0]
 80140a0:	2000      	movs	r0, #0
 80140a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a6:	4834      	ldr	r0, [pc, #208]	@ (8014178 <_strtol_l.constprop.0+0xf0>)
 80140a8:	460d      	mov	r5, r1
 80140aa:	462a      	mov	r2, r5
 80140ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140b0:	5d06      	ldrb	r6, [r0, r4]
 80140b2:	f016 0608 	ands.w	r6, r6, #8
 80140b6:	d1f8      	bne.n	80140aa <_strtol_l.constprop.0+0x22>
 80140b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80140ba:	d12d      	bne.n	8014118 <_strtol_l.constprop.0+0x90>
 80140bc:	782c      	ldrb	r4, [r5, #0]
 80140be:	2601      	movs	r6, #1
 80140c0:	1c95      	adds	r5, r2, #2
 80140c2:	f033 0210 	bics.w	r2, r3, #16
 80140c6:	d109      	bne.n	80140dc <_strtol_l.constprop.0+0x54>
 80140c8:	2c30      	cmp	r4, #48	@ 0x30
 80140ca:	d12a      	bne.n	8014122 <_strtol_l.constprop.0+0x9a>
 80140cc:	782a      	ldrb	r2, [r5, #0]
 80140ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80140d2:	2a58      	cmp	r2, #88	@ 0x58
 80140d4:	d125      	bne.n	8014122 <_strtol_l.constprop.0+0x9a>
 80140d6:	786c      	ldrb	r4, [r5, #1]
 80140d8:	2310      	movs	r3, #16
 80140da:	3502      	adds	r5, #2
 80140dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80140e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80140e4:	2200      	movs	r2, #0
 80140e6:	fbbc f9f3 	udiv	r9, ip, r3
 80140ea:	4610      	mov	r0, r2
 80140ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80140f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80140f4:	2f09      	cmp	r7, #9
 80140f6:	d81b      	bhi.n	8014130 <_strtol_l.constprop.0+0xa8>
 80140f8:	463c      	mov	r4, r7
 80140fa:	42a3      	cmp	r3, r4
 80140fc:	dd27      	ble.n	801414e <_strtol_l.constprop.0+0xc6>
 80140fe:	1c57      	adds	r7, r2, #1
 8014100:	d007      	beq.n	8014112 <_strtol_l.constprop.0+0x8a>
 8014102:	4581      	cmp	r9, r0
 8014104:	d320      	bcc.n	8014148 <_strtol_l.constprop.0+0xc0>
 8014106:	d101      	bne.n	801410c <_strtol_l.constprop.0+0x84>
 8014108:	45a2      	cmp	sl, r4
 801410a:	db1d      	blt.n	8014148 <_strtol_l.constprop.0+0xc0>
 801410c:	fb00 4003 	mla	r0, r0, r3, r4
 8014110:	2201      	movs	r2, #1
 8014112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014116:	e7eb      	b.n	80140f0 <_strtol_l.constprop.0+0x68>
 8014118:	2c2b      	cmp	r4, #43	@ 0x2b
 801411a:	bf04      	itt	eq
 801411c:	782c      	ldrbeq	r4, [r5, #0]
 801411e:	1c95      	addeq	r5, r2, #2
 8014120:	e7cf      	b.n	80140c2 <_strtol_l.constprop.0+0x3a>
 8014122:	2b00      	cmp	r3, #0
 8014124:	d1da      	bne.n	80140dc <_strtol_l.constprop.0+0x54>
 8014126:	2c30      	cmp	r4, #48	@ 0x30
 8014128:	bf0c      	ite	eq
 801412a:	2308      	moveq	r3, #8
 801412c:	230a      	movne	r3, #10
 801412e:	e7d5      	b.n	80140dc <_strtol_l.constprop.0+0x54>
 8014130:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014134:	2f19      	cmp	r7, #25
 8014136:	d801      	bhi.n	801413c <_strtol_l.constprop.0+0xb4>
 8014138:	3c37      	subs	r4, #55	@ 0x37
 801413a:	e7de      	b.n	80140fa <_strtol_l.constprop.0+0x72>
 801413c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014140:	2f19      	cmp	r7, #25
 8014142:	d804      	bhi.n	801414e <_strtol_l.constprop.0+0xc6>
 8014144:	3c57      	subs	r4, #87	@ 0x57
 8014146:	e7d8      	b.n	80140fa <_strtol_l.constprop.0+0x72>
 8014148:	f04f 32ff 	mov.w	r2, #4294967295
 801414c:	e7e1      	b.n	8014112 <_strtol_l.constprop.0+0x8a>
 801414e:	1c53      	adds	r3, r2, #1
 8014150:	d108      	bne.n	8014164 <_strtol_l.constprop.0+0xdc>
 8014152:	2322      	movs	r3, #34	@ 0x22
 8014154:	f8ce 3000 	str.w	r3, [lr]
 8014158:	4660      	mov	r0, ip
 801415a:	f1b8 0f00 	cmp.w	r8, #0
 801415e:	d0a0      	beq.n	80140a2 <_strtol_l.constprop.0+0x1a>
 8014160:	1e69      	subs	r1, r5, #1
 8014162:	e006      	b.n	8014172 <_strtol_l.constprop.0+0xea>
 8014164:	b106      	cbz	r6, 8014168 <_strtol_l.constprop.0+0xe0>
 8014166:	4240      	negs	r0, r0
 8014168:	f1b8 0f00 	cmp.w	r8, #0
 801416c:	d099      	beq.n	80140a2 <_strtol_l.constprop.0+0x1a>
 801416e:	2a00      	cmp	r2, #0
 8014170:	d1f6      	bne.n	8014160 <_strtol_l.constprop.0+0xd8>
 8014172:	f8c8 1000 	str.w	r1, [r8]
 8014176:	e794      	b.n	80140a2 <_strtol_l.constprop.0+0x1a>
 8014178:	080171a9 	.word	0x080171a9

0801417c <_strtol_r>:
 801417c:	f7ff bf84 	b.w	8014088 <_strtol_l.constprop.0>

08014180 <__ssputs_r>:
 8014180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014184:	688e      	ldr	r6, [r1, #8]
 8014186:	461f      	mov	r7, r3
 8014188:	42be      	cmp	r6, r7
 801418a:	680b      	ldr	r3, [r1, #0]
 801418c:	4682      	mov	sl, r0
 801418e:	460c      	mov	r4, r1
 8014190:	4690      	mov	r8, r2
 8014192:	d82d      	bhi.n	80141f0 <__ssputs_r+0x70>
 8014194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801419c:	d026      	beq.n	80141ec <__ssputs_r+0x6c>
 801419e:	6965      	ldr	r5, [r4, #20]
 80141a0:	6909      	ldr	r1, [r1, #16]
 80141a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141a6:	eba3 0901 	sub.w	r9, r3, r1
 80141aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141ae:	1c7b      	adds	r3, r7, #1
 80141b0:	444b      	add	r3, r9
 80141b2:	106d      	asrs	r5, r5, #1
 80141b4:	429d      	cmp	r5, r3
 80141b6:	bf38      	it	cc
 80141b8:	461d      	movcc	r5, r3
 80141ba:	0553      	lsls	r3, r2, #21
 80141bc:	d527      	bpl.n	801420e <__ssputs_r+0x8e>
 80141be:	4629      	mov	r1, r5
 80141c0:	f7fe fc70 	bl	8012aa4 <_malloc_r>
 80141c4:	4606      	mov	r6, r0
 80141c6:	b360      	cbz	r0, 8014222 <__ssputs_r+0xa2>
 80141c8:	6921      	ldr	r1, [r4, #16]
 80141ca:	464a      	mov	r2, r9
 80141cc:	f7fd fe03 	bl	8011dd6 <memcpy>
 80141d0:	89a3      	ldrh	r3, [r4, #12]
 80141d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80141d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141da:	81a3      	strh	r3, [r4, #12]
 80141dc:	6126      	str	r6, [r4, #16]
 80141de:	6165      	str	r5, [r4, #20]
 80141e0:	444e      	add	r6, r9
 80141e2:	eba5 0509 	sub.w	r5, r5, r9
 80141e6:	6026      	str	r6, [r4, #0]
 80141e8:	60a5      	str	r5, [r4, #8]
 80141ea:	463e      	mov	r6, r7
 80141ec:	42be      	cmp	r6, r7
 80141ee:	d900      	bls.n	80141f2 <__ssputs_r+0x72>
 80141f0:	463e      	mov	r6, r7
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	4632      	mov	r2, r6
 80141f6:	4641      	mov	r1, r8
 80141f8:	f000 fef7 	bl	8014fea <memmove>
 80141fc:	68a3      	ldr	r3, [r4, #8]
 80141fe:	1b9b      	subs	r3, r3, r6
 8014200:	60a3      	str	r3, [r4, #8]
 8014202:	6823      	ldr	r3, [r4, #0]
 8014204:	4433      	add	r3, r6
 8014206:	6023      	str	r3, [r4, #0]
 8014208:	2000      	movs	r0, #0
 801420a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420e:	462a      	mov	r2, r5
 8014210:	f001 facf 	bl	80157b2 <_realloc_r>
 8014214:	4606      	mov	r6, r0
 8014216:	2800      	cmp	r0, #0
 8014218:	d1e0      	bne.n	80141dc <__ssputs_r+0x5c>
 801421a:	6921      	ldr	r1, [r4, #16]
 801421c:	4650      	mov	r0, sl
 801421e:	f7fe fbcd 	bl	80129bc <_free_r>
 8014222:	230c      	movs	r3, #12
 8014224:	f8ca 3000 	str.w	r3, [sl]
 8014228:	89a3      	ldrh	r3, [r4, #12]
 801422a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801422e:	81a3      	strh	r3, [r4, #12]
 8014230:	f04f 30ff 	mov.w	r0, #4294967295
 8014234:	e7e9      	b.n	801420a <__ssputs_r+0x8a>
	...

08014238 <_svfiprintf_r>:
 8014238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801423c:	4698      	mov	r8, r3
 801423e:	898b      	ldrh	r3, [r1, #12]
 8014240:	061b      	lsls	r3, r3, #24
 8014242:	b09d      	sub	sp, #116	@ 0x74
 8014244:	4607      	mov	r7, r0
 8014246:	460d      	mov	r5, r1
 8014248:	4614      	mov	r4, r2
 801424a:	d510      	bpl.n	801426e <_svfiprintf_r+0x36>
 801424c:	690b      	ldr	r3, [r1, #16]
 801424e:	b973      	cbnz	r3, 801426e <_svfiprintf_r+0x36>
 8014250:	2140      	movs	r1, #64	@ 0x40
 8014252:	f7fe fc27 	bl	8012aa4 <_malloc_r>
 8014256:	6028      	str	r0, [r5, #0]
 8014258:	6128      	str	r0, [r5, #16]
 801425a:	b930      	cbnz	r0, 801426a <_svfiprintf_r+0x32>
 801425c:	230c      	movs	r3, #12
 801425e:	603b      	str	r3, [r7, #0]
 8014260:	f04f 30ff 	mov.w	r0, #4294967295
 8014264:	b01d      	add	sp, #116	@ 0x74
 8014266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426a:	2340      	movs	r3, #64	@ 0x40
 801426c:	616b      	str	r3, [r5, #20]
 801426e:	2300      	movs	r3, #0
 8014270:	9309      	str	r3, [sp, #36]	@ 0x24
 8014272:	2320      	movs	r3, #32
 8014274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014278:	f8cd 800c 	str.w	r8, [sp, #12]
 801427c:	2330      	movs	r3, #48	@ 0x30
 801427e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801441c <_svfiprintf_r+0x1e4>
 8014282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014286:	f04f 0901 	mov.w	r9, #1
 801428a:	4623      	mov	r3, r4
 801428c:	469a      	mov	sl, r3
 801428e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014292:	b10a      	cbz	r2, 8014298 <_svfiprintf_r+0x60>
 8014294:	2a25      	cmp	r2, #37	@ 0x25
 8014296:	d1f9      	bne.n	801428c <_svfiprintf_r+0x54>
 8014298:	ebba 0b04 	subs.w	fp, sl, r4
 801429c:	d00b      	beq.n	80142b6 <_svfiprintf_r+0x7e>
 801429e:	465b      	mov	r3, fp
 80142a0:	4622      	mov	r2, r4
 80142a2:	4629      	mov	r1, r5
 80142a4:	4638      	mov	r0, r7
 80142a6:	f7ff ff6b 	bl	8014180 <__ssputs_r>
 80142aa:	3001      	adds	r0, #1
 80142ac:	f000 80a7 	beq.w	80143fe <_svfiprintf_r+0x1c6>
 80142b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142b2:	445a      	add	r2, fp
 80142b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80142b6:	f89a 3000 	ldrb.w	r3, [sl]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 809f 	beq.w	80143fe <_svfiprintf_r+0x1c6>
 80142c0:	2300      	movs	r3, #0
 80142c2:	f04f 32ff 	mov.w	r2, #4294967295
 80142c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142ca:	f10a 0a01 	add.w	sl, sl, #1
 80142ce:	9304      	str	r3, [sp, #16]
 80142d0:	9307      	str	r3, [sp, #28]
 80142d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80142d8:	4654      	mov	r4, sl
 80142da:	2205      	movs	r2, #5
 80142dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142e0:	484e      	ldr	r0, [pc, #312]	@ (801441c <_svfiprintf_r+0x1e4>)
 80142e2:	f7eb fffd 	bl	80002e0 <memchr>
 80142e6:	9a04      	ldr	r2, [sp, #16]
 80142e8:	b9d8      	cbnz	r0, 8014322 <_svfiprintf_r+0xea>
 80142ea:	06d0      	lsls	r0, r2, #27
 80142ec:	bf44      	itt	mi
 80142ee:	2320      	movmi	r3, #32
 80142f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142f4:	0711      	lsls	r1, r2, #28
 80142f6:	bf44      	itt	mi
 80142f8:	232b      	movmi	r3, #43	@ 0x2b
 80142fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014302:	2b2a      	cmp	r3, #42	@ 0x2a
 8014304:	d015      	beq.n	8014332 <_svfiprintf_r+0xfa>
 8014306:	9a07      	ldr	r2, [sp, #28]
 8014308:	4654      	mov	r4, sl
 801430a:	2000      	movs	r0, #0
 801430c:	f04f 0c0a 	mov.w	ip, #10
 8014310:	4621      	mov	r1, r4
 8014312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014316:	3b30      	subs	r3, #48	@ 0x30
 8014318:	2b09      	cmp	r3, #9
 801431a:	d94b      	bls.n	80143b4 <_svfiprintf_r+0x17c>
 801431c:	b1b0      	cbz	r0, 801434c <_svfiprintf_r+0x114>
 801431e:	9207      	str	r2, [sp, #28]
 8014320:	e014      	b.n	801434c <_svfiprintf_r+0x114>
 8014322:	eba0 0308 	sub.w	r3, r0, r8
 8014326:	fa09 f303 	lsl.w	r3, r9, r3
 801432a:	4313      	orrs	r3, r2
 801432c:	9304      	str	r3, [sp, #16]
 801432e:	46a2      	mov	sl, r4
 8014330:	e7d2      	b.n	80142d8 <_svfiprintf_r+0xa0>
 8014332:	9b03      	ldr	r3, [sp, #12]
 8014334:	1d19      	adds	r1, r3, #4
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	9103      	str	r1, [sp, #12]
 801433a:	2b00      	cmp	r3, #0
 801433c:	bfbb      	ittet	lt
 801433e:	425b      	neglt	r3, r3
 8014340:	f042 0202 	orrlt.w	r2, r2, #2
 8014344:	9307      	strge	r3, [sp, #28]
 8014346:	9307      	strlt	r3, [sp, #28]
 8014348:	bfb8      	it	lt
 801434a:	9204      	strlt	r2, [sp, #16]
 801434c:	7823      	ldrb	r3, [r4, #0]
 801434e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014350:	d10a      	bne.n	8014368 <_svfiprintf_r+0x130>
 8014352:	7863      	ldrb	r3, [r4, #1]
 8014354:	2b2a      	cmp	r3, #42	@ 0x2a
 8014356:	d132      	bne.n	80143be <_svfiprintf_r+0x186>
 8014358:	9b03      	ldr	r3, [sp, #12]
 801435a:	1d1a      	adds	r2, r3, #4
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	9203      	str	r2, [sp, #12]
 8014360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014364:	3402      	adds	r4, #2
 8014366:	9305      	str	r3, [sp, #20]
 8014368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801442c <_svfiprintf_r+0x1f4>
 801436c:	7821      	ldrb	r1, [r4, #0]
 801436e:	2203      	movs	r2, #3
 8014370:	4650      	mov	r0, sl
 8014372:	f7eb ffb5 	bl	80002e0 <memchr>
 8014376:	b138      	cbz	r0, 8014388 <_svfiprintf_r+0x150>
 8014378:	9b04      	ldr	r3, [sp, #16]
 801437a:	eba0 000a 	sub.w	r0, r0, sl
 801437e:	2240      	movs	r2, #64	@ 0x40
 8014380:	4082      	lsls	r2, r0
 8014382:	4313      	orrs	r3, r2
 8014384:	3401      	adds	r4, #1
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801438c:	4824      	ldr	r0, [pc, #144]	@ (8014420 <_svfiprintf_r+0x1e8>)
 801438e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014392:	2206      	movs	r2, #6
 8014394:	f7eb ffa4 	bl	80002e0 <memchr>
 8014398:	2800      	cmp	r0, #0
 801439a:	d036      	beq.n	801440a <_svfiprintf_r+0x1d2>
 801439c:	4b21      	ldr	r3, [pc, #132]	@ (8014424 <_svfiprintf_r+0x1ec>)
 801439e:	bb1b      	cbnz	r3, 80143e8 <_svfiprintf_r+0x1b0>
 80143a0:	9b03      	ldr	r3, [sp, #12]
 80143a2:	3307      	adds	r3, #7
 80143a4:	f023 0307 	bic.w	r3, r3, #7
 80143a8:	3308      	adds	r3, #8
 80143aa:	9303      	str	r3, [sp, #12]
 80143ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ae:	4433      	add	r3, r6
 80143b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80143b2:	e76a      	b.n	801428a <_svfiprintf_r+0x52>
 80143b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80143b8:	460c      	mov	r4, r1
 80143ba:	2001      	movs	r0, #1
 80143bc:	e7a8      	b.n	8014310 <_svfiprintf_r+0xd8>
 80143be:	2300      	movs	r3, #0
 80143c0:	3401      	adds	r4, #1
 80143c2:	9305      	str	r3, [sp, #20]
 80143c4:	4619      	mov	r1, r3
 80143c6:	f04f 0c0a 	mov.w	ip, #10
 80143ca:	4620      	mov	r0, r4
 80143cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143d0:	3a30      	subs	r2, #48	@ 0x30
 80143d2:	2a09      	cmp	r2, #9
 80143d4:	d903      	bls.n	80143de <_svfiprintf_r+0x1a6>
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d0c6      	beq.n	8014368 <_svfiprintf_r+0x130>
 80143da:	9105      	str	r1, [sp, #20]
 80143dc:	e7c4      	b.n	8014368 <_svfiprintf_r+0x130>
 80143de:	fb0c 2101 	mla	r1, ip, r1, r2
 80143e2:	4604      	mov	r4, r0
 80143e4:	2301      	movs	r3, #1
 80143e6:	e7f0      	b.n	80143ca <_svfiprintf_r+0x192>
 80143e8:	ab03      	add	r3, sp, #12
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	462a      	mov	r2, r5
 80143ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014428 <_svfiprintf_r+0x1f0>)
 80143f0:	a904      	add	r1, sp, #16
 80143f2:	4638      	mov	r0, r7
 80143f4:	f7fc fb5c 	bl	8010ab0 <_printf_float>
 80143f8:	1c42      	adds	r2, r0, #1
 80143fa:	4606      	mov	r6, r0
 80143fc:	d1d6      	bne.n	80143ac <_svfiprintf_r+0x174>
 80143fe:	89ab      	ldrh	r3, [r5, #12]
 8014400:	065b      	lsls	r3, r3, #25
 8014402:	f53f af2d 	bmi.w	8014260 <_svfiprintf_r+0x28>
 8014406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014408:	e72c      	b.n	8014264 <_svfiprintf_r+0x2c>
 801440a:	ab03      	add	r3, sp, #12
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	462a      	mov	r2, r5
 8014410:	4b05      	ldr	r3, [pc, #20]	@ (8014428 <_svfiprintf_r+0x1f0>)
 8014412:	a904      	add	r1, sp, #16
 8014414:	4638      	mov	r0, r7
 8014416:	f7fc fdd3 	bl	8010fc0 <_printf_i>
 801441a:	e7ed      	b.n	80143f8 <_svfiprintf_r+0x1c0>
 801441c:	080172a9 	.word	0x080172a9
 8014420:	080172b3 	.word	0x080172b3
 8014424:	08010ab1 	.word	0x08010ab1
 8014428:	08014181 	.word	0x08014181
 801442c:	080172af 	.word	0x080172af

08014430 <_sungetc_r>:
 8014430:	b538      	push	{r3, r4, r5, lr}
 8014432:	1c4b      	adds	r3, r1, #1
 8014434:	4614      	mov	r4, r2
 8014436:	d103      	bne.n	8014440 <_sungetc_r+0x10>
 8014438:	f04f 35ff 	mov.w	r5, #4294967295
 801443c:	4628      	mov	r0, r5
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	8993      	ldrh	r3, [r2, #12]
 8014442:	f023 0320 	bic.w	r3, r3, #32
 8014446:	8193      	strh	r3, [r2, #12]
 8014448:	6853      	ldr	r3, [r2, #4]
 801444a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801444c:	b2cd      	uxtb	r5, r1
 801444e:	b18a      	cbz	r2, 8014474 <_sungetc_r+0x44>
 8014450:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8014452:	429a      	cmp	r2, r3
 8014454:	dd08      	ble.n	8014468 <_sungetc_r+0x38>
 8014456:	6823      	ldr	r3, [r4, #0]
 8014458:	1e5a      	subs	r2, r3, #1
 801445a:	6022      	str	r2, [r4, #0]
 801445c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014460:	6863      	ldr	r3, [r4, #4]
 8014462:	3301      	adds	r3, #1
 8014464:	6063      	str	r3, [r4, #4]
 8014466:	e7e9      	b.n	801443c <_sungetc_r+0xc>
 8014468:	4621      	mov	r1, r4
 801446a:	f000 fd84 	bl	8014f76 <__submore>
 801446e:	2800      	cmp	r0, #0
 8014470:	d0f1      	beq.n	8014456 <_sungetc_r+0x26>
 8014472:	e7e1      	b.n	8014438 <_sungetc_r+0x8>
 8014474:	6921      	ldr	r1, [r4, #16]
 8014476:	6822      	ldr	r2, [r4, #0]
 8014478:	b141      	cbz	r1, 801448c <_sungetc_r+0x5c>
 801447a:	4291      	cmp	r1, r2
 801447c:	d206      	bcs.n	801448c <_sungetc_r+0x5c>
 801447e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8014482:	42a9      	cmp	r1, r5
 8014484:	d102      	bne.n	801448c <_sungetc_r+0x5c>
 8014486:	3a01      	subs	r2, #1
 8014488:	6022      	str	r2, [r4, #0]
 801448a:	e7ea      	b.n	8014462 <_sungetc_r+0x32>
 801448c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8014490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014494:	6363      	str	r3, [r4, #52]	@ 0x34
 8014496:	2303      	movs	r3, #3
 8014498:	63a3      	str	r3, [r4, #56]	@ 0x38
 801449a:	4623      	mov	r3, r4
 801449c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80144a0:	6023      	str	r3, [r4, #0]
 80144a2:	2301      	movs	r3, #1
 80144a4:	e7de      	b.n	8014464 <_sungetc_r+0x34>

080144a6 <__ssrefill_r>:
 80144a6:	b510      	push	{r4, lr}
 80144a8:	460c      	mov	r4, r1
 80144aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80144ac:	b169      	cbz	r1, 80144ca <__ssrefill_r+0x24>
 80144ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144b2:	4299      	cmp	r1, r3
 80144b4:	d001      	beq.n	80144ba <__ssrefill_r+0x14>
 80144b6:	f7fe fa81 	bl	80129bc <_free_r>
 80144ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144bc:	6063      	str	r3, [r4, #4]
 80144be:	2000      	movs	r0, #0
 80144c0:	6360      	str	r0, [r4, #52]	@ 0x34
 80144c2:	b113      	cbz	r3, 80144ca <__ssrefill_r+0x24>
 80144c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80144c6:	6023      	str	r3, [r4, #0]
 80144c8:	bd10      	pop	{r4, pc}
 80144ca:	6923      	ldr	r3, [r4, #16]
 80144cc:	6023      	str	r3, [r4, #0]
 80144ce:	2300      	movs	r3, #0
 80144d0:	6063      	str	r3, [r4, #4]
 80144d2:	89a3      	ldrh	r3, [r4, #12]
 80144d4:	f043 0320 	orr.w	r3, r3, #32
 80144d8:	81a3      	strh	r3, [r4, #12]
 80144da:	f04f 30ff 	mov.w	r0, #4294967295
 80144de:	e7f3      	b.n	80144c8 <__ssrefill_r+0x22>

080144e0 <__ssvfiscanf_r>:
 80144e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e4:	460c      	mov	r4, r1
 80144e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80144ea:	2100      	movs	r1, #0
 80144ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80144f0:	49a5      	ldr	r1, [pc, #660]	@ (8014788 <__ssvfiscanf_r+0x2a8>)
 80144f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80144f4:	f10d 0804 	add.w	r8, sp, #4
 80144f8:	49a4      	ldr	r1, [pc, #656]	@ (801478c <__ssvfiscanf_r+0x2ac>)
 80144fa:	4fa5      	ldr	r7, [pc, #660]	@ (8014790 <__ssvfiscanf_r+0x2b0>)
 80144fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8014500:	4606      	mov	r6, r0
 8014502:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014504:	9300      	str	r3, [sp, #0]
 8014506:	7813      	ldrb	r3, [r2, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	f000 8158 	beq.w	80147be <__ssvfiscanf_r+0x2de>
 801450e:	5cf9      	ldrb	r1, [r7, r3]
 8014510:	f011 0108 	ands.w	r1, r1, #8
 8014514:	f102 0501 	add.w	r5, r2, #1
 8014518:	d019      	beq.n	801454e <__ssvfiscanf_r+0x6e>
 801451a:	6863      	ldr	r3, [r4, #4]
 801451c:	2b00      	cmp	r3, #0
 801451e:	dd0f      	ble.n	8014540 <__ssvfiscanf_r+0x60>
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	781a      	ldrb	r2, [r3, #0]
 8014524:	5cba      	ldrb	r2, [r7, r2]
 8014526:	0712      	lsls	r2, r2, #28
 8014528:	d401      	bmi.n	801452e <__ssvfiscanf_r+0x4e>
 801452a:	462a      	mov	r2, r5
 801452c:	e7eb      	b.n	8014506 <__ssvfiscanf_r+0x26>
 801452e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014530:	3201      	adds	r2, #1
 8014532:	9245      	str	r2, [sp, #276]	@ 0x114
 8014534:	6862      	ldr	r2, [r4, #4]
 8014536:	3301      	adds	r3, #1
 8014538:	3a01      	subs	r2, #1
 801453a:	6062      	str	r2, [r4, #4]
 801453c:	6023      	str	r3, [r4, #0]
 801453e:	e7ec      	b.n	801451a <__ssvfiscanf_r+0x3a>
 8014540:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014542:	4621      	mov	r1, r4
 8014544:	4630      	mov	r0, r6
 8014546:	4798      	blx	r3
 8014548:	2800      	cmp	r0, #0
 801454a:	d0e9      	beq.n	8014520 <__ssvfiscanf_r+0x40>
 801454c:	e7ed      	b.n	801452a <__ssvfiscanf_r+0x4a>
 801454e:	2b25      	cmp	r3, #37	@ 0x25
 8014550:	d012      	beq.n	8014578 <__ssvfiscanf_r+0x98>
 8014552:	4699      	mov	r9, r3
 8014554:	6863      	ldr	r3, [r4, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	f340 8093 	ble.w	8014682 <__ssvfiscanf_r+0x1a2>
 801455c:	6822      	ldr	r2, [r4, #0]
 801455e:	7813      	ldrb	r3, [r2, #0]
 8014560:	454b      	cmp	r3, r9
 8014562:	f040 812c 	bne.w	80147be <__ssvfiscanf_r+0x2de>
 8014566:	6863      	ldr	r3, [r4, #4]
 8014568:	3b01      	subs	r3, #1
 801456a:	6063      	str	r3, [r4, #4]
 801456c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801456e:	3201      	adds	r2, #1
 8014570:	3301      	adds	r3, #1
 8014572:	6022      	str	r2, [r4, #0]
 8014574:	9345      	str	r3, [sp, #276]	@ 0x114
 8014576:	e7d8      	b.n	801452a <__ssvfiscanf_r+0x4a>
 8014578:	9141      	str	r1, [sp, #260]	@ 0x104
 801457a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801457c:	7853      	ldrb	r3, [r2, #1]
 801457e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014580:	bf02      	ittt	eq
 8014582:	2310      	moveq	r3, #16
 8014584:	1c95      	addeq	r5, r2, #2
 8014586:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014588:	220a      	movs	r2, #10
 801458a:	46a9      	mov	r9, r5
 801458c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014590:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014594:	2b09      	cmp	r3, #9
 8014596:	d91e      	bls.n	80145d6 <__ssvfiscanf_r+0xf6>
 8014598:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014794 <__ssvfiscanf_r+0x2b4>
 801459c:	2203      	movs	r2, #3
 801459e:	4650      	mov	r0, sl
 80145a0:	f7eb fe9e 	bl	80002e0 <memchr>
 80145a4:	b138      	cbz	r0, 80145b6 <__ssvfiscanf_r+0xd6>
 80145a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80145a8:	eba0 000a 	sub.w	r0, r0, sl
 80145ac:	2301      	movs	r3, #1
 80145ae:	4083      	lsls	r3, r0
 80145b0:	4313      	orrs	r3, r2
 80145b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80145b4:	464d      	mov	r5, r9
 80145b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80145ba:	2b78      	cmp	r3, #120	@ 0x78
 80145bc:	d806      	bhi.n	80145cc <__ssvfiscanf_r+0xec>
 80145be:	2b57      	cmp	r3, #87	@ 0x57
 80145c0:	d810      	bhi.n	80145e4 <__ssvfiscanf_r+0x104>
 80145c2:	2b25      	cmp	r3, #37	@ 0x25
 80145c4:	d0c5      	beq.n	8014552 <__ssvfiscanf_r+0x72>
 80145c6:	d857      	bhi.n	8014678 <__ssvfiscanf_r+0x198>
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d065      	beq.n	8014698 <__ssvfiscanf_r+0x1b8>
 80145cc:	2303      	movs	r3, #3
 80145ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80145d0:	230a      	movs	r3, #10
 80145d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80145d4:	e078      	b.n	80146c8 <__ssvfiscanf_r+0x1e8>
 80145d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80145d8:	fb02 1103 	mla	r1, r2, r3, r1
 80145dc:	3930      	subs	r1, #48	@ 0x30
 80145de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80145e0:	464d      	mov	r5, r9
 80145e2:	e7d2      	b.n	801458a <__ssvfiscanf_r+0xaa>
 80145e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80145e8:	2a20      	cmp	r2, #32
 80145ea:	d8ef      	bhi.n	80145cc <__ssvfiscanf_r+0xec>
 80145ec:	a101      	add	r1, pc, #4	@ (adr r1, 80145f4 <__ssvfiscanf_r+0x114>)
 80145ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80145f2:	bf00      	nop
 80145f4:	080146a7 	.word	0x080146a7
 80145f8:	080145cd 	.word	0x080145cd
 80145fc:	080145cd 	.word	0x080145cd
 8014600:	08014701 	.word	0x08014701
 8014604:	080145cd 	.word	0x080145cd
 8014608:	080145cd 	.word	0x080145cd
 801460c:	080145cd 	.word	0x080145cd
 8014610:	080145cd 	.word	0x080145cd
 8014614:	080145cd 	.word	0x080145cd
 8014618:	080145cd 	.word	0x080145cd
 801461c:	080145cd 	.word	0x080145cd
 8014620:	08014717 	.word	0x08014717
 8014624:	080146fd 	.word	0x080146fd
 8014628:	0801467f 	.word	0x0801467f
 801462c:	0801467f 	.word	0x0801467f
 8014630:	0801467f 	.word	0x0801467f
 8014634:	080145cd 	.word	0x080145cd
 8014638:	080146b9 	.word	0x080146b9
 801463c:	080145cd 	.word	0x080145cd
 8014640:	080145cd 	.word	0x080145cd
 8014644:	080145cd 	.word	0x080145cd
 8014648:	080145cd 	.word	0x080145cd
 801464c:	08014727 	.word	0x08014727
 8014650:	080146c1 	.word	0x080146c1
 8014654:	0801469f 	.word	0x0801469f
 8014658:	080145cd 	.word	0x080145cd
 801465c:	080145cd 	.word	0x080145cd
 8014660:	08014723 	.word	0x08014723
 8014664:	080145cd 	.word	0x080145cd
 8014668:	080146fd 	.word	0x080146fd
 801466c:	080145cd 	.word	0x080145cd
 8014670:	080145cd 	.word	0x080145cd
 8014674:	080146a7 	.word	0x080146a7
 8014678:	3b45      	subs	r3, #69	@ 0x45
 801467a:	2b02      	cmp	r3, #2
 801467c:	d8a6      	bhi.n	80145cc <__ssvfiscanf_r+0xec>
 801467e:	2305      	movs	r3, #5
 8014680:	e021      	b.n	80146c6 <__ssvfiscanf_r+0x1e6>
 8014682:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014684:	4621      	mov	r1, r4
 8014686:	4630      	mov	r0, r6
 8014688:	4798      	blx	r3
 801468a:	2800      	cmp	r0, #0
 801468c:	f43f af66 	beq.w	801455c <__ssvfiscanf_r+0x7c>
 8014690:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014692:	2800      	cmp	r0, #0
 8014694:	f040 808b 	bne.w	80147ae <__ssvfiscanf_r+0x2ce>
 8014698:	f04f 30ff 	mov.w	r0, #4294967295
 801469c:	e08b      	b.n	80147b6 <__ssvfiscanf_r+0x2d6>
 801469e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80146a0:	f042 0220 	orr.w	r2, r2, #32
 80146a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80146a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80146a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80146ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80146ae:	2210      	movs	r2, #16
 80146b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80146b2:	9242      	str	r2, [sp, #264]	@ 0x108
 80146b4:	d902      	bls.n	80146bc <__ssvfiscanf_r+0x1dc>
 80146b6:	e005      	b.n	80146c4 <__ssvfiscanf_r+0x1e4>
 80146b8:	2300      	movs	r3, #0
 80146ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80146bc:	2303      	movs	r3, #3
 80146be:	e002      	b.n	80146c6 <__ssvfiscanf_r+0x1e6>
 80146c0:	2308      	movs	r3, #8
 80146c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80146c4:	2304      	movs	r3, #4
 80146c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80146c8:	6863      	ldr	r3, [r4, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	dd39      	ble.n	8014742 <__ssvfiscanf_r+0x262>
 80146ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80146d0:	0659      	lsls	r1, r3, #25
 80146d2:	d404      	bmi.n	80146de <__ssvfiscanf_r+0x1fe>
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	781a      	ldrb	r2, [r3, #0]
 80146d8:	5cba      	ldrb	r2, [r7, r2]
 80146da:	0712      	lsls	r2, r2, #28
 80146dc:	d438      	bmi.n	8014750 <__ssvfiscanf_r+0x270>
 80146de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80146e0:	2b02      	cmp	r3, #2
 80146e2:	dc47      	bgt.n	8014774 <__ssvfiscanf_r+0x294>
 80146e4:	466b      	mov	r3, sp
 80146e6:	4622      	mov	r2, r4
 80146e8:	a941      	add	r1, sp, #260	@ 0x104
 80146ea:	4630      	mov	r0, r6
 80146ec:	f000 f9ae 	bl	8014a4c <_scanf_chars>
 80146f0:	2801      	cmp	r0, #1
 80146f2:	d064      	beq.n	80147be <__ssvfiscanf_r+0x2de>
 80146f4:	2802      	cmp	r0, #2
 80146f6:	f47f af18 	bne.w	801452a <__ssvfiscanf_r+0x4a>
 80146fa:	e7c9      	b.n	8014690 <__ssvfiscanf_r+0x1b0>
 80146fc:	220a      	movs	r2, #10
 80146fe:	e7d7      	b.n	80146b0 <__ssvfiscanf_r+0x1d0>
 8014700:	4629      	mov	r1, r5
 8014702:	4640      	mov	r0, r8
 8014704:	f000 fbfe 	bl	8014f04 <__sccl>
 8014708:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801470a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801470e:	9341      	str	r3, [sp, #260]	@ 0x104
 8014710:	4605      	mov	r5, r0
 8014712:	2301      	movs	r3, #1
 8014714:	e7d7      	b.n	80146c6 <__ssvfiscanf_r+0x1e6>
 8014716:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801471c:	9341      	str	r3, [sp, #260]	@ 0x104
 801471e:	2300      	movs	r3, #0
 8014720:	e7d1      	b.n	80146c6 <__ssvfiscanf_r+0x1e6>
 8014722:	2302      	movs	r3, #2
 8014724:	e7cf      	b.n	80146c6 <__ssvfiscanf_r+0x1e6>
 8014726:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014728:	06c3      	lsls	r3, r0, #27
 801472a:	f53f aefe 	bmi.w	801452a <__ssvfiscanf_r+0x4a>
 801472e:	9b00      	ldr	r3, [sp, #0]
 8014730:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014732:	1d19      	adds	r1, r3, #4
 8014734:	9100      	str	r1, [sp, #0]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	07c0      	lsls	r0, r0, #31
 801473a:	bf4c      	ite	mi
 801473c:	801a      	strhmi	r2, [r3, #0]
 801473e:	601a      	strpl	r2, [r3, #0]
 8014740:	e6f3      	b.n	801452a <__ssvfiscanf_r+0x4a>
 8014742:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014744:	4621      	mov	r1, r4
 8014746:	4630      	mov	r0, r6
 8014748:	4798      	blx	r3
 801474a:	2800      	cmp	r0, #0
 801474c:	d0bf      	beq.n	80146ce <__ssvfiscanf_r+0x1ee>
 801474e:	e79f      	b.n	8014690 <__ssvfiscanf_r+0x1b0>
 8014750:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014752:	3201      	adds	r2, #1
 8014754:	9245      	str	r2, [sp, #276]	@ 0x114
 8014756:	6862      	ldr	r2, [r4, #4]
 8014758:	3a01      	subs	r2, #1
 801475a:	2a00      	cmp	r2, #0
 801475c:	6062      	str	r2, [r4, #4]
 801475e:	dd02      	ble.n	8014766 <__ssvfiscanf_r+0x286>
 8014760:	3301      	adds	r3, #1
 8014762:	6023      	str	r3, [r4, #0]
 8014764:	e7b6      	b.n	80146d4 <__ssvfiscanf_r+0x1f4>
 8014766:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014768:	4621      	mov	r1, r4
 801476a:	4630      	mov	r0, r6
 801476c:	4798      	blx	r3
 801476e:	2800      	cmp	r0, #0
 8014770:	d0b0      	beq.n	80146d4 <__ssvfiscanf_r+0x1f4>
 8014772:	e78d      	b.n	8014690 <__ssvfiscanf_r+0x1b0>
 8014774:	2b04      	cmp	r3, #4
 8014776:	dc0f      	bgt.n	8014798 <__ssvfiscanf_r+0x2b8>
 8014778:	466b      	mov	r3, sp
 801477a:	4622      	mov	r2, r4
 801477c:	a941      	add	r1, sp, #260	@ 0x104
 801477e:	4630      	mov	r0, r6
 8014780:	f000 f9be 	bl	8014b00 <_scanf_i>
 8014784:	e7b4      	b.n	80146f0 <__ssvfiscanf_r+0x210>
 8014786:	bf00      	nop
 8014788:	08014431 	.word	0x08014431
 801478c:	080144a7 	.word	0x080144a7
 8014790:	080171a9 	.word	0x080171a9
 8014794:	080172af 	.word	0x080172af
 8014798:	4b0a      	ldr	r3, [pc, #40]	@ (80147c4 <__ssvfiscanf_r+0x2e4>)
 801479a:	2b00      	cmp	r3, #0
 801479c:	f43f aec5 	beq.w	801452a <__ssvfiscanf_r+0x4a>
 80147a0:	466b      	mov	r3, sp
 80147a2:	4622      	mov	r2, r4
 80147a4:	a941      	add	r1, sp, #260	@ 0x104
 80147a6:	4630      	mov	r0, r6
 80147a8:	f7fc fd2a 	bl	8011200 <_scanf_float>
 80147ac:	e7a0      	b.n	80146f0 <__ssvfiscanf_r+0x210>
 80147ae:	89a3      	ldrh	r3, [r4, #12]
 80147b0:	065b      	lsls	r3, r3, #25
 80147b2:	f53f af71 	bmi.w	8014698 <__ssvfiscanf_r+0x1b8>
 80147b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80147ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147be:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80147c0:	e7f9      	b.n	80147b6 <__ssvfiscanf_r+0x2d6>
 80147c2:	bf00      	nop
 80147c4:	08011201 	.word	0x08011201

080147c8 <__sfputc_r>:
 80147c8:	6893      	ldr	r3, [r2, #8]
 80147ca:	3b01      	subs	r3, #1
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	b410      	push	{r4}
 80147d0:	6093      	str	r3, [r2, #8]
 80147d2:	da08      	bge.n	80147e6 <__sfputc_r+0x1e>
 80147d4:	6994      	ldr	r4, [r2, #24]
 80147d6:	42a3      	cmp	r3, r4
 80147d8:	db01      	blt.n	80147de <__sfputc_r+0x16>
 80147da:	290a      	cmp	r1, #10
 80147dc:	d103      	bne.n	80147e6 <__sfputc_r+0x1e>
 80147de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147e2:	f7fd b98e 	b.w	8011b02 <__swbuf_r>
 80147e6:	6813      	ldr	r3, [r2, #0]
 80147e8:	1c58      	adds	r0, r3, #1
 80147ea:	6010      	str	r0, [r2, #0]
 80147ec:	7019      	strb	r1, [r3, #0]
 80147ee:	4608      	mov	r0, r1
 80147f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <__sfputs_r>:
 80147f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f8:	4606      	mov	r6, r0
 80147fa:	460f      	mov	r7, r1
 80147fc:	4614      	mov	r4, r2
 80147fe:	18d5      	adds	r5, r2, r3
 8014800:	42ac      	cmp	r4, r5
 8014802:	d101      	bne.n	8014808 <__sfputs_r+0x12>
 8014804:	2000      	movs	r0, #0
 8014806:	e007      	b.n	8014818 <__sfputs_r+0x22>
 8014808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801480c:	463a      	mov	r2, r7
 801480e:	4630      	mov	r0, r6
 8014810:	f7ff ffda 	bl	80147c8 <__sfputc_r>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d1f3      	bne.n	8014800 <__sfputs_r+0xa>
 8014818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801481c <_vfiprintf_r>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	460d      	mov	r5, r1
 8014822:	b09d      	sub	sp, #116	@ 0x74
 8014824:	4614      	mov	r4, r2
 8014826:	4698      	mov	r8, r3
 8014828:	4606      	mov	r6, r0
 801482a:	b118      	cbz	r0, 8014834 <_vfiprintf_r+0x18>
 801482c:	6a03      	ldr	r3, [r0, #32]
 801482e:	b90b      	cbnz	r3, 8014834 <_vfiprintf_r+0x18>
 8014830:	f7fc ff7e 	bl	8011730 <__sinit>
 8014834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014836:	07d9      	lsls	r1, r3, #31
 8014838:	d405      	bmi.n	8014846 <_vfiprintf_r+0x2a>
 801483a:	89ab      	ldrh	r3, [r5, #12]
 801483c:	059a      	lsls	r2, r3, #22
 801483e:	d402      	bmi.n	8014846 <_vfiprintf_r+0x2a>
 8014840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014842:	f7fd fac6 	bl	8011dd2 <__retarget_lock_acquire_recursive>
 8014846:	89ab      	ldrh	r3, [r5, #12]
 8014848:	071b      	lsls	r3, r3, #28
 801484a:	d501      	bpl.n	8014850 <_vfiprintf_r+0x34>
 801484c:	692b      	ldr	r3, [r5, #16]
 801484e:	b99b      	cbnz	r3, 8014878 <_vfiprintf_r+0x5c>
 8014850:	4629      	mov	r1, r5
 8014852:	4630      	mov	r0, r6
 8014854:	f7fd f994 	bl	8011b80 <__swsetup_r>
 8014858:	b170      	cbz	r0, 8014878 <_vfiprintf_r+0x5c>
 801485a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801485c:	07dc      	lsls	r4, r3, #31
 801485e:	d504      	bpl.n	801486a <_vfiprintf_r+0x4e>
 8014860:	f04f 30ff 	mov.w	r0, #4294967295
 8014864:	b01d      	add	sp, #116	@ 0x74
 8014866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486a:	89ab      	ldrh	r3, [r5, #12]
 801486c:	0598      	lsls	r0, r3, #22
 801486e:	d4f7      	bmi.n	8014860 <_vfiprintf_r+0x44>
 8014870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014872:	f7fd faaf 	bl	8011dd4 <__retarget_lock_release_recursive>
 8014876:	e7f3      	b.n	8014860 <_vfiprintf_r+0x44>
 8014878:	2300      	movs	r3, #0
 801487a:	9309      	str	r3, [sp, #36]	@ 0x24
 801487c:	2320      	movs	r3, #32
 801487e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014882:	f8cd 800c 	str.w	r8, [sp, #12]
 8014886:	2330      	movs	r3, #48	@ 0x30
 8014888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014a38 <_vfiprintf_r+0x21c>
 801488c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014890:	f04f 0901 	mov.w	r9, #1
 8014894:	4623      	mov	r3, r4
 8014896:	469a      	mov	sl, r3
 8014898:	f813 2b01 	ldrb.w	r2, [r3], #1
 801489c:	b10a      	cbz	r2, 80148a2 <_vfiprintf_r+0x86>
 801489e:	2a25      	cmp	r2, #37	@ 0x25
 80148a0:	d1f9      	bne.n	8014896 <_vfiprintf_r+0x7a>
 80148a2:	ebba 0b04 	subs.w	fp, sl, r4
 80148a6:	d00b      	beq.n	80148c0 <_vfiprintf_r+0xa4>
 80148a8:	465b      	mov	r3, fp
 80148aa:	4622      	mov	r2, r4
 80148ac:	4629      	mov	r1, r5
 80148ae:	4630      	mov	r0, r6
 80148b0:	f7ff ffa1 	bl	80147f6 <__sfputs_r>
 80148b4:	3001      	adds	r0, #1
 80148b6:	f000 80a7 	beq.w	8014a08 <_vfiprintf_r+0x1ec>
 80148ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148bc:	445a      	add	r2, fp
 80148be:	9209      	str	r2, [sp, #36]	@ 0x24
 80148c0:	f89a 3000 	ldrb.w	r3, [sl]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f000 809f 	beq.w	8014a08 <_vfiprintf_r+0x1ec>
 80148ca:	2300      	movs	r3, #0
 80148cc:	f04f 32ff 	mov.w	r2, #4294967295
 80148d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148d4:	f10a 0a01 	add.w	sl, sl, #1
 80148d8:	9304      	str	r3, [sp, #16]
 80148da:	9307      	str	r3, [sp, #28]
 80148dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80148e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80148e2:	4654      	mov	r4, sl
 80148e4:	2205      	movs	r2, #5
 80148e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ea:	4853      	ldr	r0, [pc, #332]	@ (8014a38 <_vfiprintf_r+0x21c>)
 80148ec:	f7eb fcf8 	bl	80002e0 <memchr>
 80148f0:	9a04      	ldr	r2, [sp, #16]
 80148f2:	b9d8      	cbnz	r0, 801492c <_vfiprintf_r+0x110>
 80148f4:	06d1      	lsls	r1, r2, #27
 80148f6:	bf44      	itt	mi
 80148f8:	2320      	movmi	r3, #32
 80148fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148fe:	0713      	lsls	r3, r2, #28
 8014900:	bf44      	itt	mi
 8014902:	232b      	movmi	r3, #43	@ 0x2b
 8014904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014908:	f89a 3000 	ldrb.w	r3, [sl]
 801490c:	2b2a      	cmp	r3, #42	@ 0x2a
 801490e:	d015      	beq.n	801493c <_vfiprintf_r+0x120>
 8014910:	9a07      	ldr	r2, [sp, #28]
 8014912:	4654      	mov	r4, sl
 8014914:	2000      	movs	r0, #0
 8014916:	f04f 0c0a 	mov.w	ip, #10
 801491a:	4621      	mov	r1, r4
 801491c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014920:	3b30      	subs	r3, #48	@ 0x30
 8014922:	2b09      	cmp	r3, #9
 8014924:	d94b      	bls.n	80149be <_vfiprintf_r+0x1a2>
 8014926:	b1b0      	cbz	r0, 8014956 <_vfiprintf_r+0x13a>
 8014928:	9207      	str	r2, [sp, #28]
 801492a:	e014      	b.n	8014956 <_vfiprintf_r+0x13a>
 801492c:	eba0 0308 	sub.w	r3, r0, r8
 8014930:	fa09 f303 	lsl.w	r3, r9, r3
 8014934:	4313      	orrs	r3, r2
 8014936:	9304      	str	r3, [sp, #16]
 8014938:	46a2      	mov	sl, r4
 801493a:	e7d2      	b.n	80148e2 <_vfiprintf_r+0xc6>
 801493c:	9b03      	ldr	r3, [sp, #12]
 801493e:	1d19      	adds	r1, r3, #4
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	9103      	str	r1, [sp, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	bfbb      	ittet	lt
 8014948:	425b      	neglt	r3, r3
 801494a:	f042 0202 	orrlt.w	r2, r2, #2
 801494e:	9307      	strge	r3, [sp, #28]
 8014950:	9307      	strlt	r3, [sp, #28]
 8014952:	bfb8      	it	lt
 8014954:	9204      	strlt	r2, [sp, #16]
 8014956:	7823      	ldrb	r3, [r4, #0]
 8014958:	2b2e      	cmp	r3, #46	@ 0x2e
 801495a:	d10a      	bne.n	8014972 <_vfiprintf_r+0x156>
 801495c:	7863      	ldrb	r3, [r4, #1]
 801495e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014960:	d132      	bne.n	80149c8 <_vfiprintf_r+0x1ac>
 8014962:	9b03      	ldr	r3, [sp, #12]
 8014964:	1d1a      	adds	r2, r3, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	9203      	str	r2, [sp, #12]
 801496a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801496e:	3402      	adds	r4, #2
 8014970:	9305      	str	r3, [sp, #20]
 8014972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014a48 <_vfiprintf_r+0x22c>
 8014976:	7821      	ldrb	r1, [r4, #0]
 8014978:	2203      	movs	r2, #3
 801497a:	4650      	mov	r0, sl
 801497c:	f7eb fcb0 	bl	80002e0 <memchr>
 8014980:	b138      	cbz	r0, 8014992 <_vfiprintf_r+0x176>
 8014982:	9b04      	ldr	r3, [sp, #16]
 8014984:	eba0 000a 	sub.w	r0, r0, sl
 8014988:	2240      	movs	r2, #64	@ 0x40
 801498a:	4082      	lsls	r2, r0
 801498c:	4313      	orrs	r3, r2
 801498e:	3401      	adds	r4, #1
 8014990:	9304      	str	r3, [sp, #16]
 8014992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014996:	4829      	ldr	r0, [pc, #164]	@ (8014a3c <_vfiprintf_r+0x220>)
 8014998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801499c:	2206      	movs	r2, #6
 801499e:	f7eb fc9f 	bl	80002e0 <memchr>
 80149a2:	2800      	cmp	r0, #0
 80149a4:	d03f      	beq.n	8014a26 <_vfiprintf_r+0x20a>
 80149a6:	4b26      	ldr	r3, [pc, #152]	@ (8014a40 <_vfiprintf_r+0x224>)
 80149a8:	bb1b      	cbnz	r3, 80149f2 <_vfiprintf_r+0x1d6>
 80149aa:	9b03      	ldr	r3, [sp, #12]
 80149ac:	3307      	adds	r3, #7
 80149ae:	f023 0307 	bic.w	r3, r3, #7
 80149b2:	3308      	adds	r3, #8
 80149b4:	9303      	str	r3, [sp, #12]
 80149b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149b8:	443b      	add	r3, r7
 80149ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80149bc:	e76a      	b.n	8014894 <_vfiprintf_r+0x78>
 80149be:	fb0c 3202 	mla	r2, ip, r2, r3
 80149c2:	460c      	mov	r4, r1
 80149c4:	2001      	movs	r0, #1
 80149c6:	e7a8      	b.n	801491a <_vfiprintf_r+0xfe>
 80149c8:	2300      	movs	r3, #0
 80149ca:	3401      	adds	r4, #1
 80149cc:	9305      	str	r3, [sp, #20]
 80149ce:	4619      	mov	r1, r3
 80149d0:	f04f 0c0a 	mov.w	ip, #10
 80149d4:	4620      	mov	r0, r4
 80149d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149da:	3a30      	subs	r2, #48	@ 0x30
 80149dc:	2a09      	cmp	r2, #9
 80149de:	d903      	bls.n	80149e8 <_vfiprintf_r+0x1cc>
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d0c6      	beq.n	8014972 <_vfiprintf_r+0x156>
 80149e4:	9105      	str	r1, [sp, #20]
 80149e6:	e7c4      	b.n	8014972 <_vfiprintf_r+0x156>
 80149e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80149ec:	4604      	mov	r4, r0
 80149ee:	2301      	movs	r3, #1
 80149f0:	e7f0      	b.n	80149d4 <_vfiprintf_r+0x1b8>
 80149f2:	ab03      	add	r3, sp, #12
 80149f4:	9300      	str	r3, [sp, #0]
 80149f6:	462a      	mov	r2, r5
 80149f8:	4b12      	ldr	r3, [pc, #72]	@ (8014a44 <_vfiprintf_r+0x228>)
 80149fa:	a904      	add	r1, sp, #16
 80149fc:	4630      	mov	r0, r6
 80149fe:	f7fc f857 	bl	8010ab0 <_printf_float>
 8014a02:	4607      	mov	r7, r0
 8014a04:	1c78      	adds	r0, r7, #1
 8014a06:	d1d6      	bne.n	80149b6 <_vfiprintf_r+0x19a>
 8014a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a0a:	07d9      	lsls	r1, r3, #31
 8014a0c:	d405      	bmi.n	8014a1a <_vfiprintf_r+0x1fe>
 8014a0e:	89ab      	ldrh	r3, [r5, #12]
 8014a10:	059a      	lsls	r2, r3, #22
 8014a12:	d402      	bmi.n	8014a1a <_vfiprintf_r+0x1fe>
 8014a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a16:	f7fd f9dd 	bl	8011dd4 <__retarget_lock_release_recursive>
 8014a1a:	89ab      	ldrh	r3, [r5, #12]
 8014a1c:	065b      	lsls	r3, r3, #25
 8014a1e:	f53f af1f 	bmi.w	8014860 <_vfiprintf_r+0x44>
 8014a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a24:	e71e      	b.n	8014864 <_vfiprintf_r+0x48>
 8014a26:	ab03      	add	r3, sp, #12
 8014a28:	9300      	str	r3, [sp, #0]
 8014a2a:	462a      	mov	r2, r5
 8014a2c:	4b05      	ldr	r3, [pc, #20]	@ (8014a44 <_vfiprintf_r+0x228>)
 8014a2e:	a904      	add	r1, sp, #16
 8014a30:	4630      	mov	r0, r6
 8014a32:	f7fc fac5 	bl	8010fc0 <_printf_i>
 8014a36:	e7e4      	b.n	8014a02 <_vfiprintf_r+0x1e6>
 8014a38:	080172a9 	.word	0x080172a9
 8014a3c:	080172b3 	.word	0x080172b3
 8014a40:	08010ab1 	.word	0x08010ab1
 8014a44:	080147f7 	.word	0x080147f7
 8014a48:	080172af 	.word	0x080172af

08014a4c <_scanf_chars>:
 8014a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a50:	4615      	mov	r5, r2
 8014a52:	688a      	ldr	r2, [r1, #8]
 8014a54:	4680      	mov	r8, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	b932      	cbnz	r2, 8014a68 <_scanf_chars+0x1c>
 8014a5a:	698a      	ldr	r2, [r1, #24]
 8014a5c:	2a00      	cmp	r2, #0
 8014a5e:	bf14      	ite	ne
 8014a60:	f04f 32ff 	movne.w	r2, #4294967295
 8014a64:	2201      	moveq	r2, #1
 8014a66:	608a      	str	r2, [r1, #8]
 8014a68:	6822      	ldr	r2, [r4, #0]
 8014a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014afc <_scanf_chars+0xb0>
 8014a6e:	06d1      	lsls	r1, r2, #27
 8014a70:	bf5f      	itttt	pl
 8014a72:	681a      	ldrpl	r2, [r3, #0]
 8014a74:	1d11      	addpl	r1, r2, #4
 8014a76:	6019      	strpl	r1, [r3, #0]
 8014a78:	6816      	ldrpl	r6, [r2, #0]
 8014a7a:	2700      	movs	r7, #0
 8014a7c:	69a0      	ldr	r0, [r4, #24]
 8014a7e:	b188      	cbz	r0, 8014aa4 <_scanf_chars+0x58>
 8014a80:	2801      	cmp	r0, #1
 8014a82:	d107      	bne.n	8014a94 <_scanf_chars+0x48>
 8014a84:	682b      	ldr	r3, [r5, #0]
 8014a86:	781a      	ldrb	r2, [r3, #0]
 8014a88:	6963      	ldr	r3, [r4, #20]
 8014a8a:	5c9b      	ldrb	r3, [r3, r2]
 8014a8c:	b953      	cbnz	r3, 8014aa4 <_scanf_chars+0x58>
 8014a8e:	2f00      	cmp	r7, #0
 8014a90:	d031      	beq.n	8014af6 <_scanf_chars+0xaa>
 8014a92:	e022      	b.n	8014ada <_scanf_chars+0x8e>
 8014a94:	2802      	cmp	r0, #2
 8014a96:	d120      	bne.n	8014ada <_scanf_chars+0x8e>
 8014a98:	682b      	ldr	r3, [r5, #0]
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014aa0:	071b      	lsls	r3, r3, #28
 8014aa2:	d41a      	bmi.n	8014ada <_scanf_chars+0x8e>
 8014aa4:	6823      	ldr	r3, [r4, #0]
 8014aa6:	06da      	lsls	r2, r3, #27
 8014aa8:	bf5e      	ittt	pl
 8014aaa:	682b      	ldrpl	r3, [r5, #0]
 8014aac:	781b      	ldrbpl	r3, [r3, #0]
 8014aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014ab2:	682a      	ldr	r2, [r5, #0]
 8014ab4:	686b      	ldr	r3, [r5, #4]
 8014ab6:	3201      	adds	r2, #1
 8014ab8:	602a      	str	r2, [r5, #0]
 8014aba:	68a2      	ldr	r2, [r4, #8]
 8014abc:	3b01      	subs	r3, #1
 8014abe:	3a01      	subs	r2, #1
 8014ac0:	606b      	str	r3, [r5, #4]
 8014ac2:	3701      	adds	r7, #1
 8014ac4:	60a2      	str	r2, [r4, #8]
 8014ac6:	b142      	cbz	r2, 8014ada <_scanf_chars+0x8e>
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	dcd7      	bgt.n	8014a7c <_scanf_chars+0x30>
 8014acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4798      	blx	r3
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	d0d0      	beq.n	8014a7c <_scanf_chars+0x30>
 8014ada:	6823      	ldr	r3, [r4, #0]
 8014adc:	f013 0310 	ands.w	r3, r3, #16
 8014ae0:	d105      	bne.n	8014aee <_scanf_chars+0xa2>
 8014ae2:	68e2      	ldr	r2, [r4, #12]
 8014ae4:	3201      	adds	r2, #1
 8014ae6:	60e2      	str	r2, [r4, #12]
 8014ae8:	69a2      	ldr	r2, [r4, #24]
 8014aea:	b102      	cbz	r2, 8014aee <_scanf_chars+0xa2>
 8014aec:	7033      	strb	r3, [r6, #0]
 8014aee:	6923      	ldr	r3, [r4, #16]
 8014af0:	443b      	add	r3, r7
 8014af2:	6123      	str	r3, [r4, #16]
 8014af4:	2000      	movs	r0, #0
 8014af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afa:	bf00      	nop
 8014afc:	080171a9 	.word	0x080171a9

08014b00 <_scanf_i>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	4698      	mov	r8, r3
 8014b06:	4b74      	ldr	r3, [pc, #464]	@ (8014cd8 <_scanf_i+0x1d8>)
 8014b08:	460c      	mov	r4, r1
 8014b0a:	4682      	mov	sl, r0
 8014b0c:	4616      	mov	r6, r2
 8014b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b12:	b087      	sub	sp, #28
 8014b14:	ab03      	add	r3, sp, #12
 8014b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b1a:	4b70      	ldr	r3, [pc, #448]	@ (8014cdc <_scanf_i+0x1dc>)
 8014b1c:	69a1      	ldr	r1, [r4, #24]
 8014b1e:	4a70      	ldr	r2, [pc, #448]	@ (8014ce0 <_scanf_i+0x1e0>)
 8014b20:	2903      	cmp	r1, #3
 8014b22:	bf08      	it	eq
 8014b24:	461a      	moveq	r2, r3
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	9201      	str	r2, [sp, #4]
 8014b2a:	1e5a      	subs	r2, r3, #1
 8014b2c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014b30:	bf88      	it	hi
 8014b32:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014b36:	4627      	mov	r7, r4
 8014b38:	bf82      	ittt	hi
 8014b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8014b3e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014b42:	60a3      	strhi	r3, [r4, #8]
 8014b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014b48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014b4c:	bf98      	it	ls
 8014b4e:	f04f 0900 	movls.w	r9, #0
 8014b52:	6023      	str	r3, [r4, #0]
 8014b54:	463d      	mov	r5, r7
 8014b56:	f04f 0b00 	mov.w	fp, #0
 8014b5a:	6831      	ldr	r1, [r6, #0]
 8014b5c:	ab03      	add	r3, sp, #12
 8014b5e:	7809      	ldrb	r1, [r1, #0]
 8014b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b64:	2202      	movs	r2, #2
 8014b66:	f7eb fbbb 	bl	80002e0 <memchr>
 8014b6a:	b328      	cbz	r0, 8014bb8 <_scanf_i+0xb8>
 8014b6c:	f1bb 0f01 	cmp.w	fp, #1
 8014b70:	d159      	bne.n	8014c26 <_scanf_i+0x126>
 8014b72:	6862      	ldr	r2, [r4, #4]
 8014b74:	b92a      	cbnz	r2, 8014b82 <_scanf_i+0x82>
 8014b76:	6822      	ldr	r2, [r4, #0]
 8014b78:	2108      	movs	r1, #8
 8014b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b7e:	6061      	str	r1, [r4, #4]
 8014b80:	6022      	str	r2, [r4, #0]
 8014b82:	6822      	ldr	r2, [r4, #0]
 8014b84:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014b88:	6022      	str	r2, [r4, #0]
 8014b8a:	68a2      	ldr	r2, [r4, #8]
 8014b8c:	1e51      	subs	r1, r2, #1
 8014b8e:	60a1      	str	r1, [r4, #8]
 8014b90:	b192      	cbz	r2, 8014bb8 <_scanf_i+0xb8>
 8014b92:	6832      	ldr	r2, [r6, #0]
 8014b94:	1c51      	adds	r1, r2, #1
 8014b96:	6031      	str	r1, [r6, #0]
 8014b98:	7812      	ldrb	r2, [r2, #0]
 8014b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8014b9e:	6872      	ldr	r2, [r6, #4]
 8014ba0:	3a01      	subs	r2, #1
 8014ba2:	2a00      	cmp	r2, #0
 8014ba4:	6072      	str	r2, [r6, #4]
 8014ba6:	dc07      	bgt.n	8014bb8 <_scanf_i+0xb8>
 8014ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014bac:	4631      	mov	r1, r6
 8014bae:	4650      	mov	r0, sl
 8014bb0:	4790      	blx	r2
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	f040 8085 	bne.w	8014cc2 <_scanf_i+0x1c2>
 8014bb8:	f10b 0b01 	add.w	fp, fp, #1
 8014bbc:	f1bb 0f03 	cmp.w	fp, #3
 8014bc0:	d1cb      	bne.n	8014b5a <_scanf_i+0x5a>
 8014bc2:	6863      	ldr	r3, [r4, #4]
 8014bc4:	b90b      	cbnz	r3, 8014bca <_scanf_i+0xca>
 8014bc6:	230a      	movs	r3, #10
 8014bc8:	6063      	str	r3, [r4, #4]
 8014bca:	6863      	ldr	r3, [r4, #4]
 8014bcc:	4945      	ldr	r1, [pc, #276]	@ (8014ce4 <_scanf_i+0x1e4>)
 8014bce:	6960      	ldr	r0, [r4, #20]
 8014bd0:	1ac9      	subs	r1, r1, r3
 8014bd2:	f000 f997 	bl	8014f04 <__sccl>
 8014bd6:	f04f 0b00 	mov.w	fp, #0
 8014bda:	68a3      	ldr	r3, [r4, #8]
 8014bdc:	6822      	ldr	r2, [r4, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d03d      	beq.n	8014c5e <_scanf_i+0x15e>
 8014be2:	6831      	ldr	r1, [r6, #0]
 8014be4:	6960      	ldr	r0, [r4, #20]
 8014be6:	f891 c000 	ldrb.w	ip, [r1]
 8014bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d035      	beq.n	8014c5e <_scanf_i+0x15e>
 8014bf2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014bf6:	d124      	bne.n	8014c42 <_scanf_i+0x142>
 8014bf8:	0510      	lsls	r0, r2, #20
 8014bfa:	d522      	bpl.n	8014c42 <_scanf_i+0x142>
 8014bfc:	f10b 0b01 	add.w	fp, fp, #1
 8014c00:	f1b9 0f00 	cmp.w	r9, #0
 8014c04:	d003      	beq.n	8014c0e <_scanf_i+0x10e>
 8014c06:	3301      	adds	r3, #1
 8014c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c0c:	60a3      	str	r3, [r4, #8]
 8014c0e:	6873      	ldr	r3, [r6, #4]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	6073      	str	r3, [r6, #4]
 8014c16:	dd1b      	ble.n	8014c50 <_scanf_i+0x150>
 8014c18:	6833      	ldr	r3, [r6, #0]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	6033      	str	r3, [r6, #0]
 8014c1e:	68a3      	ldr	r3, [r4, #8]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	60a3      	str	r3, [r4, #8]
 8014c24:	e7d9      	b.n	8014bda <_scanf_i+0xda>
 8014c26:	f1bb 0f02 	cmp.w	fp, #2
 8014c2a:	d1ae      	bne.n	8014b8a <_scanf_i+0x8a>
 8014c2c:	6822      	ldr	r2, [r4, #0]
 8014c2e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014c32:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014c36:	d1bf      	bne.n	8014bb8 <_scanf_i+0xb8>
 8014c38:	2110      	movs	r1, #16
 8014c3a:	6061      	str	r1, [r4, #4]
 8014c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014c40:	e7a2      	b.n	8014b88 <_scanf_i+0x88>
 8014c42:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014c46:	6022      	str	r2, [r4, #0]
 8014c48:	780b      	ldrb	r3, [r1, #0]
 8014c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8014c4e:	e7de      	b.n	8014c0e <_scanf_i+0x10e>
 8014c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014c54:	4631      	mov	r1, r6
 8014c56:	4650      	mov	r0, sl
 8014c58:	4798      	blx	r3
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	d0df      	beq.n	8014c1e <_scanf_i+0x11e>
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	05d9      	lsls	r1, r3, #23
 8014c62:	d50d      	bpl.n	8014c80 <_scanf_i+0x180>
 8014c64:	42bd      	cmp	r5, r7
 8014c66:	d909      	bls.n	8014c7c <_scanf_i+0x17c>
 8014c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c70:	4632      	mov	r2, r6
 8014c72:	4650      	mov	r0, sl
 8014c74:	4798      	blx	r3
 8014c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c7a:	464d      	mov	r5, r9
 8014c7c:	42bd      	cmp	r5, r7
 8014c7e:	d028      	beq.n	8014cd2 <_scanf_i+0x1d2>
 8014c80:	6822      	ldr	r2, [r4, #0]
 8014c82:	f012 0210 	ands.w	r2, r2, #16
 8014c86:	d113      	bne.n	8014cb0 <_scanf_i+0x1b0>
 8014c88:	702a      	strb	r2, [r5, #0]
 8014c8a:	6863      	ldr	r3, [r4, #4]
 8014c8c:	9e01      	ldr	r6, [sp, #4]
 8014c8e:	4639      	mov	r1, r7
 8014c90:	4650      	mov	r0, sl
 8014c92:	47b0      	blx	r6
 8014c94:	f8d8 3000 	ldr.w	r3, [r8]
 8014c98:	6821      	ldr	r1, [r4, #0]
 8014c9a:	1d1a      	adds	r2, r3, #4
 8014c9c:	f8c8 2000 	str.w	r2, [r8]
 8014ca0:	f011 0f20 	tst.w	r1, #32
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	d00f      	beq.n	8014cc8 <_scanf_i+0x1c8>
 8014ca8:	6018      	str	r0, [r3, #0]
 8014caa:	68e3      	ldr	r3, [r4, #12]
 8014cac:	3301      	adds	r3, #1
 8014cae:	60e3      	str	r3, [r4, #12]
 8014cb0:	6923      	ldr	r3, [r4, #16]
 8014cb2:	1bed      	subs	r5, r5, r7
 8014cb4:	445d      	add	r5, fp
 8014cb6:	442b      	add	r3, r5
 8014cb8:	6123      	str	r3, [r4, #16]
 8014cba:	2000      	movs	r0, #0
 8014cbc:	b007      	add	sp, #28
 8014cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc2:	f04f 0b00 	mov.w	fp, #0
 8014cc6:	e7ca      	b.n	8014c5e <_scanf_i+0x15e>
 8014cc8:	07ca      	lsls	r2, r1, #31
 8014cca:	bf4c      	ite	mi
 8014ccc:	8018      	strhmi	r0, [r3, #0]
 8014cce:	6018      	strpl	r0, [r3, #0]
 8014cd0:	e7eb      	b.n	8014caa <_scanf_i+0x1aa>
 8014cd2:	2001      	movs	r0, #1
 8014cd4:	e7f2      	b.n	8014cbc <_scanf_i+0x1bc>
 8014cd6:	bf00      	nop
 8014cd8:	08016dd8 	.word	0x08016dd8
 8014cdc:	0801417d 	.word	0x0801417d
 8014ce0:	080158ed 	.word	0x080158ed
 8014ce4:	080172ca 	.word	0x080172ca

08014ce8 <__sflush_r>:
 8014ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf0:	0716      	lsls	r6, r2, #28
 8014cf2:	4605      	mov	r5, r0
 8014cf4:	460c      	mov	r4, r1
 8014cf6:	d454      	bmi.n	8014da2 <__sflush_r+0xba>
 8014cf8:	684b      	ldr	r3, [r1, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dc02      	bgt.n	8014d04 <__sflush_r+0x1c>
 8014cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	dd48      	ble.n	8014d96 <__sflush_r+0xae>
 8014d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d06:	2e00      	cmp	r6, #0
 8014d08:	d045      	beq.n	8014d96 <__sflush_r+0xae>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d10:	682f      	ldr	r7, [r5, #0]
 8014d12:	6a21      	ldr	r1, [r4, #32]
 8014d14:	602b      	str	r3, [r5, #0]
 8014d16:	d030      	beq.n	8014d7a <__sflush_r+0x92>
 8014d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	0759      	lsls	r1, r3, #29
 8014d1e:	d505      	bpl.n	8014d2c <__sflush_r+0x44>
 8014d20:	6863      	ldr	r3, [r4, #4]
 8014d22:	1ad2      	subs	r2, r2, r3
 8014d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d26:	b10b      	cbz	r3, 8014d2c <__sflush_r+0x44>
 8014d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d2a:	1ad2      	subs	r2, r2, r3
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d30:	6a21      	ldr	r1, [r4, #32]
 8014d32:	4628      	mov	r0, r5
 8014d34:	47b0      	blx	r6
 8014d36:	1c43      	adds	r3, r0, #1
 8014d38:	89a3      	ldrh	r3, [r4, #12]
 8014d3a:	d106      	bne.n	8014d4a <__sflush_r+0x62>
 8014d3c:	6829      	ldr	r1, [r5, #0]
 8014d3e:	291d      	cmp	r1, #29
 8014d40:	d82b      	bhi.n	8014d9a <__sflush_r+0xb2>
 8014d42:	4a2a      	ldr	r2, [pc, #168]	@ (8014dec <__sflush_r+0x104>)
 8014d44:	410a      	asrs	r2, r1
 8014d46:	07d6      	lsls	r6, r2, #31
 8014d48:	d427      	bmi.n	8014d9a <__sflush_r+0xb2>
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	6062      	str	r2, [r4, #4]
 8014d4e:	04d9      	lsls	r1, r3, #19
 8014d50:	6922      	ldr	r2, [r4, #16]
 8014d52:	6022      	str	r2, [r4, #0]
 8014d54:	d504      	bpl.n	8014d60 <__sflush_r+0x78>
 8014d56:	1c42      	adds	r2, r0, #1
 8014d58:	d101      	bne.n	8014d5e <__sflush_r+0x76>
 8014d5a:	682b      	ldr	r3, [r5, #0]
 8014d5c:	b903      	cbnz	r3, 8014d60 <__sflush_r+0x78>
 8014d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d62:	602f      	str	r7, [r5, #0]
 8014d64:	b1b9      	cbz	r1, 8014d96 <__sflush_r+0xae>
 8014d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d6a:	4299      	cmp	r1, r3
 8014d6c:	d002      	beq.n	8014d74 <__sflush_r+0x8c>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	f7fd fe24 	bl	80129bc <_free_r>
 8014d74:	2300      	movs	r3, #0
 8014d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d78:	e00d      	b.n	8014d96 <__sflush_r+0xae>
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b0      	blx	r6
 8014d80:	4602      	mov	r2, r0
 8014d82:	1c50      	adds	r0, r2, #1
 8014d84:	d1c9      	bne.n	8014d1a <__sflush_r+0x32>
 8014d86:	682b      	ldr	r3, [r5, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d0c6      	beq.n	8014d1a <__sflush_r+0x32>
 8014d8c:	2b1d      	cmp	r3, #29
 8014d8e:	d001      	beq.n	8014d94 <__sflush_r+0xac>
 8014d90:	2b16      	cmp	r3, #22
 8014d92:	d11e      	bne.n	8014dd2 <__sflush_r+0xea>
 8014d94:	602f      	str	r7, [r5, #0]
 8014d96:	2000      	movs	r0, #0
 8014d98:	e022      	b.n	8014de0 <__sflush_r+0xf8>
 8014d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d9e:	b21b      	sxth	r3, r3
 8014da0:	e01b      	b.n	8014dda <__sflush_r+0xf2>
 8014da2:	690f      	ldr	r7, [r1, #16]
 8014da4:	2f00      	cmp	r7, #0
 8014da6:	d0f6      	beq.n	8014d96 <__sflush_r+0xae>
 8014da8:	0793      	lsls	r3, r2, #30
 8014daa:	680e      	ldr	r6, [r1, #0]
 8014dac:	bf08      	it	eq
 8014dae:	694b      	ldreq	r3, [r1, #20]
 8014db0:	600f      	str	r7, [r1, #0]
 8014db2:	bf18      	it	ne
 8014db4:	2300      	movne	r3, #0
 8014db6:	eba6 0807 	sub.w	r8, r6, r7
 8014dba:	608b      	str	r3, [r1, #8]
 8014dbc:	f1b8 0f00 	cmp.w	r8, #0
 8014dc0:	dde9      	ble.n	8014d96 <__sflush_r+0xae>
 8014dc2:	6a21      	ldr	r1, [r4, #32]
 8014dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dc6:	4643      	mov	r3, r8
 8014dc8:	463a      	mov	r2, r7
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b0      	blx	r6
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	dc08      	bgt.n	8014de4 <__sflush_r+0xfc>
 8014dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dda:	81a3      	strh	r3, [r4, #12]
 8014ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8014de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014de4:	4407      	add	r7, r0
 8014de6:	eba8 0800 	sub.w	r8, r8, r0
 8014dea:	e7e7      	b.n	8014dbc <__sflush_r+0xd4>
 8014dec:	dfbffffe 	.word	0xdfbffffe

08014df0 <_fflush_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	690b      	ldr	r3, [r1, #16]
 8014df4:	4605      	mov	r5, r0
 8014df6:	460c      	mov	r4, r1
 8014df8:	b913      	cbnz	r3, 8014e00 <_fflush_r+0x10>
 8014dfa:	2500      	movs	r5, #0
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	bd38      	pop	{r3, r4, r5, pc}
 8014e00:	b118      	cbz	r0, 8014e0a <_fflush_r+0x1a>
 8014e02:	6a03      	ldr	r3, [r0, #32]
 8014e04:	b90b      	cbnz	r3, 8014e0a <_fflush_r+0x1a>
 8014e06:	f7fc fc93 	bl	8011730 <__sinit>
 8014e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d0f3      	beq.n	8014dfa <_fflush_r+0xa>
 8014e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e14:	07d0      	lsls	r0, r2, #31
 8014e16:	d404      	bmi.n	8014e22 <_fflush_r+0x32>
 8014e18:	0599      	lsls	r1, r3, #22
 8014e1a:	d402      	bmi.n	8014e22 <_fflush_r+0x32>
 8014e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e1e:	f7fc ffd8 	bl	8011dd2 <__retarget_lock_acquire_recursive>
 8014e22:	4628      	mov	r0, r5
 8014e24:	4621      	mov	r1, r4
 8014e26:	f7ff ff5f 	bl	8014ce8 <__sflush_r>
 8014e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e2c:	07da      	lsls	r2, r3, #31
 8014e2e:	4605      	mov	r5, r0
 8014e30:	d4e4      	bmi.n	8014dfc <_fflush_r+0xc>
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	059b      	lsls	r3, r3, #22
 8014e36:	d4e1      	bmi.n	8014dfc <_fflush_r+0xc>
 8014e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e3a:	f7fc ffcb 	bl	8011dd4 <__retarget_lock_release_recursive>
 8014e3e:	e7dd      	b.n	8014dfc <_fflush_r+0xc>

08014e40 <__swhatbuf_r>:
 8014e40:	b570      	push	{r4, r5, r6, lr}
 8014e42:	460c      	mov	r4, r1
 8014e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e48:	2900      	cmp	r1, #0
 8014e4a:	b096      	sub	sp, #88	@ 0x58
 8014e4c:	4615      	mov	r5, r2
 8014e4e:	461e      	mov	r6, r3
 8014e50:	da0d      	bge.n	8014e6e <__swhatbuf_r+0x2e>
 8014e52:	89a3      	ldrh	r3, [r4, #12]
 8014e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e58:	f04f 0100 	mov.w	r1, #0
 8014e5c:	bf14      	ite	ne
 8014e5e:	2340      	movne	r3, #64	@ 0x40
 8014e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e64:	2000      	movs	r0, #0
 8014e66:	6031      	str	r1, [r6, #0]
 8014e68:	602b      	str	r3, [r5, #0]
 8014e6a:	b016      	add	sp, #88	@ 0x58
 8014e6c:	bd70      	pop	{r4, r5, r6, pc}
 8014e6e:	466a      	mov	r2, sp
 8014e70:	f000 f8e8 	bl	8015044 <_fstat_r>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	dbec      	blt.n	8014e52 <__swhatbuf_r+0x12>
 8014e78:	9901      	ldr	r1, [sp, #4]
 8014e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e82:	4259      	negs	r1, r3
 8014e84:	4159      	adcs	r1, r3
 8014e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e8a:	e7eb      	b.n	8014e64 <__swhatbuf_r+0x24>

08014e8c <__smakebuf_r>:
 8014e8c:	898b      	ldrh	r3, [r1, #12]
 8014e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e90:	079d      	lsls	r5, r3, #30
 8014e92:	4606      	mov	r6, r0
 8014e94:	460c      	mov	r4, r1
 8014e96:	d507      	bpl.n	8014ea8 <__smakebuf_r+0x1c>
 8014e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e9c:	6023      	str	r3, [r4, #0]
 8014e9e:	6123      	str	r3, [r4, #16]
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	6163      	str	r3, [r4, #20]
 8014ea4:	b003      	add	sp, #12
 8014ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea8:	ab01      	add	r3, sp, #4
 8014eaa:	466a      	mov	r2, sp
 8014eac:	f7ff ffc8 	bl	8014e40 <__swhatbuf_r>
 8014eb0:	9f00      	ldr	r7, [sp, #0]
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	4639      	mov	r1, r7
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f7fd fdf4 	bl	8012aa4 <_malloc_r>
 8014ebc:	b948      	cbnz	r0, 8014ed2 <__smakebuf_r+0x46>
 8014ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ec2:	059a      	lsls	r2, r3, #22
 8014ec4:	d4ee      	bmi.n	8014ea4 <__smakebuf_r+0x18>
 8014ec6:	f023 0303 	bic.w	r3, r3, #3
 8014eca:	f043 0302 	orr.w	r3, r3, #2
 8014ece:	81a3      	strh	r3, [r4, #12]
 8014ed0:	e7e2      	b.n	8014e98 <__smakebuf_r+0xc>
 8014ed2:	89a3      	ldrh	r3, [r4, #12]
 8014ed4:	6020      	str	r0, [r4, #0]
 8014ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014eda:	81a3      	strh	r3, [r4, #12]
 8014edc:	9b01      	ldr	r3, [sp, #4]
 8014ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014ee2:	b15b      	cbz	r3, 8014efc <__smakebuf_r+0x70>
 8014ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f000 f8bd 	bl	8015068 <_isatty_r>
 8014eee:	b128      	cbz	r0, 8014efc <__smakebuf_r+0x70>
 8014ef0:	89a3      	ldrh	r3, [r4, #12]
 8014ef2:	f023 0303 	bic.w	r3, r3, #3
 8014ef6:	f043 0301 	orr.w	r3, r3, #1
 8014efa:	81a3      	strh	r3, [r4, #12]
 8014efc:	89a3      	ldrh	r3, [r4, #12]
 8014efe:	431d      	orrs	r5, r3
 8014f00:	81a5      	strh	r5, [r4, #12]
 8014f02:	e7cf      	b.n	8014ea4 <__smakebuf_r+0x18>

08014f04 <__sccl>:
 8014f04:	b570      	push	{r4, r5, r6, lr}
 8014f06:	780b      	ldrb	r3, [r1, #0]
 8014f08:	4604      	mov	r4, r0
 8014f0a:	2b5e      	cmp	r3, #94	@ 0x5e
 8014f0c:	bf0b      	itete	eq
 8014f0e:	784b      	ldrbeq	r3, [r1, #1]
 8014f10:	1c4a      	addne	r2, r1, #1
 8014f12:	1c8a      	addeq	r2, r1, #2
 8014f14:	2100      	movne	r1, #0
 8014f16:	bf08      	it	eq
 8014f18:	2101      	moveq	r1, #1
 8014f1a:	3801      	subs	r0, #1
 8014f1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014f20:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014f24:	42a8      	cmp	r0, r5
 8014f26:	d1fb      	bne.n	8014f20 <__sccl+0x1c>
 8014f28:	b90b      	cbnz	r3, 8014f2e <__sccl+0x2a>
 8014f2a:	1e50      	subs	r0, r2, #1
 8014f2c:	bd70      	pop	{r4, r5, r6, pc}
 8014f2e:	f081 0101 	eor.w	r1, r1, #1
 8014f32:	54e1      	strb	r1, [r4, r3]
 8014f34:	4610      	mov	r0, r2
 8014f36:	4602      	mov	r2, r0
 8014f38:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014f3c:	2d2d      	cmp	r5, #45	@ 0x2d
 8014f3e:	d005      	beq.n	8014f4c <__sccl+0x48>
 8014f40:	2d5d      	cmp	r5, #93	@ 0x5d
 8014f42:	d016      	beq.n	8014f72 <__sccl+0x6e>
 8014f44:	2d00      	cmp	r5, #0
 8014f46:	d0f1      	beq.n	8014f2c <__sccl+0x28>
 8014f48:	462b      	mov	r3, r5
 8014f4a:	e7f2      	b.n	8014f32 <__sccl+0x2e>
 8014f4c:	7846      	ldrb	r6, [r0, #1]
 8014f4e:	2e5d      	cmp	r6, #93	@ 0x5d
 8014f50:	d0fa      	beq.n	8014f48 <__sccl+0x44>
 8014f52:	42b3      	cmp	r3, r6
 8014f54:	dcf8      	bgt.n	8014f48 <__sccl+0x44>
 8014f56:	3002      	adds	r0, #2
 8014f58:	461a      	mov	r2, r3
 8014f5a:	3201      	adds	r2, #1
 8014f5c:	4296      	cmp	r6, r2
 8014f5e:	54a1      	strb	r1, [r4, r2]
 8014f60:	dcfb      	bgt.n	8014f5a <__sccl+0x56>
 8014f62:	1af2      	subs	r2, r6, r3
 8014f64:	3a01      	subs	r2, #1
 8014f66:	1c5d      	adds	r5, r3, #1
 8014f68:	42b3      	cmp	r3, r6
 8014f6a:	bfa8      	it	ge
 8014f6c:	2200      	movge	r2, #0
 8014f6e:	18ab      	adds	r3, r5, r2
 8014f70:	e7e1      	b.n	8014f36 <__sccl+0x32>
 8014f72:	4610      	mov	r0, r2
 8014f74:	e7da      	b.n	8014f2c <__sccl+0x28>

08014f76 <__submore>:
 8014f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f82:	4299      	cmp	r1, r3
 8014f84:	d11d      	bne.n	8014fc2 <__submore+0x4c>
 8014f86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014f8a:	f7fd fd8b 	bl	8012aa4 <_malloc_r>
 8014f8e:	b918      	cbnz	r0, 8014f98 <__submore+0x22>
 8014f90:	f04f 30ff 	mov.w	r0, #4294967295
 8014f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014f9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014f9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014fa2:	6360      	str	r0, [r4, #52]	@ 0x34
 8014fa4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014fa8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014fac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014fb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014fb4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014fb8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014fbc:	6020      	str	r0, [r4, #0]
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	e7e8      	b.n	8014f94 <__submore+0x1e>
 8014fc2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014fc4:	0077      	lsls	r7, r6, #1
 8014fc6:	463a      	mov	r2, r7
 8014fc8:	f000 fbf3 	bl	80157b2 <_realloc_r>
 8014fcc:	4605      	mov	r5, r0
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0de      	beq.n	8014f90 <__submore+0x1a>
 8014fd2:	eb00 0806 	add.w	r8, r0, r6
 8014fd6:	4601      	mov	r1, r0
 8014fd8:	4632      	mov	r2, r6
 8014fda:	4640      	mov	r0, r8
 8014fdc:	f7fc fefb 	bl	8011dd6 <memcpy>
 8014fe0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014fe4:	f8c4 8000 	str.w	r8, [r4]
 8014fe8:	e7e9      	b.n	8014fbe <__submore+0x48>

08014fea <memmove>:
 8014fea:	4288      	cmp	r0, r1
 8014fec:	b510      	push	{r4, lr}
 8014fee:	eb01 0402 	add.w	r4, r1, r2
 8014ff2:	d902      	bls.n	8014ffa <memmove+0x10>
 8014ff4:	4284      	cmp	r4, r0
 8014ff6:	4623      	mov	r3, r4
 8014ff8:	d807      	bhi.n	801500a <memmove+0x20>
 8014ffa:	1e43      	subs	r3, r0, #1
 8014ffc:	42a1      	cmp	r1, r4
 8014ffe:	d008      	beq.n	8015012 <memmove+0x28>
 8015000:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015004:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015008:	e7f8      	b.n	8014ffc <memmove+0x12>
 801500a:	4402      	add	r2, r0
 801500c:	4601      	mov	r1, r0
 801500e:	428a      	cmp	r2, r1
 8015010:	d100      	bne.n	8015014 <memmove+0x2a>
 8015012:	bd10      	pop	{r4, pc}
 8015014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015018:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801501c:	e7f7      	b.n	801500e <memmove+0x24>

0801501e <strncmp>:
 801501e:	b510      	push	{r4, lr}
 8015020:	b16a      	cbz	r2, 801503e <strncmp+0x20>
 8015022:	3901      	subs	r1, #1
 8015024:	1884      	adds	r4, r0, r2
 8015026:	f810 2b01 	ldrb.w	r2, [r0], #1
 801502a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801502e:	429a      	cmp	r2, r3
 8015030:	d103      	bne.n	801503a <strncmp+0x1c>
 8015032:	42a0      	cmp	r0, r4
 8015034:	d001      	beq.n	801503a <strncmp+0x1c>
 8015036:	2a00      	cmp	r2, #0
 8015038:	d1f5      	bne.n	8015026 <strncmp+0x8>
 801503a:	1ad0      	subs	r0, r2, r3
 801503c:	bd10      	pop	{r4, pc}
 801503e:	4610      	mov	r0, r2
 8015040:	e7fc      	b.n	801503c <strncmp+0x1e>
	...

08015044 <_fstat_r>:
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	4d07      	ldr	r5, [pc, #28]	@ (8015064 <_fstat_r+0x20>)
 8015048:	2300      	movs	r3, #0
 801504a:	4604      	mov	r4, r0
 801504c:	4608      	mov	r0, r1
 801504e:	4611      	mov	r1, r2
 8015050:	602b      	str	r3, [r5, #0]
 8015052:	f7ef fc0d 	bl	8004870 <_fstat>
 8015056:	1c43      	adds	r3, r0, #1
 8015058:	d102      	bne.n	8015060 <_fstat_r+0x1c>
 801505a:	682b      	ldr	r3, [r5, #0]
 801505c:	b103      	cbz	r3, 8015060 <_fstat_r+0x1c>
 801505e:	6023      	str	r3, [r4, #0]
 8015060:	bd38      	pop	{r3, r4, r5, pc}
 8015062:	bf00      	nop
 8015064:	24005248 	.word	0x24005248

08015068 <_isatty_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4d06      	ldr	r5, [pc, #24]	@ (8015084 <_isatty_r+0x1c>)
 801506c:	2300      	movs	r3, #0
 801506e:	4604      	mov	r4, r0
 8015070:	4608      	mov	r0, r1
 8015072:	602b      	str	r3, [r5, #0]
 8015074:	f7ef fc0c 	bl	8004890 <_isatty>
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	d102      	bne.n	8015082 <_isatty_r+0x1a>
 801507c:	682b      	ldr	r3, [r5, #0]
 801507e:	b103      	cbz	r3, 8015082 <_isatty_r+0x1a>
 8015080:	6023      	str	r3, [r4, #0]
 8015082:	bd38      	pop	{r3, r4, r5, pc}
 8015084:	24005248 	.word	0x24005248

08015088 <_sbrk_r>:
 8015088:	b538      	push	{r3, r4, r5, lr}
 801508a:	4d06      	ldr	r5, [pc, #24]	@ (80150a4 <_sbrk_r+0x1c>)
 801508c:	2300      	movs	r3, #0
 801508e:	4604      	mov	r4, r0
 8015090:	4608      	mov	r0, r1
 8015092:	602b      	str	r3, [r5, #0]
 8015094:	f7ef fc14 	bl	80048c0 <_sbrk>
 8015098:	1c43      	adds	r3, r0, #1
 801509a:	d102      	bne.n	80150a2 <_sbrk_r+0x1a>
 801509c:	682b      	ldr	r3, [r5, #0]
 801509e:	b103      	cbz	r3, 80150a2 <_sbrk_r+0x1a>
 80150a0:	6023      	str	r3, [r4, #0]
 80150a2:	bd38      	pop	{r3, r4, r5, pc}
 80150a4:	24005248 	.word	0x24005248

080150a8 <nan>:
 80150a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80150b0 <nan+0x8>
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	00000000 	.word	0x00000000
 80150b4:	7ff80000 	.word	0x7ff80000

080150b8 <__assert_func>:
 80150b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ba:	4614      	mov	r4, r2
 80150bc:	461a      	mov	r2, r3
 80150be:	4b09      	ldr	r3, [pc, #36]	@ (80150e4 <__assert_func+0x2c>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	4605      	mov	r5, r0
 80150c4:	68d8      	ldr	r0, [r3, #12]
 80150c6:	b954      	cbnz	r4, 80150de <__assert_func+0x26>
 80150c8:	4b07      	ldr	r3, [pc, #28]	@ (80150e8 <__assert_func+0x30>)
 80150ca:	461c      	mov	r4, r3
 80150cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150d0:	9100      	str	r1, [sp, #0]
 80150d2:	462b      	mov	r3, r5
 80150d4:	4905      	ldr	r1, [pc, #20]	@ (80150ec <__assert_func+0x34>)
 80150d6:	f000 fc19 	bl	801590c <fiprintf>
 80150da:	f000 fc29 	bl	8015930 <abort>
 80150de:	4b04      	ldr	r3, [pc, #16]	@ (80150f0 <__assert_func+0x38>)
 80150e0:	e7f4      	b.n	80150cc <__assert_func+0x14>
 80150e2:	bf00      	nop
 80150e4:	2400002c 	.word	0x2400002c
 80150e8:	08017318 	.word	0x08017318
 80150ec:	080172ea 	.word	0x080172ea
 80150f0:	080172dd 	.word	0x080172dd

080150f4 <_calloc_r>:
 80150f4:	b570      	push	{r4, r5, r6, lr}
 80150f6:	fba1 5402 	umull	r5, r4, r1, r2
 80150fa:	b93c      	cbnz	r4, 801510c <_calloc_r+0x18>
 80150fc:	4629      	mov	r1, r5
 80150fe:	f7fd fcd1 	bl	8012aa4 <_malloc_r>
 8015102:	4606      	mov	r6, r0
 8015104:	b928      	cbnz	r0, 8015112 <_calloc_r+0x1e>
 8015106:	2600      	movs	r6, #0
 8015108:	4630      	mov	r0, r6
 801510a:	bd70      	pop	{r4, r5, r6, pc}
 801510c:	220c      	movs	r2, #12
 801510e:	6002      	str	r2, [r0, #0]
 8015110:	e7f9      	b.n	8015106 <_calloc_r+0x12>
 8015112:	462a      	mov	r2, r5
 8015114:	4621      	mov	r1, r4
 8015116:	f7fc fd89 	bl	8011c2c <memset>
 801511a:	e7f5      	b.n	8015108 <_calloc_r+0x14>

0801511c <rshift>:
 801511c:	6903      	ldr	r3, [r0, #16]
 801511e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015126:	ea4f 1261 	mov.w	r2, r1, asr #5
 801512a:	f100 0414 	add.w	r4, r0, #20
 801512e:	dd45      	ble.n	80151bc <rshift+0xa0>
 8015130:	f011 011f 	ands.w	r1, r1, #31
 8015134:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015138:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801513c:	d10c      	bne.n	8015158 <rshift+0x3c>
 801513e:	f100 0710 	add.w	r7, r0, #16
 8015142:	4629      	mov	r1, r5
 8015144:	42b1      	cmp	r1, r6
 8015146:	d334      	bcc.n	80151b2 <rshift+0x96>
 8015148:	1a9b      	subs	r3, r3, r2
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	1eea      	subs	r2, r5, #3
 801514e:	4296      	cmp	r6, r2
 8015150:	bf38      	it	cc
 8015152:	2300      	movcc	r3, #0
 8015154:	4423      	add	r3, r4
 8015156:	e015      	b.n	8015184 <rshift+0x68>
 8015158:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801515c:	f1c1 0820 	rsb	r8, r1, #32
 8015160:	40cf      	lsrs	r7, r1
 8015162:	f105 0e04 	add.w	lr, r5, #4
 8015166:	46a1      	mov	r9, r4
 8015168:	4576      	cmp	r6, lr
 801516a:	46f4      	mov	ip, lr
 801516c:	d815      	bhi.n	801519a <rshift+0x7e>
 801516e:	1a9a      	subs	r2, r3, r2
 8015170:	0092      	lsls	r2, r2, #2
 8015172:	3a04      	subs	r2, #4
 8015174:	3501      	adds	r5, #1
 8015176:	42ae      	cmp	r6, r5
 8015178:	bf38      	it	cc
 801517a:	2200      	movcc	r2, #0
 801517c:	18a3      	adds	r3, r4, r2
 801517e:	50a7      	str	r7, [r4, r2]
 8015180:	b107      	cbz	r7, 8015184 <rshift+0x68>
 8015182:	3304      	adds	r3, #4
 8015184:	1b1a      	subs	r2, r3, r4
 8015186:	42a3      	cmp	r3, r4
 8015188:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801518c:	bf08      	it	eq
 801518e:	2300      	moveq	r3, #0
 8015190:	6102      	str	r2, [r0, #16]
 8015192:	bf08      	it	eq
 8015194:	6143      	streq	r3, [r0, #20]
 8015196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801519a:	f8dc c000 	ldr.w	ip, [ip]
 801519e:	fa0c fc08 	lsl.w	ip, ip, r8
 80151a2:	ea4c 0707 	orr.w	r7, ip, r7
 80151a6:	f849 7b04 	str.w	r7, [r9], #4
 80151aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151ae:	40cf      	lsrs	r7, r1
 80151b0:	e7da      	b.n	8015168 <rshift+0x4c>
 80151b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80151b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80151ba:	e7c3      	b.n	8015144 <rshift+0x28>
 80151bc:	4623      	mov	r3, r4
 80151be:	e7e1      	b.n	8015184 <rshift+0x68>

080151c0 <__hexdig_fun>:
 80151c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80151c4:	2b09      	cmp	r3, #9
 80151c6:	d802      	bhi.n	80151ce <__hexdig_fun+0xe>
 80151c8:	3820      	subs	r0, #32
 80151ca:	b2c0      	uxtb	r0, r0
 80151cc:	4770      	bx	lr
 80151ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80151d2:	2b05      	cmp	r3, #5
 80151d4:	d801      	bhi.n	80151da <__hexdig_fun+0x1a>
 80151d6:	3847      	subs	r0, #71	@ 0x47
 80151d8:	e7f7      	b.n	80151ca <__hexdig_fun+0xa>
 80151da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80151de:	2b05      	cmp	r3, #5
 80151e0:	d801      	bhi.n	80151e6 <__hexdig_fun+0x26>
 80151e2:	3827      	subs	r0, #39	@ 0x27
 80151e4:	e7f1      	b.n	80151ca <__hexdig_fun+0xa>
 80151e6:	2000      	movs	r0, #0
 80151e8:	4770      	bx	lr
	...

080151ec <__gethex>:
 80151ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f0:	b085      	sub	sp, #20
 80151f2:	468a      	mov	sl, r1
 80151f4:	9302      	str	r3, [sp, #8]
 80151f6:	680b      	ldr	r3, [r1, #0]
 80151f8:	9001      	str	r0, [sp, #4]
 80151fa:	4690      	mov	r8, r2
 80151fc:	1c9c      	adds	r4, r3, #2
 80151fe:	46a1      	mov	r9, r4
 8015200:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015204:	2830      	cmp	r0, #48	@ 0x30
 8015206:	d0fa      	beq.n	80151fe <__gethex+0x12>
 8015208:	eba9 0303 	sub.w	r3, r9, r3
 801520c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015210:	f7ff ffd6 	bl	80151c0 <__hexdig_fun>
 8015214:	4605      	mov	r5, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	d168      	bne.n	80152ec <__gethex+0x100>
 801521a:	49a0      	ldr	r1, [pc, #640]	@ (801549c <__gethex+0x2b0>)
 801521c:	2201      	movs	r2, #1
 801521e:	4648      	mov	r0, r9
 8015220:	f7ff fefd 	bl	801501e <strncmp>
 8015224:	4607      	mov	r7, r0
 8015226:	2800      	cmp	r0, #0
 8015228:	d167      	bne.n	80152fa <__gethex+0x10e>
 801522a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801522e:	4626      	mov	r6, r4
 8015230:	f7ff ffc6 	bl	80151c0 <__hexdig_fun>
 8015234:	2800      	cmp	r0, #0
 8015236:	d062      	beq.n	80152fe <__gethex+0x112>
 8015238:	4623      	mov	r3, r4
 801523a:	7818      	ldrb	r0, [r3, #0]
 801523c:	2830      	cmp	r0, #48	@ 0x30
 801523e:	4699      	mov	r9, r3
 8015240:	f103 0301 	add.w	r3, r3, #1
 8015244:	d0f9      	beq.n	801523a <__gethex+0x4e>
 8015246:	f7ff ffbb 	bl	80151c0 <__hexdig_fun>
 801524a:	fab0 f580 	clz	r5, r0
 801524e:	096d      	lsrs	r5, r5, #5
 8015250:	f04f 0b01 	mov.w	fp, #1
 8015254:	464a      	mov	r2, r9
 8015256:	4616      	mov	r6, r2
 8015258:	3201      	adds	r2, #1
 801525a:	7830      	ldrb	r0, [r6, #0]
 801525c:	f7ff ffb0 	bl	80151c0 <__hexdig_fun>
 8015260:	2800      	cmp	r0, #0
 8015262:	d1f8      	bne.n	8015256 <__gethex+0x6a>
 8015264:	498d      	ldr	r1, [pc, #564]	@ (801549c <__gethex+0x2b0>)
 8015266:	2201      	movs	r2, #1
 8015268:	4630      	mov	r0, r6
 801526a:	f7ff fed8 	bl	801501e <strncmp>
 801526e:	2800      	cmp	r0, #0
 8015270:	d13f      	bne.n	80152f2 <__gethex+0x106>
 8015272:	b944      	cbnz	r4, 8015286 <__gethex+0x9a>
 8015274:	1c74      	adds	r4, r6, #1
 8015276:	4622      	mov	r2, r4
 8015278:	4616      	mov	r6, r2
 801527a:	3201      	adds	r2, #1
 801527c:	7830      	ldrb	r0, [r6, #0]
 801527e:	f7ff ff9f 	bl	80151c0 <__hexdig_fun>
 8015282:	2800      	cmp	r0, #0
 8015284:	d1f8      	bne.n	8015278 <__gethex+0x8c>
 8015286:	1ba4      	subs	r4, r4, r6
 8015288:	00a7      	lsls	r7, r4, #2
 801528a:	7833      	ldrb	r3, [r6, #0]
 801528c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015290:	2b50      	cmp	r3, #80	@ 0x50
 8015292:	d13e      	bne.n	8015312 <__gethex+0x126>
 8015294:	7873      	ldrb	r3, [r6, #1]
 8015296:	2b2b      	cmp	r3, #43	@ 0x2b
 8015298:	d033      	beq.n	8015302 <__gethex+0x116>
 801529a:	2b2d      	cmp	r3, #45	@ 0x2d
 801529c:	d034      	beq.n	8015308 <__gethex+0x11c>
 801529e:	1c71      	adds	r1, r6, #1
 80152a0:	2400      	movs	r4, #0
 80152a2:	7808      	ldrb	r0, [r1, #0]
 80152a4:	f7ff ff8c 	bl	80151c0 <__hexdig_fun>
 80152a8:	1e43      	subs	r3, r0, #1
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	2b18      	cmp	r3, #24
 80152ae:	d830      	bhi.n	8015312 <__gethex+0x126>
 80152b0:	f1a0 0210 	sub.w	r2, r0, #16
 80152b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152b8:	f7ff ff82 	bl	80151c0 <__hexdig_fun>
 80152bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80152c0:	fa5f fc8c 	uxtb.w	ip, ip
 80152c4:	f1bc 0f18 	cmp.w	ip, #24
 80152c8:	f04f 030a 	mov.w	r3, #10
 80152cc:	d91e      	bls.n	801530c <__gethex+0x120>
 80152ce:	b104      	cbz	r4, 80152d2 <__gethex+0xe6>
 80152d0:	4252      	negs	r2, r2
 80152d2:	4417      	add	r7, r2
 80152d4:	f8ca 1000 	str.w	r1, [sl]
 80152d8:	b1ed      	cbz	r5, 8015316 <__gethex+0x12a>
 80152da:	f1bb 0f00 	cmp.w	fp, #0
 80152de:	bf0c      	ite	eq
 80152e0:	2506      	moveq	r5, #6
 80152e2:	2500      	movne	r5, #0
 80152e4:	4628      	mov	r0, r5
 80152e6:	b005      	add	sp, #20
 80152e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ec:	2500      	movs	r5, #0
 80152ee:	462c      	mov	r4, r5
 80152f0:	e7b0      	b.n	8015254 <__gethex+0x68>
 80152f2:	2c00      	cmp	r4, #0
 80152f4:	d1c7      	bne.n	8015286 <__gethex+0x9a>
 80152f6:	4627      	mov	r7, r4
 80152f8:	e7c7      	b.n	801528a <__gethex+0x9e>
 80152fa:	464e      	mov	r6, r9
 80152fc:	462f      	mov	r7, r5
 80152fe:	2501      	movs	r5, #1
 8015300:	e7c3      	b.n	801528a <__gethex+0x9e>
 8015302:	2400      	movs	r4, #0
 8015304:	1cb1      	adds	r1, r6, #2
 8015306:	e7cc      	b.n	80152a2 <__gethex+0xb6>
 8015308:	2401      	movs	r4, #1
 801530a:	e7fb      	b.n	8015304 <__gethex+0x118>
 801530c:	fb03 0002 	mla	r0, r3, r2, r0
 8015310:	e7ce      	b.n	80152b0 <__gethex+0xc4>
 8015312:	4631      	mov	r1, r6
 8015314:	e7de      	b.n	80152d4 <__gethex+0xe8>
 8015316:	eba6 0309 	sub.w	r3, r6, r9
 801531a:	3b01      	subs	r3, #1
 801531c:	4629      	mov	r1, r5
 801531e:	2b07      	cmp	r3, #7
 8015320:	dc0a      	bgt.n	8015338 <__gethex+0x14c>
 8015322:	9801      	ldr	r0, [sp, #4]
 8015324:	f7fd fc4a 	bl	8012bbc <_Balloc>
 8015328:	4604      	mov	r4, r0
 801532a:	b940      	cbnz	r0, 801533e <__gethex+0x152>
 801532c:	4b5c      	ldr	r3, [pc, #368]	@ (80154a0 <__gethex+0x2b4>)
 801532e:	4602      	mov	r2, r0
 8015330:	21e4      	movs	r1, #228	@ 0xe4
 8015332:	485c      	ldr	r0, [pc, #368]	@ (80154a4 <__gethex+0x2b8>)
 8015334:	f7ff fec0 	bl	80150b8 <__assert_func>
 8015338:	3101      	adds	r1, #1
 801533a:	105b      	asrs	r3, r3, #1
 801533c:	e7ef      	b.n	801531e <__gethex+0x132>
 801533e:	f100 0a14 	add.w	sl, r0, #20
 8015342:	2300      	movs	r3, #0
 8015344:	4655      	mov	r5, sl
 8015346:	469b      	mov	fp, r3
 8015348:	45b1      	cmp	r9, r6
 801534a:	d337      	bcc.n	80153bc <__gethex+0x1d0>
 801534c:	f845 bb04 	str.w	fp, [r5], #4
 8015350:	eba5 050a 	sub.w	r5, r5, sl
 8015354:	10ad      	asrs	r5, r5, #2
 8015356:	6125      	str	r5, [r4, #16]
 8015358:	4658      	mov	r0, fp
 801535a:	f7fd fd21 	bl	8012da0 <__hi0bits>
 801535e:	016d      	lsls	r5, r5, #5
 8015360:	f8d8 6000 	ldr.w	r6, [r8]
 8015364:	1a2d      	subs	r5, r5, r0
 8015366:	42b5      	cmp	r5, r6
 8015368:	dd54      	ble.n	8015414 <__gethex+0x228>
 801536a:	1bad      	subs	r5, r5, r6
 801536c:	4629      	mov	r1, r5
 801536e:	4620      	mov	r0, r4
 8015370:	f7fe f8b2 	bl	80134d8 <__any_on>
 8015374:	4681      	mov	r9, r0
 8015376:	b178      	cbz	r0, 8015398 <__gethex+0x1ac>
 8015378:	1e6b      	subs	r3, r5, #1
 801537a:	1159      	asrs	r1, r3, #5
 801537c:	f003 021f 	and.w	r2, r3, #31
 8015380:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015384:	f04f 0901 	mov.w	r9, #1
 8015388:	fa09 f202 	lsl.w	r2, r9, r2
 801538c:	420a      	tst	r2, r1
 801538e:	d003      	beq.n	8015398 <__gethex+0x1ac>
 8015390:	454b      	cmp	r3, r9
 8015392:	dc36      	bgt.n	8015402 <__gethex+0x216>
 8015394:	f04f 0902 	mov.w	r9, #2
 8015398:	4629      	mov	r1, r5
 801539a:	4620      	mov	r0, r4
 801539c:	f7ff febe 	bl	801511c <rshift>
 80153a0:	442f      	add	r7, r5
 80153a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153a6:	42bb      	cmp	r3, r7
 80153a8:	da42      	bge.n	8015430 <__gethex+0x244>
 80153aa:	9801      	ldr	r0, [sp, #4]
 80153ac:	4621      	mov	r1, r4
 80153ae:	f7fd fc45 	bl	8012c3c <_Bfree>
 80153b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80153b4:	2300      	movs	r3, #0
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	25a3      	movs	r5, #163	@ 0xa3
 80153ba:	e793      	b.n	80152e4 <__gethex+0xf8>
 80153bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80153c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80153c2:	d012      	beq.n	80153ea <__gethex+0x1fe>
 80153c4:	2b20      	cmp	r3, #32
 80153c6:	d104      	bne.n	80153d2 <__gethex+0x1e6>
 80153c8:	f845 bb04 	str.w	fp, [r5], #4
 80153cc:	f04f 0b00 	mov.w	fp, #0
 80153d0:	465b      	mov	r3, fp
 80153d2:	7830      	ldrb	r0, [r6, #0]
 80153d4:	9303      	str	r3, [sp, #12]
 80153d6:	f7ff fef3 	bl	80151c0 <__hexdig_fun>
 80153da:	9b03      	ldr	r3, [sp, #12]
 80153dc:	f000 000f 	and.w	r0, r0, #15
 80153e0:	4098      	lsls	r0, r3
 80153e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80153e6:	3304      	adds	r3, #4
 80153e8:	e7ae      	b.n	8015348 <__gethex+0x15c>
 80153ea:	45b1      	cmp	r9, r6
 80153ec:	d8ea      	bhi.n	80153c4 <__gethex+0x1d8>
 80153ee:	492b      	ldr	r1, [pc, #172]	@ (801549c <__gethex+0x2b0>)
 80153f0:	9303      	str	r3, [sp, #12]
 80153f2:	2201      	movs	r2, #1
 80153f4:	4630      	mov	r0, r6
 80153f6:	f7ff fe12 	bl	801501e <strncmp>
 80153fa:	9b03      	ldr	r3, [sp, #12]
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d1e1      	bne.n	80153c4 <__gethex+0x1d8>
 8015400:	e7a2      	b.n	8015348 <__gethex+0x15c>
 8015402:	1ea9      	subs	r1, r5, #2
 8015404:	4620      	mov	r0, r4
 8015406:	f7fe f867 	bl	80134d8 <__any_on>
 801540a:	2800      	cmp	r0, #0
 801540c:	d0c2      	beq.n	8015394 <__gethex+0x1a8>
 801540e:	f04f 0903 	mov.w	r9, #3
 8015412:	e7c1      	b.n	8015398 <__gethex+0x1ac>
 8015414:	da09      	bge.n	801542a <__gethex+0x23e>
 8015416:	1b75      	subs	r5, r6, r5
 8015418:	4621      	mov	r1, r4
 801541a:	9801      	ldr	r0, [sp, #4]
 801541c:	462a      	mov	r2, r5
 801541e:	f7fd fe25 	bl	801306c <__lshift>
 8015422:	1b7f      	subs	r7, r7, r5
 8015424:	4604      	mov	r4, r0
 8015426:	f100 0a14 	add.w	sl, r0, #20
 801542a:	f04f 0900 	mov.w	r9, #0
 801542e:	e7b8      	b.n	80153a2 <__gethex+0x1b6>
 8015430:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015434:	42bd      	cmp	r5, r7
 8015436:	dd6f      	ble.n	8015518 <__gethex+0x32c>
 8015438:	1bed      	subs	r5, r5, r7
 801543a:	42ae      	cmp	r6, r5
 801543c:	dc34      	bgt.n	80154a8 <__gethex+0x2bc>
 801543e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015442:	2b02      	cmp	r3, #2
 8015444:	d022      	beq.n	801548c <__gethex+0x2a0>
 8015446:	2b03      	cmp	r3, #3
 8015448:	d024      	beq.n	8015494 <__gethex+0x2a8>
 801544a:	2b01      	cmp	r3, #1
 801544c:	d115      	bne.n	801547a <__gethex+0x28e>
 801544e:	42ae      	cmp	r6, r5
 8015450:	d113      	bne.n	801547a <__gethex+0x28e>
 8015452:	2e01      	cmp	r6, #1
 8015454:	d10b      	bne.n	801546e <__gethex+0x282>
 8015456:	9a02      	ldr	r2, [sp, #8]
 8015458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801545c:	6013      	str	r3, [r2, #0]
 801545e:	2301      	movs	r3, #1
 8015460:	6123      	str	r3, [r4, #16]
 8015462:	f8ca 3000 	str.w	r3, [sl]
 8015466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015468:	2562      	movs	r5, #98	@ 0x62
 801546a:	601c      	str	r4, [r3, #0]
 801546c:	e73a      	b.n	80152e4 <__gethex+0xf8>
 801546e:	1e71      	subs	r1, r6, #1
 8015470:	4620      	mov	r0, r4
 8015472:	f7fe f831 	bl	80134d8 <__any_on>
 8015476:	2800      	cmp	r0, #0
 8015478:	d1ed      	bne.n	8015456 <__gethex+0x26a>
 801547a:	9801      	ldr	r0, [sp, #4]
 801547c:	4621      	mov	r1, r4
 801547e:	f7fd fbdd 	bl	8012c3c <_Bfree>
 8015482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015484:	2300      	movs	r3, #0
 8015486:	6013      	str	r3, [r2, #0]
 8015488:	2550      	movs	r5, #80	@ 0x50
 801548a:	e72b      	b.n	80152e4 <__gethex+0xf8>
 801548c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801548e:	2b00      	cmp	r3, #0
 8015490:	d1f3      	bne.n	801547a <__gethex+0x28e>
 8015492:	e7e0      	b.n	8015456 <__gethex+0x26a>
 8015494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015496:	2b00      	cmp	r3, #0
 8015498:	d1dd      	bne.n	8015456 <__gethex+0x26a>
 801549a:	e7ee      	b.n	801547a <__gethex+0x28e>
 801549c:	08017150 	.word	0x08017150
 80154a0:	08016fe7 	.word	0x08016fe7
 80154a4:	08017319 	.word	0x08017319
 80154a8:	1e6f      	subs	r7, r5, #1
 80154aa:	f1b9 0f00 	cmp.w	r9, #0
 80154ae:	d130      	bne.n	8015512 <__gethex+0x326>
 80154b0:	b127      	cbz	r7, 80154bc <__gethex+0x2d0>
 80154b2:	4639      	mov	r1, r7
 80154b4:	4620      	mov	r0, r4
 80154b6:	f7fe f80f 	bl	80134d8 <__any_on>
 80154ba:	4681      	mov	r9, r0
 80154bc:	117a      	asrs	r2, r7, #5
 80154be:	2301      	movs	r3, #1
 80154c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80154c4:	f007 071f 	and.w	r7, r7, #31
 80154c8:	40bb      	lsls	r3, r7
 80154ca:	4213      	tst	r3, r2
 80154cc:	4629      	mov	r1, r5
 80154ce:	4620      	mov	r0, r4
 80154d0:	bf18      	it	ne
 80154d2:	f049 0902 	orrne.w	r9, r9, #2
 80154d6:	f7ff fe21 	bl	801511c <rshift>
 80154da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80154de:	1b76      	subs	r6, r6, r5
 80154e0:	2502      	movs	r5, #2
 80154e2:	f1b9 0f00 	cmp.w	r9, #0
 80154e6:	d047      	beq.n	8015578 <__gethex+0x38c>
 80154e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154ec:	2b02      	cmp	r3, #2
 80154ee:	d015      	beq.n	801551c <__gethex+0x330>
 80154f0:	2b03      	cmp	r3, #3
 80154f2:	d017      	beq.n	8015524 <__gethex+0x338>
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	d109      	bne.n	801550c <__gethex+0x320>
 80154f8:	f019 0f02 	tst.w	r9, #2
 80154fc:	d006      	beq.n	801550c <__gethex+0x320>
 80154fe:	f8da 3000 	ldr.w	r3, [sl]
 8015502:	ea49 0903 	orr.w	r9, r9, r3
 8015506:	f019 0f01 	tst.w	r9, #1
 801550a:	d10e      	bne.n	801552a <__gethex+0x33e>
 801550c:	f045 0510 	orr.w	r5, r5, #16
 8015510:	e032      	b.n	8015578 <__gethex+0x38c>
 8015512:	f04f 0901 	mov.w	r9, #1
 8015516:	e7d1      	b.n	80154bc <__gethex+0x2d0>
 8015518:	2501      	movs	r5, #1
 801551a:	e7e2      	b.n	80154e2 <__gethex+0x2f6>
 801551c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801551e:	f1c3 0301 	rsb	r3, r3, #1
 8015522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015526:	2b00      	cmp	r3, #0
 8015528:	d0f0      	beq.n	801550c <__gethex+0x320>
 801552a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801552e:	f104 0314 	add.w	r3, r4, #20
 8015532:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015536:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801553a:	f04f 0c00 	mov.w	ip, #0
 801553e:	4618      	mov	r0, r3
 8015540:	f853 2b04 	ldr.w	r2, [r3], #4
 8015544:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015548:	d01b      	beq.n	8015582 <__gethex+0x396>
 801554a:	3201      	adds	r2, #1
 801554c:	6002      	str	r2, [r0, #0]
 801554e:	2d02      	cmp	r5, #2
 8015550:	f104 0314 	add.w	r3, r4, #20
 8015554:	d13c      	bne.n	80155d0 <__gethex+0x3e4>
 8015556:	f8d8 2000 	ldr.w	r2, [r8]
 801555a:	3a01      	subs	r2, #1
 801555c:	42b2      	cmp	r2, r6
 801555e:	d109      	bne.n	8015574 <__gethex+0x388>
 8015560:	1171      	asrs	r1, r6, #5
 8015562:	2201      	movs	r2, #1
 8015564:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015568:	f006 061f 	and.w	r6, r6, #31
 801556c:	fa02 f606 	lsl.w	r6, r2, r6
 8015570:	421e      	tst	r6, r3
 8015572:	d13a      	bne.n	80155ea <__gethex+0x3fe>
 8015574:	f045 0520 	orr.w	r5, r5, #32
 8015578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801557a:	601c      	str	r4, [r3, #0]
 801557c:	9b02      	ldr	r3, [sp, #8]
 801557e:	601f      	str	r7, [r3, #0]
 8015580:	e6b0      	b.n	80152e4 <__gethex+0xf8>
 8015582:	4299      	cmp	r1, r3
 8015584:	f843 cc04 	str.w	ip, [r3, #-4]
 8015588:	d8d9      	bhi.n	801553e <__gethex+0x352>
 801558a:	68a3      	ldr	r3, [r4, #8]
 801558c:	459b      	cmp	fp, r3
 801558e:	db17      	blt.n	80155c0 <__gethex+0x3d4>
 8015590:	6861      	ldr	r1, [r4, #4]
 8015592:	9801      	ldr	r0, [sp, #4]
 8015594:	3101      	adds	r1, #1
 8015596:	f7fd fb11 	bl	8012bbc <_Balloc>
 801559a:	4681      	mov	r9, r0
 801559c:	b918      	cbnz	r0, 80155a6 <__gethex+0x3ba>
 801559e:	4b1a      	ldr	r3, [pc, #104]	@ (8015608 <__gethex+0x41c>)
 80155a0:	4602      	mov	r2, r0
 80155a2:	2184      	movs	r1, #132	@ 0x84
 80155a4:	e6c5      	b.n	8015332 <__gethex+0x146>
 80155a6:	6922      	ldr	r2, [r4, #16]
 80155a8:	3202      	adds	r2, #2
 80155aa:	f104 010c 	add.w	r1, r4, #12
 80155ae:	0092      	lsls	r2, r2, #2
 80155b0:	300c      	adds	r0, #12
 80155b2:	f7fc fc10 	bl	8011dd6 <memcpy>
 80155b6:	4621      	mov	r1, r4
 80155b8:	9801      	ldr	r0, [sp, #4]
 80155ba:	f7fd fb3f 	bl	8012c3c <_Bfree>
 80155be:	464c      	mov	r4, r9
 80155c0:	6923      	ldr	r3, [r4, #16]
 80155c2:	1c5a      	adds	r2, r3, #1
 80155c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80155c8:	6122      	str	r2, [r4, #16]
 80155ca:	2201      	movs	r2, #1
 80155cc:	615a      	str	r2, [r3, #20]
 80155ce:	e7be      	b.n	801554e <__gethex+0x362>
 80155d0:	6922      	ldr	r2, [r4, #16]
 80155d2:	455a      	cmp	r2, fp
 80155d4:	dd0b      	ble.n	80155ee <__gethex+0x402>
 80155d6:	2101      	movs	r1, #1
 80155d8:	4620      	mov	r0, r4
 80155da:	f7ff fd9f 	bl	801511c <rshift>
 80155de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80155e2:	3701      	adds	r7, #1
 80155e4:	42bb      	cmp	r3, r7
 80155e6:	f6ff aee0 	blt.w	80153aa <__gethex+0x1be>
 80155ea:	2501      	movs	r5, #1
 80155ec:	e7c2      	b.n	8015574 <__gethex+0x388>
 80155ee:	f016 061f 	ands.w	r6, r6, #31
 80155f2:	d0fa      	beq.n	80155ea <__gethex+0x3fe>
 80155f4:	4453      	add	r3, sl
 80155f6:	f1c6 0620 	rsb	r6, r6, #32
 80155fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80155fe:	f7fd fbcf 	bl	8012da0 <__hi0bits>
 8015602:	42b0      	cmp	r0, r6
 8015604:	dbe7      	blt.n	80155d6 <__gethex+0x3ea>
 8015606:	e7f0      	b.n	80155ea <__gethex+0x3fe>
 8015608:	08016fe7 	.word	0x08016fe7

0801560c <L_shift>:
 801560c:	f1c2 0208 	rsb	r2, r2, #8
 8015610:	0092      	lsls	r2, r2, #2
 8015612:	b570      	push	{r4, r5, r6, lr}
 8015614:	f1c2 0620 	rsb	r6, r2, #32
 8015618:	6843      	ldr	r3, [r0, #4]
 801561a:	6804      	ldr	r4, [r0, #0]
 801561c:	fa03 f506 	lsl.w	r5, r3, r6
 8015620:	432c      	orrs	r4, r5
 8015622:	40d3      	lsrs	r3, r2
 8015624:	6004      	str	r4, [r0, #0]
 8015626:	f840 3f04 	str.w	r3, [r0, #4]!
 801562a:	4288      	cmp	r0, r1
 801562c:	d3f4      	bcc.n	8015618 <L_shift+0xc>
 801562e:	bd70      	pop	{r4, r5, r6, pc}

08015630 <__match>:
 8015630:	b530      	push	{r4, r5, lr}
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	3301      	adds	r3, #1
 8015636:	f811 4b01 	ldrb.w	r4, [r1], #1
 801563a:	b914      	cbnz	r4, 8015642 <__match+0x12>
 801563c:	6003      	str	r3, [r0, #0]
 801563e:	2001      	movs	r0, #1
 8015640:	bd30      	pop	{r4, r5, pc}
 8015642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015646:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801564a:	2d19      	cmp	r5, #25
 801564c:	bf98      	it	ls
 801564e:	3220      	addls	r2, #32
 8015650:	42a2      	cmp	r2, r4
 8015652:	d0f0      	beq.n	8015636 <__match+0x6>
 8015654:	2000      	movs	r0, #0
 8015656:	e7f3      	b.n	8015640 <__match+0x10>

08015658 <__hexnan>:
 8015658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565c:	680b      	ldr	r3, [r1, #0]
 801565e:	6801      	ldr	r1, [r0, #0]
 8015660:	115e      	asrs	r6, r3, #5
 8015662:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015666:	f013 031f 	ands.w	r3, r3, #31
 801566a:	b087      	sub	sp, #28
 801566c:	bf18      	it	ne
 801566e:	3604      	addne	r6, #4
 8015670:	2500      	movs	r5, #0
 8015672:	1f37      	subs	r7, r6, #4
 8015674:	4682      	mov	sl, r0
 8015676:	4690      	mov	r8, r2
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	f846 5c04 	str.w	r5, [r6, #-4]
 801567e:	46b9      	mov	r9, r7
 8015680:	463c      	mov	r4, r7
 8015682:	9502      	str	r5, [sp, #8]
 8015684:	46ab      	mov	fp, r5
 8015686:	784a      	ldrb	r2, [r1, #1]
 8015688:	1c4b      	adds	r3, r1, #1
 801568a:	9303      	str	r3, [sp, #12]
 801568c:	b342      	cbz	r2, 80156e0 <__hexnan+0x88>
 801568e:	4610      	mov	r0, r2
 8015690:	9105      	str	r1, [sp, #20]
 8015692:	9204      	str	r2, [sp, #16]
 8015694:	f7ff fd94 	bl	80151c0 <__hexdig_fun>
 8015698:	2800      	cmp	r0, #0
 801569a:	d151      	bne.n	8015740 <__hexnan+0xe8>
 801569c:	9a04      	ldr	r2, [sp, #16]
 801569e:	9905      	ldr	r1, [sp, #20]
 80156a0:	2a20      	cmp	r2, #32
 80156a2:	d818      	bhi.n	80156d6 <__hexnan+0x7e>
 80156a4:	9b02      	ldr	r3, [sp, #8]
 80156a6:	459b      	cmp	fp, r3
 80156a8:	dd13      	ble.n	80156d2 <__hexnan+0x7a>
 80156aa:	454c      	cmp	r4, r9
 80156ac:	d206      	bcs.n	80156bc <__hexnan+0x64>
 80156ae:	2d07      	cmp	r5, #7
 80156b0:	dc04      	bgt.n	80156bc <__hexnan+0x64>
 80156b2:	462a      	mov	r2, r5
 80156b4:	4649      	mov	r1, r9
 80156b6:	4620      	mov	r0, r4
 80156b8:	f7ff ffa8 	bl	801560c <L_shift>
 80156bc:	4544      	cmp	r4, r8
 80156be:	d952      	bls.n	8015766 <__hexnan+0x10e>
 80156c0:	2300      	movs	r3, #0
 80156c2:	f1a4 0904 	sub.w	r9, r4, #4
 80156c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80156ca:	f8cd b008 	str.w	fp, [sp, #8]
 80156ce:	464c      	mov	r4, r9
 80156d0:	461d      	mov	r5, r3
 80156d2:	9903      	ldr	r1, [sp, #12]
 80156d4:	e7d7      	b.n	8015686 <__hexnan+0x2e>
 80156d6:	2a29      	cmp	r2, #41	@ 0x29
 80156d8:	d157      	bne.n	801578a <__hexnan+0x132>
 80156da:	3102      	adds	r1, #2
 80156dc:	f8ca 1000 	str.w	r1, [sl]
 80156e0:	f1bb 0f00 	cmp.w	fp, #0
 80156e4:	d051      	beq.n	801578a <__hexnan+0x132>
 80156e6:	454c      	cmp	r4, r9
 80156e8:	d206      	bcs.n	80156f8 <__hexnan+0xa0>
 80156ea:	2d07      	cmp	r5, #7
 80156ec:	dc04      	bgt.n	80156f8 <__hexnan+0xa0>
 80156ee:	462a      	mov	r2, r5
 80156f0:	4649      	mov	r1, r9
 80156f2:	4620      	mov	r0, r4
 80156f4:	f7ff ff8a 	bl	801560c <L_shift>
 80156f8:	4544      	cmp	r4, r8
 80156fa:	d936      	bls.n	801576a <__hexnan+0x112>
 80156fc:	f1a8 0204 	sub.w	r2, r8, #4
 8015700:	4623      	mov	r3, r4
 8015702:	f853 1b04 	ldr.w	r1, [r3], #4
 8015706:	f842 1f04 	str.w	r1, [r2, #4]!
 801570a:	429f      	cmp	r7, r3
 801570c:	d2f9      	bcs.n	8015702 <__hexnan+0xaa>
 801570e:	1b3b      	subs	r3, r7, r4
 8015710:	f023 0303 	bic.w	r3, r3, #3
 8015714:	3304      	adds	r3, #4
 8015716:	3401      	adds	r4, #1
 8015718:	3e03      	subs	r6, #3
 801571a:	42b4      	cmp	r4, r6
 801571c:	bf88      	it	hi
 801571e:	2304      	movhi	r3, #4
 8015720:	4443      	add	r3, r8
 8015722:	2200      	movs	r2, #0
 8015724:	f843 2b04 	str.w	r2, [r3], #4
 8015728:	429f      	cmp	r7, r3
 801572a:	d2fb      	bcs.n	8015724 <__hexnan+0xcc>
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	b91b      	cbnz	r3, 8015738 <__hexnan+0xe0>
 8015730:	4547      	cmp	r7, r8
 8015732:	d128      	bne.n	8015786 <__hexnan+0x12e>
 8015734:	2301      	movs	r3, #1
 8015736:	603b      	str	r3, [r7, #0]
 8015738:	2005      	movs	r0, #5
 801573a:	b007      	add	sp, #28
 801573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015740:	3501      	adds	r5, #1
 8015742:	2d08      	cmp	r5, #8
 8015744:	f10b 0b01 	add.w	fp, fp, #1
 8015748:	dd06      	ble.n	8015758 <__hexnan+0x100>
 801574a:	4544      	cmp	r4, r8
 801574c:	d9c1      	bls.n	80156d2 <__hexnan+0x7a>
 801574e:	2300      	movs	r3, #0
 8015750:	f844 3c04 	str.w	r3, [r4, #-4]
 8015754:	2501      	movs	r5, #1
 8015756:	3c04      	subs	r4, #4
 8015758:	6822      	ldr	r2, [r4, #0]
 801575a:	f000 000f 	and.w	r0, r0, #15
 801575e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015762:	6020      	str	r0, [r4, #0]
 8015764:	e7b5      	b.n	80156d2 <__hexnan+0x7a>
 8015766:	2508      	movs	r5, #8
 8015768:	e7b3      	b.n	80156d2 <__hexnan+0x7a>
 801576a:	9b01      	ldr	r3, [sp, #4]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d0dd      	beq.n	801572c <__hexnan+0xd4>
 8015770:	f1c3 0320 	rsb	r3, r3, #32
 8015774:	f04f 32ff 	mov.w	r2, #4294967295
 8015778:	40da      	lsrs	r2, r3
 801577a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801577e:	4013      	ands	r3, r2
 8015780:	f846 3c04 	str.w	r3, [r6, #-4]
 8015784:	e7d2      	b.n	801572c <__hexnan+0xd4>
 8015786:	3f04      	subs	r7, #4
 8015788:	e7d0      	b.n	801572c <__hexnan+0xd4>
 801578a:	2004      	movs	r0, #4
 801578c:	e7d5      	b.n	801573a <__hexnan+0xe2>

0801578e <__ascii_mbtowc>:
 801578e:	b082      	sub	sp, #8
 8015790:	b901      	cbnz	r1, 8015794 <__ascii_mbtowc+0x6>
 8015792:	a901      	add	r1, sp, #4
 8015794:	b142      	cbz	r2, 80157a8 <__ascii_mbtowc+0x1a>
 8015796:	b14b      	cbz	r3, 80157ac <__ascii_mbtowc+0x1e>
 8015798:	7813      	ldrb	r3, [r2, #0]
 801579a:	600b      	str	r3, [r1, #0]
 801579c:	7812      	ldrb	r2, [r2, #0]
 801579e:	1e10      	subs	r0, r2, #0
 80157a0:	bf18      	it	ne
 80157a2:	2001      	movne	r0, #1
 80157a4:	b002      	add	sp, #8
 80157a6:	4770      	bx	lr
 80157a8:	4610      	mov	r0, r2
 80157aa:	e7fb      	b.n	80157a4 <__ascii_mbtowc+0x16>
 80157ac:	f06f 0001 	mvn.w	r0, #1
 80157b0:	e7f8      	b.n	80157a4 <__ascii_mbtowc+0x16>

080157b2 <_realloc_r>:
 80157b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157b6:	4680      	mov	r8, r0
 80157b8:	4615      	mov	r5, r2
 80157ba:	460c      	mov	r4, r1
 80157bc:	b921      	cbnz	r1, 80157c8 <_realloc_r+0x16>
 80157be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157c2:	4611      	mov	r1, r2
 80157c4:	f7fd b96e 	b.w	8012aa4 <_malloc_r>
 80157c8:	b92a      	cbnz	r2, 80157d6 <_realloc_r+0x24>
 80157ca:	f7fd f8f7 	bl	80129bc <_free_r>
 80157ce:	2400      	movs	r4, #0
 80157d0:	4620      	mov	r0, r4
 80157d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d6:	f000 f8b2 	bl	801593e <_malloc_usable_size_r>
 80157da:	4285      	cmp	r5, r0
 80157dc:	4606      	mov	r6, r0
 80157de:	d802      	bhi.n	80157e6 <_realloc_r+0x34>
 80157e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80157e4:	d8f4      	bhi.n	80157d0 <_realloc_r+0x1e>
 80157e6:	4629      	mov	r1, r5
 80157e8:	4640      	mov	r0, r8
 80157ea:	f7fd f95b 	bl	8012aa4 <_malloc_r>
 80157ee:	4607      	mov	r7, r0
 80157f0:	2800      	cmp	r0, #0
 80157f2:	d0ec      	beq.n	80157ce <_realloc_r+0x1c>
 80157f4:	42b5      	cmp	r5, r6
 80157f6:	462a      	mov	r2, r5
 80157f8:	4621      	mov	r1, r4
 80157fa:	bf28      	it	cs
 80157fc:	4632      	movcs	r2, r6
 80157fe:	f7fc faea 	bl	8011dd6 <memcpy>
 8015802:	4621      	mov	r1, r4
 8015804:	4640      	mov	r0, r8
 8015806:	f7fd f8d9 	bl	80129bc <_free_r>
 801580a:	463c      	mov	r4, r7
 801580c:	e7e0      	b.n	80157d0 <_realloc_r+0x1e>
	...

08015810 <_strtoul_l.constprop.0>:
 8015810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015814:	4e34      	ldr	r6, [pc, #208]	@ (80158e8 <_strtoul_l.constprop.0+0xd8>)
 8015816:	4686      	mov	lr, r0
 8015818:	460d      	mov	r5, r1
 801581a:	4628      	mov	r0, r5
 801581c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015820:	5d37      	ldrb	r7, [r6, r4]
 8015822:	f017 0708 	ands.w	r7, r7, #8
 8015826:	d1f8      	bne.n	801581a <_strtoul_l.constprop.0+0xa>
 8015828:	2c2d      	cmp	r4, #45	@ 0x2d
 801582a:	d12f      	bne.n	801588c <_strtoul_l.constprop.0+0x7c>
 801582c:	782c      	ldrb	r4, [r5, #0]
 801582e:	2701      	movs	r7, #1
 8015830:	1c85      	adds	r5, r0, #2
 8015832:	f033 0010 	bics.w	r0, r3, #16
 8015836:	d109      	bne.n	801584c <_strtoul_l.constprop.0+0x3c>
 8015838:	2c30      	cmp	r4, #48	@ 0x30
 801583a:	d12c      	bne.n	8015896 <_strtoul_l.constprop.0+0x86>
 801583c:	7828      	ldrb	r0, [r5, #0]
 801583e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015842:	2858      	cmp	r0, #88	@ 0x58
 8015844:	d127      	bne.n	8015896 <_strtoul_l.constprop.0+0x86>
 8015846:	786c      	ldrb	r4, [r5, #1]
 8015848:	2310      	movs	r3, #16
 801584a:	3502      	adds	r5, #2
 801584c:	f04f 38ff 	mov.w	r8, #4294967295
 8015850:	2600      	movs	r6, #0
 8015852:	fbb8 f8f3 	udiv	r8, r8, r3
 8015856:	fb03 f908 	mul.w	r9, r3, r8
 801585a:	ea6f 0909 	mvn.w	r9, r9
 801585e:	4630      	mov	r0, r6
 8015860:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015864:	f1bc 0f09 	cmp.w	ip, #9
 8015868:	d81c      	bhi.n	80158a4 <_strtoul_l.constprop.0+0x94>
 801586a:	4664      	mov	r4, ip
 801586c:	42a3      	cmp	r3, r4
 801586e:	dd2a      	ble.n	80158c6 <_strtoul_l.constprop.0+0xb6>
 8015870:	f1b6 3fff 	cmp.w	r6, #4294967295
 8015874:	d007      	beq.n	8015886 <_strtoul_l.constprop.0+0x76>
 8015876:	4580      	cmp	r8, r0
 8015878:	d322      	bcc.n	80158c0 <_strtoul_l.constprop.0+0xb0>
 801587a:	d101      	bne.n	8015880 <_strtoul_l.constprop.0+0x70>
 801587c:	45a1      	cmp	r9, r4
 801587e:	db1f      	blt.n	80158c0 <_strtoul_l.constprop.0+0xb0>
 8015880:	fb00 4003 	mla	r0, r0, r3, r4
 8015884:	2601      	movs	r6, #1
 8015886:	f815 4b01 	ldrb.w	r4, [r5], #1
 801588a:	e7e9      	b.n	8015860 <_strtoul_l.constprop.0+0x50>
 801588c:	2c2b      	cmp	r4, #43	@ 0x2b
 801588e:	bf04      	itt	eq
 8015890:	782c      	ldrbeq	r4, [r5, #0]
 8015892:	1c85      	addeq	r5, r0, #2
 8015894:	e7cd      	b.n	8015832 <_strtoul_l.constprop.0+0x22>
 8015896:	2b00      	cmp	r3, #0
 8015898:	d1d8      	bne.n	801584c <_strtoul_l.constprop.0+0x3c>
 801589a:	2c30      	cmp	r4, #48	@ 0x30
 801589c:	bf0c      	ite	eq
 801589e:	2308      	moveq	r3, #8
 80158a0:	230a      	movne	r3, #10
 80158a2:	e7d3      	b.n	801584c <_strtoul_l.constprop.0+0x3c>
 80158a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80158a8:	f1bc 0f19 	cmp.w	ip, #25
 80158ac:	d801      	bhi.n	80158b2 <_strtoul_l.constprop.0+0xa2>
 80158ae:	3c37      	subs	r4, #55	@ 0x37
 80158b0:	e7dc      	b.n	801586c <_strtoul_l.constprop.0+0x5c>
 80158b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80158b6:	f1bc 0f19 	cmp.w	ip, #25
 80158ba:	d804      	bhi.n	80158c6 <_strtoul_l.constprop.0+0xb6>
 80158bc:	3c57      	subs	r4, #87	@ 0x57
 80158be:	e7d5      	b.n	801586c <_strtoul_l.constprop.0+0x5c>
 80158c0:	f04f 36ff 	mov.w	r6, #4294967295
 80158c4:	e7df      	b.n	8015886 <_strtoul_l.constprop.0+0x76>
 80158c6:	1c73      	adds	r3, r6, #1
 80158c8:	d106      	bne.n	80158d8 <_strtoul_l.constprop.0+0xc8>
 80158ca:	2322      	movs	r3, #34	@ 0x22
 80158cc:	f8ce 3000 	str.w	r3, [lr]
 80158d0:	4630      	mov	r0, r6
 80158d2:	b932      	cbnz	r2, 80158e2 <_strtoul_l.constprop.0+0xd2>
 80158d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158d8:	b107      	cbz	r7, 80158dc <_strtoul_l.constprop.0+0xcc>
 80158da:	4240      	negs	r0, r0
 80158dc:	2a00      	cmp	r2, #0
 80158de:	d0f9      	beq.n	80158d4 <_strtoul_l.constprop.0+0xc4>
 80158e0:	b106      	cbz	r6, 80158e4 <_strtoul_l.constprop.0+0xd4>
 80158e2:	1e69      	subs	r1, r5, #1
 80158e4:	6011      	str	r1, [r2, #0]
 80158e6:	e7f5      	b.n	80158d4 <_strtoul_l.constprop.0+0xc4>
 80158e8:	080171a9 	.word	0x080171a9

080158ec <_strtoul_r>:
 80158ec:	f7ff bf90 	b.w	8015810 <_strtoul_l.constprop.0>

080158f0 <__ascii_wctomb>:
 80158f0:	4603      	mov	r3, r0
 80158f2:	4608      	mov	r0, r1
 80158f4:	b141      	cbz	r1, 8015908 <__ascii_wctomb+0x18>
 80158f6:	2aff      	cmp	r2, #255	@ 0xff
 80158f8:	d904      	bls.n	8015904 <__ascii_wctomb+0x14>
 80158fa:	228a      	movs	r2, #138	@ 0x8a
 80158fc:	601a      	str	r2, [r3, #0]
 80158fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015902:	4770      	bx	lr
 8015904:	700a      	strb	r2, [r1, #0]
 8015906:	2001      	movs	r0, #1
 8015908:	4770      	bx	lr
	...

0801590c <fiprintf>:
 801590c:	b40e      	push	{r1, r2, r3}
 801590e:	b503      	push	{r0, r1, lr}
 8015910:	4601      	mov	r1, r0
 8015912:	ab03      	add	r3, sp, #12
 8015914:	4805      	ldr	r0, [pc, #20]	@ (801592c <fiprintf+0x20>)
 8015916:	f853 2b04 	ldr.w	r2, [r3], #4
 801591a:	6800      	ldr	r0, [r0, #0]
 801591c:	9301      	str	r3, [sp, #4]
 801591e:	f7fe ff7d 	bl	801481c <_vfiprintf_r>
 8015922:	b002      	add	sp, #8
 8015924:	f85d eb04 	ldr.w	lr, [sp], #4
 8015928:	b003      	add	sp, #12
 801592a:	4770      	bx	lr
 801592c:	2400002c 	.word	0x2400002c

08015930 <abort>:
 8015930:	b508      	push	{r3, lr}
 8015932:	2006      	movs	r0, #6
 8015934:	f000 f834 	bl	80159a0 <raise>
 8015938:	2001      	movs	r0, #1
 801593a:	f7ee ff49 	bl	80047d0 <_exit>

0801593e <_malloc_usable_size_r>:
 801593e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015942:	1f18      	subs	r0, r3, #4
 8015944:	2b00      	cmp	r3, #0
 8015946:	bfbc      	itt	lt
 8015948:	580b      	ldrlt	r3, [r1, r0]
 801594a:	18c0      	addlt	r0, r0, r3
 801594c:	4770      	bx	lr

0801594e <_raise_r>:
 801594e:	291f      	cmp	r1, #31
 8015950:	b538      	push	{r3, r4, r5, lr}
 8015952:	4605      	mov	r5, r0
 8015954:	460c      	mov	r4, r1
 8015956:	d904      	bls.n	8015962 <_raise_r+0x14>
 8015958:	2316      	movs	r3, #22
 801595a:	6003      	str	r3, [r0, #0]
 801595c:	f04f 30ff 	mov.w	r0, #4294967295
 8015960:	bd38      	pop	{r3, r4, r5, pc}
 8015962:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015964:	b112      	cbz	r2, 801596c <_raise_r+0x1e>
 8015966:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801596a:	b94b      	cbnz	r3, 8015980 <_raise_r+0x32>
 801596c:	4628      	mov	r0, r5
 801596e:	f000 f831 	bl	80159d4 <_getpid_r>
 8015972:	4622      	mov	r2, r4
 8015974:	4601      	mov	r1, r0
 8015976:	4628      	mov	r0, r5
 8015978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801597c:	f000 b818 	b.w	80159b0 <_kill_r>
 8015980:	2b01      	cmp	r3, #1
 8015982:	d00a      	beq.n	801599a <_raise_r+0x4c>
 8015984:	1c59      	adds	r1, r3, #1
 8015986:	d103      	bne.n	8015990 <_raise_r+0x42>
 8015988:	2316      	movs	r3, #22
 801598a:	6003      	str	r3, [r0, #0]
 801598c:	2001      	movs	r0, #1
 801598e:	e7e7      	b.n	8015960 <_raise_r+0x12>
 8015990:	2100      	movs	r1, #0
 8015992:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015996:	4620      	mov	r0, r4
 8015998:	4798      	blx	r3
 801599a:	2000      	movs	r0, #0
 801599c:	e7e0      	b.n	8015960 <_raise_r+0x12>
	...

080159a0 <raise>:
 80159a0:	4b02      	ldr	r3, [pc, #8]	@ (80159ac <raise+0xc>)
 80159a2:	4601      	mov	r1, r0
 80159a4:	6818      	ldr	r0, [r3, #0]
 80159a6:	f7ff bfd2 	b.w	801594e <_raise_r>
 80159aa:	bf00      	nop
 80159ac:	2400002c 	.word	0x2400002c

080159b0 <_kill_r>:
 80159b0:	b538      	push	{r3, r4, r5, lr}
 80159b2:	4d07      	ldr	r5, [pc, #28]	@ (80159d0 <_kill_r+0x20>)
 80159b4:	2300      	movs	r3, #0
 80159b6:	4604      	mov	r4, r0
 80159b8:	4608      	mov	r0, r1
 80159ba:	4611      	mov	r1, r2
 80159bc:	602b      	str	r3, [r5, #0]
 80159be:	f7ee fef7 	bl	80047b0 <_kill>
 80159c2:	1c43      	adds	r3, r0, #1
 80159c4:	d102      	bne.n	80159cc <_kill_r+0x1c>
 80159c6:	682b      	ldr	r3, [r5, #0]
 80159c8:	b103      	cbz	r3, 80159cc <_kill_r+0x1c>
 80159ca:	6023      	str	r3, [r4, #0]
 80159cc:	bd38      	pop	{r3, r4, r5, pc}
 80159ce:	bf00      	nop
 80159d0:	24005248 	.word	0x24005248

080159d4 <_getpid_r>:
 80159d4:	f7ee bee4 	b.w	80047a0 <_getpid>

080159d8 <cos>:
 80159d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159da:	eeb0 7b40 	vmov.f64	d7, d0
 80159de:	ee17 3a90 	vmov	r3, s15
 80159e2:	4a21      	ldr	r2, [pc, #132]	@ (8015a68 <cos+0x90>)
 80159e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80159e8:	4293      	cmp	r3, r2
 80159ea:	d806      	bhi.n	80159fa <cos+0x22>
 80159ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015a60 <cos+0x88>
 80159f0:	b005      	add	sp, #20
 80159f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80159f6:	f000 b887 	b.w	8015b08 <__kernel_cos>
 80159fa:	4a1c      	ldr	r2, [pc, #112]	@ (8015a6c <cos+0x94>)
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d904      	bls.n	8015a0a <cos+0x32>
 8015a00:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015a04:	b005      	add	sp, #20
 8015a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a0a:	4668      	mov	r0, sp
 8015a0c:	f000 f93c 	bl	8015c88 <__ieee754_rem_pio2>
 8015a10:	f000 0003 	and.w	r0, r0, #3
 8015a14:	2801      	cmp	r0, #1
 8015a16:	d009      	beq.n	8015a2c <cos+0x54>
 8015a18:	2802      	cmp	r0, #2
 8015a1a:	d010      	beq.n	8015a3e <cos+0x66>
 8015a1c:	b9b0      	cbnz	r0, 8015a4c <cos+0x74>
 8015a1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a22:	ed9d 0b00 	vldr	d0, [sp]
 8015a26:	f000 f86f 	bl	8015b08 <__kernel_cos>
 8015a2a:	e7eb      	b.n	8015a04 <cos+0x2c>
 8015a2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a30:	ed9d 0b00 	vldr	d0, [sp]
 8015a34:	f000 f8d0 	bl	8015bd8 <__kernel_sin>
 8015a38:	eeb1 0b40 	vneg.f64	d0, d0
 8015a3c:	e7e2      	b.n	8015a04 <cos+0x2c>
 8015a3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a42:	ed9d 0b00 	vldr	d0, [sp]
 8015a46:	f000 f85f 	bl	8015b08 <__kernel_cos>
 8015a4a:	e7f5      	b.n	8015a38 <cos+0x60>
 8015a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a50:	ed9d 0b00 	vldr	d0, [sp]
 8015a54:	2001      	movs	r0, #1
 8015a56:	f000 f8bf 	bl	8015bd8 <__kernel_sin>
 8015a5a:	e7d3      	b.n	8015a04 <cos+0x2c>
 8015a5c:	f3af 8000 	nop.w
	...
 8015a68:	3fe921fb 	.word	0x3fe921fb
 8015a6c:	7fefffff 	.word	0x7fefffff

08015a70 <sin>:
 8015a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a72:	eeb0 7b40 	vmov.f64	d7, d0
 8015a76:	ee17 3a90 	vmov	r3, s15
 8015a7a:	4a21      	ldr	r2, [pc, #132]	@ (8015b00 <sin+0x90>)
 8015a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015a80:	4293      	cmp	r3, r2
 8015a82:	d807      	bhi.n	8015a94 <sin+0x24>
 8015a84:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015af8 <sin+0x88>
 8015a88:	2000      	movs	r0, #0
 8015a8a:	b005      	add	sp, #20
 8015a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a90:	f000 b8a2 	b.w	8015bd8 <__kernel_sin>
 8015a94:	4a1b      	ldr	r2, [pc, #108]	@ (8015b04 <sin+0x94>)
 8015a96:	4293      	cmp	r3, r2
 8015a98:	d904      	bls.n	8015aa4 <sin+0x34>
 8015a9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015a9e:	b005      	add	sp, #20
 8015aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015aa4:	4668      	mov	r0, sp
 8015aa6:	f000 f8ef 	bl	8015c88 <__ieee754_rem_pio2>
 8015aaa:	f000 0003 	and.w	r0, r0, #3
 8015aae:	2801      	cmp	r0, #1
 8015ab0:	d00a      	beq.n	8015ac8 <sin+0x58>
 8015ab2:	2802      	cmp	r0, #2
 8015ab4:	d00f      	beq.n	8015ad6 <sin+0x66>
 8015ab6:	b9c0      	cbnz	r0, 8015aea <sin+0x7a>
 8015ab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015abc:	ed9d 0b00 	vldr	d0, [sp]
 8015ac0:	2001      	movs	r0, #1
 8015ac2:	f000 f889 	bl	8015bd8 <__kernel_sin>
 8015ac6:	e7ea      	b.n	8015a9e <sin+0x2e>
 8015ac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015acc:	ed9d 0b00 	vldr	d0, [sp]
 8015ad0:	f000 f81a 	bl	8015b08 <__kernel_cos>
 8015ad4:	e7e3      	b.n	8015a9e <sin+0x2e>
 8015ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ada:	ed9d 0b00 	vldr	d0, [sp]
 8015ade:	2001      	movs	r0, #1
 8015ae0:	f000 f87a 	bl	8015bd8 <__kernel_sin>
 8015ae4:	eeb1 0b40 	vneg.f64	d0, d0
 8015ae8:	e7d9      	b.n	8015a9e <sin+0x2e>
 8015aea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015aee:	ed9d 0b00 	vldr	d0, [sp]
 8015af2:	f000 f809 	bl	8015b08 <__kernel_cos>
 8015af6:	e7f5      	b.n	8015ae4 <sin+0x74>
	...
 8015b00:	3fe921fb 	.word	0x3fe921fb
 8015b04:	7fefffff 	.word	0x7fefffff

08015b08 <__kernel_cos>:
 8015b08:	eeb0 5b40 	vmov.f64	d5, d0
 8015b0c:	ee15 1a90 	vmov	r1, s11
 8015b10:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015b14:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015b18:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015b1c:	d204      	bcs.n	8015b28 <__kernel_cos+0x20>
 8015b1e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8015b22:	ee17 3a90 	vmov	r3, s15
 8015b26:	b343      	cbz	r3, 8015b7a <__kernel_cos+0x72>
 8015b28:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015b2c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8015b30:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015ba0 <__kernel_cos+0x98>
 8015b34:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015ba8 <__kernel_cos+0xa0>
 8015b38:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015b3c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015bb0 <__kernel_cos+0xa8>
 8015b40:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015b44:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015bb8 <__kernel_cos+0xb0>
 8015b48:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015b4c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015bc0 <__kernel_cos+0xb8>
 8015b50:	4b1f      	ldr	r3, [pc, #124]	@ (8015bd0 <__kernel_cos+0xc8>)
 8015b52:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015b56:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015bc8 <__kernel_cos+0xc0>
 8015b5a:	4299      	cmp	r1, r3
 8015b5c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015b60:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015b64:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015b68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015b6c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015b70:	d804      	bhi.n	8015b7c <__kernel_cos+0x74>
 8015b72:	ee37 7b41 	vsub.f64	d7, d7, d1
 8015b76:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015b7a:	4770      	bx	lr
 8015b7c:	4b15      	ldr	r3, [pc, #84]	@ (8015bd4 <__kernel_cos+0xcc>)
 8015b7e:	4299      	cmp	r1, r3
 8015b80:	d809      	bhi.n	8015b96 <__kernel_cos+0x8e>
 8015b82:	2200      	movs	r2, #0
 8015b84:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015b88:	ec43 2b16 	vmov	d6, r2, r3
 8015b8c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015b90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b94:	e7ed      	b.n	8015b72 <__kernel_cos+0x6a>
 8015b96:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015b9a:	e7f7      	b.n	8015b8c <__kernel_cos+0x84>
 8015b9c:	f3af 8000 	nop.w
 8015ba0:	be8838d4 	.word	0xbe8838d4
 8015ba4:	bda8fae9 	.word	0xbda8fae9
 8015ba8:	bdb4b1c4 	.word	0xbdb4b1c4
 8015bac:	3e21ee9e 	.word	0x3e21ee9e
 8015bb0:	809c52ad 	.word	0x809c52ad
 8015bb4:	be927e4f 	.word	0xbe927e4f
 8015bb8:	19cb1590 	.word	0x19cb1590
 8015bbc:	3efa01a0 	.word	0x3efa01a0
 8015bc0:	16c15177 	.word	0x16c15177
 8015bc4:	bf56c16c 	.word	0xbf56c16c
 8015bc8:	5555554c 	.word	0x5555554c
 8015bcc:	3fa55555 	.word	0x3fa55555
 8015bd0:	3fd33332 	.word	0x3fd33332
 8015bd4:	3fe90000 	.word	0x3fe90000

08015bd8 <__kernel_sin>:
 8015bd8:	ee10 3a90 	vmov	r3, s1
 8015bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015be0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015be4:	d204      	bcs.n	8015bf0 <__kernel_sin+0x18>
 8015be6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015bea:	ee17 3a90 	vmov	r3, s15
 8015bee:	b35b      	cbz	r3, 8015c48 <__kernel_sin+0x70>
 8015bf0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015bf4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015bf8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015c50 <__kernel_sin+0x78>
 8015bfc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c58 <__kernel_sin+0x80>
 8015c00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015c04:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015c60 <__kernel_sin+0x88>
 8015c08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c0c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c68 <__kernel_sin+0x90>
 8015c10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015c14:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015c70 <__kernel_sin+0x98>
 8015c18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c1c:	b930      	cbnz	r0, 8015c2c <__kernel_sin+0x54>
 8015c1e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c78 <__kernel_sin+0xa0>
 8015c22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015c26:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015c2a:	4770      	bx	lr
 8015c2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015c30:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8015c34:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015c38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015c3c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015c80 <__kernel_sin+0xa8>
 8015c40:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015c44:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015c48:	4770      	bx	lr
 8015c4a:	bf00      	nop
 8015c4c:	f3af 8000 	nop.w
 8015c50:	5acfd57c 	.word	0x5acfd57c
 8015c54:	3de5d93a 	.word	0x3de5d93a
 8015c58:	8a2b9ceb 	.word	0x8a2b9ceb
 8015c5c:	be5ae5e6 	.word	0xbe5ae5e6
 8015c60:	57b1fe7d 	.word	0x57b1fe7d
 8015c64:	3ec71de3 	.word	0x3ec71de3
 8015c68:	19c161d5 	.word	0x19c161d5
 8015c6c:	bf2a01a0 	.word	0xbf2a01a0
 8015c70:	1110f8a6 	.word	0x1110f8a6
 8015c74:	3f811111 	.word	0x3f811111
 8015c78:	55555549 	.word	0x55555549
 8015c7c:	bfc55555 	.word	0xbfc55555
 8015c80:	55555549 	.word	0x55555549
 8015c84:	3fc55555 	.word	0x3fc55555

08015c88 <__ieee754_rem_pio2>:
 8015c88:	b570      	push	{r4, r5, r6, lr}
 8015c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8015c8e:	ee17 5a90 	vmov	r5, s15
 8015c92:	4b99      	ldr	r3, [pc, #612]	@ (8015ef8 <__ieee754_rem_pio2+0x270>)
 8015c94:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015c98:	429e      	cmp	r6, r3
 8015c9a:	b088      	sub	sp, #32
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	d807      	bhi.n	8015cb0 <__ieee754_rem_pio2+0x28>
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	ed84 0b00 	vstr	d0, [r4]
 8015ca8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015cac:	2000      	movs	r0, #0
 8015cae:	e01b      	b.n	8015ce8 <__ieee754_rem_pio2+0x60>
 8015cb0:	4b92      	ldr	r3, [pc, #584]	@ (8015efc <__ieee754_rem_pio2+0x274>)
 8015cb2:	429e      	cmp	r6, r3
 8015cb4:	d83b      	bhi.n	8015d2e <__ieee754_rem_pio2+0xa6>
 8015cb6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8015cba:	2d00      	cmp	r5, #0
 8015cbc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8015eb8 <__ieee754_rem_pio2+0x230>
 8015cc0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8015cc4:	dd19      	ble.n	8015cfa <__ieee754_rem_pio2+0x72>
 8015cc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015cca:	429e      	cmp	r6, r3
 8015ccc:	d00e      	beq.n	8015cec <__ieee754_rem_pio2+0x64>
 8015cce:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8015ec0 <__ieee754_rem_pio2+0x238>
 8015cd2:	ee37 6b45 	vsub.f64	d6, d7, d5
 8015cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015cda:	ed84 6b00 	vstr	d6, [r4]
 8015cde:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015ce2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015ce6:	2001      	movs	r0, #1
 8015ce8:	b008      	add	sp, #32
 8015cea:	bd70      	pop	{r4, r5, r6, pc}
 8015cec:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015ec8 <__ieee754_rem_pio2+0x240>
 8015cf0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8015ed0 <__ieee754_rem_pio2+0x248>
 8015cf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015cf8:	e7eb      	b.n	8015cd2 <__ieee754_rem_pio2+0x4a>
 8015cfa:	429e      	cmp	r6, r3
 8015cfc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015d00:	d00e      	beq.n	8015d20 <__ieee754_rem_pio2+0x98>
 8015d02:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8015ec0 <__ieee754_rem_pio2+0x238>
 8015d06:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015d0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d0e:	ed84 6b00 	vstr	d6, [r4]
 8015d12:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015d16:	f04f 30ff 	mov.w	r0, #4294967295
 8015d1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8015d1e:	e7e3      	b.n	8015ce8 <__ieee754_rem_pio2+0x60>
 8015d20:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8015ec8 <__ieee754_rem_pio2+0x240>
 8015d24:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8015ed0 <__ieee754_rem_pio2+0x248>
 8015d28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015d2c:	e7eb      	b.n	8015d06 <__ieee754_rem_pio2+0x7e>
 8015d2e:	4b74      	ldr	r3, [pc, #464]	@ (8015f00 <__ieee754_rem_pio2+0x278>)
 8015d30:	429e      	cmp	r6, r3
 8015d32:	d870      	bhi.n	8015e16 <__ieee754_rem_pio2+0x18e>
 8015d34:	f000 f8ec 	bl	8015f10 <fabs>
 8015d38:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015d3c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015ed8 <__ieee754_rem_pio2+0x250>
 8015d40:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015d44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015d48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015d4c:	ee17 0a90 	vmov	r0, s15
 8015d50:	eeb1 4b45 	vneg.f64	d4, d5
 8015d54:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015eb8 <__ieee754_rem_pio2+0x230>
 8015d58:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015d5c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015ec0 <__ieee754_rem_pio2+0x238>
 8015d60:	281f      	cmp	r0, #31
 8015d62:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015d66:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015d6a:	dc05      	bgt.n	8015d78 <__ieee754_rem_pio2+0xf0>
 8015d6c:	4b65      	ldr	r3, [pc, #404]	@ (8015f04 <__ieee754_rem_pio2+0x27c>)
 8015d6e:	1e42      	subs	r2, r0, #1
 8015d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d74:	42b3      	cmp	r3, r6
 8015d76:	d109      	bne.n	8015d8c <__ieee754_rem_pio2+0x104>
 8015d78:	ee16 3a90 	vmov	r3, s13
 8015d7c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015d80:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015d84:	2b10      	cmp	r3, #16
 8015d86:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015d8a:	dc02      	bgt.n	8015d92 <__ieee754_rem_pio2+0x10a>
 8015d8c:	ed84 6b00 	vstr	d6, [r4]
 8015d90:	e01a      	b.n	8015dc8 <__ieee754_rem_pio2+0x140>
 8015d92:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8015ec8 <__ieee754_rem_pio2+0x240>
 8015d96:	eeb0 6b40 	vmov.f64	d6, d0
 8015d9a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8015d9e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015da2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015da6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8015ed0 <__ieee754_rem_pio2+0x248>
 8015daa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015dae:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015db2:	ee13 3a90 	vmov	r3, s7
 8015db6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015dba:	1ad3      	subs	r3, r2, r3
 8015dbc:	2b31      	cmp	r3, #49	@ 0x31
 8015dbe:	dc17      	bgt.n	8015df0 <__ieee754_rem_pio2+0x168>
 8015dc0:	eeb0 0b46 	vmov.f64	d0, d6
 8015dc4:	ed84 3b00 	vstr	d3, [r4]
 8015dc8:	ed94 6b00 	vldr	d6, [r4]
 8015dcc:	2d00      	cmp	r5, #0
 8015dce:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015dd2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015dd6:	ed84 0b02 	vstr	d0, [r4, #8]
 8015dda:	da85      	bge.n	8015ce8 <__ieee754_rem_pio2+0x60>
 8015ddc:	eeb1 6b46 	vneg.f64	d6, d6
 8015de0:	eeb1 0b40 	vneg.f64	d0, d0
 8015de4:	ed84 6b00 	vstr	d6, [r4]
 8015de8:	ed84 0b02 	vstr	d0, [r4, #8]
 8015dec:	4240      	negs	r0, r0
 8015dee:	e77b      	b.n	8015ce8 <__ieee754_rem_pio2+0x60>
 8015df0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8015ee0 <__ieee754_rem_pio2+0x258>
 8015df4:	eeb0 0b46 	vmov.f64	d0, d6
 8015df8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015dfc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8015e00:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015e04:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8015ee8 <__ieee754_rem_pio2+0x260>
 8015e08:	eeb0 7b46 	vmov.f64	d7, d6
 8015e0c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8015e10:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015e14:	e7ba      	b.n	8015d8c <__ieee754_rem_pio2+0x104>
 8015e16:	4b3c      	ldr	r3, [pc, #240]	@ (8015f08 <__ieee754_rem_pio2+0x280>)
 8015e18:	429e      	cmp	r6, r3
 8015e1a:	d906      	bls.n	8015e2a <__ieee754_rem_pio2+0x1a2>
 8015e1c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015e20:	ed80 7b02 	vstr	d7, [r0, #8]
 8015e24:	ed80 7b00 	vstr	d7, [r0]
 8015e28:	e740      	b.n	8015cac <__ieee754_rem_pio2+0x24>
 8015e2a:	ee10 3a10 	vmov	r3, s0
 8015e2e:	1532      	asrs	r2, r6, #20
 8015e30:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8015e34:	4618      	mov	r0, r3
 8015e36:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015e3a:	ec41 0b17 	vmov	d7, r0, r1
 8015e3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015e42:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8015ef0 <__ieee754_rem_pio2+0x268>
 8015e46:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015e4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015e4e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015e52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015e56:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015e5a:	a808      	add	r0, sp, #32
 8015e5c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015e64:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015e68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015e6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e70:	2103      	movs	r1, #3
 8015e72:	ed30 7b02 	vldmdb	r0!, {d7}
 8015e76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7e:	460b      	mov	r3, r1
 8015e80:	f101 31ff 	add.w	r1, r1, #4294967295
 8015e84:	d0f5      	beq.n	8015e72 <__ieee754_rem_pio2+0x1ea>
 8015e86:	4921      	ldr	r1, [pc, #132]	@ (8015f0c <__ieee754_rem_pio2+0x284>)
 8015e88:	9101      	str	r1, [sp, #4]
 8015e8a:	2102      	movs	r1, #2
 8015e8c:	9100      	str	r1, [sp, #0]
 8015e8e:	a802      	add	r0, sp, #8
 8015e90:	4621      	mov	r1, r4
 8015e92:	f000 f845 	bl	8015f20 <__kernel_rem_pio2>
 8015e96:	2d00      	cmp	r5, #0
 8015e98:	f6bf af26 	bge.w	8015ce8 <__ieee754_rem_pio2+0x60>
 8015e9c:	ed94 7b00 	vldr	d7, [r4]
 8015ea0:	eeb1 7b47 	vneg.f64	d7, d7
 8015ea4:	ed84 7b00 	vstr	d7, [r4]
 8015ea8:	ed94 7b02 	vldr	d7, [r4, #8]
 8015eac:	eeb1 7b47 	vneg.f64	d7, d7
 8015eb0:	ed84 7b02 	vstr	d7, [r4, #8]
 8015eb4:	e79a      	b.n	8015dec <__ieee754_rem_pio2+0x164>
 8015eb6:	bf00      	nop
 8015eb8:	54400000 	.word	0x54400000
 8015ebc:	3ff921fb 	.word	0x3ff921fb
 8015ec0:	1a626331 	.word	0x1a626331
 8015ec4:	3dd0b461 	.word	0x3dd0b461
 8015ec8:	1a600000 	.word	0x1a600000
 8015ecc:	3dd0b461 	.word	0x3dd0b461
 8015ed0:	2e037073 	.word	0x2e037073
 8015ed4:	3ba3198a 	.word	0x3ba3198a
 8015ed8:	6dc9c883 	.word	0x6dc9c883
 8015edc:	3fe45f30 	.word	0x3fe45f30
 8015ee0:	2e000000 	.word	0x2e000000
 8015ee4:	3ba3198a 	.word	0x3ba3198a
 8015ee8:	252049c1 	.word	0x252049c1
 8015eec:	397b839a 	.word	0x397b839a
 8015ef0:	00000000 	.word	0x00000000
 8015ef4:	41700000 	.word	0x41700000
 8015ef8:	3fe921fb 	.word	0x3fe921fb
 8015efc:	4002d97b 	.word	0x4002d97b
 8015f00:	413921fb 	.word	0x413921fb
 8015f04:	0801737c 	.word	0x0801737c
 8015f08:	7fefffff 	.word	0x7fefffff
 8015f0c:	080173fc 	.word	0x080173fc

08015f10 <fabs>:
 8015f10:	ec51 0b10 	vmov	r0, r1, d0
 8015f14:	4602      	mov	r2, r0
 8015f16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015f1a:	ec43 2b10 	vmov	d0, r2, r3
 8015f1e:	4770      	bx	lr

08015f20 <__kernel_rem_pio2>:
 8015f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	ed2d 8b06 	vpush	{d8-d10}
 8015f28:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8015f2c:	469b      	mov	fp, r3
 8015f2e:	9001      	str	r0, [sp, #4]
 8015f30:	4bbb      	ldr	r3, [pc, #748]	@ (8016220 <__kernel_rem_pio2+0x300>)
 8015f32:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8015f34:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8015f38:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8015f3c:	f112 0f14 	cmn.w	r2, #20
 8015f40:	bfa8      	it	ge
 8015f42:	1ed3      	subge	r3, r2, #3
 8015f44:	f10b 3aff 	add.w	sl, fp, #4294967295
 8015f48:	bfb8      	it	lt
 8015f4a:	2300      	movlt	r3, #0
 8015f4c:	f06f 0517 	mvn.w	r5, #23
 8015f50:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8016208 <__kernel_rem_pio2+0x2e8>
 8015f54:	bfa4      	itt	ge
 8015f56:	2018      	movge	r0, #24
 8015f58:	fb93 f3f0 	sdivge	r3, r3, r0
 8015f5c:	fb03 5505 	mla	r5, r3, r5, r5
 8015f60:	eba3 040a 	sub.w	r4, r3, sl
 8015f64:	4415      	add	r5, r2
 8015f66:	460f      	mov	r7, r1
 8015f68:	eb09 060a 	add.w	r6, r9, sl
 8015f6c:	a81a      	add	r0, sp, #104	@ 0x68
 8015f6e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8015f72:	2200      	movs	r2, #0
 8015f74:	42b2      	cmp	r2, r6
 8015f76:	dd0e      	ble.n	8015f96 <__kernel_rem_pio2+0x76>
 8015f78:	aa1a      	add	r2, sp, #104	@ 0x68
 8015f7a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8015f7e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8015f82:	2600      	movs	r6, #0
 8015f84:	454e      	cmp	r6, r9
 8015f86:	dc25      	bgt.n	8015fd4 <__kernel_rem_pio2+0xb4>
 8015f88:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8016208 <__kernel_rem_pio2+0x2e8>
 8015f8c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015f90:	4614      	mov	r4, r2
 8015f92:	2000      	movs	r0, #0
 8015f94:	e015      	b.n	8015fc2 <__kernel_rem_pio2+0xa2>
 8015f96:	42d4      	cmn	r4, r2
 8015f98:	d409      	bmi.n	8015fae <__kernel_rem_pio2+0x8e>
 8015f9a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8015f9e:	ee07 1a90 	vmov	s15, r1
 8015fa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015fa6:	eca0 7b02 	vstmia	r0!, {d7}
 8015faa:	3201      	adds	r2, #1
 8015fac:	e7e2      	b.n	8015f74 <__kernel_rem_pio2+0x54>
 8015fae:	eeb0 7b46 	vmov.f64	d7, d6
 8015fb2:	e7f8      	b.n	8015fa6 <__kernel_rem_pio2+0x86>
 8015fb4:	ecbc 5b02 	vldmia	ip!, {d5}
 8015fb8:	ed94 6b00 	vldr	d6, [r4]
 8015fbc:	3001      	adds	r0, #1
 8015fbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015fc2:	4550      	cmp	r0, sl
 8015fc4:	f1a4 0408 	sub.w	r4, r4, #8
 8015fc8:	ddf4      	ble.n	8015fb4 <__kernel_rem_pio2+0x94>
 8015fca:	ecae 7b02 	vstmia	lr!, {d7}
 8015fce:	3601      	adds	r6, #1
 8015fd0:	3208      	adds	r2, #8
 8015fd2:	e7d7      	b.n	8015f84 <__kernel_rem_pio2+0x64>
 8015fd4:	aa06      	add	r2, sp, #24
 8015fd6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8016210 <__kernel_rem_pio2+0x2f0>
 8015fda:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8016218 <__kernel_rem_pio2+0x2f8>
 8015fde:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015fe2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8015fe6:	9203      	str	r2, [sp, #12]
 8015fe8:	9302      	str	r3, [sp, #8]
 8015fea:	464c      	mov	r4, r9
 8015fec:	00e3      	lsls	r3, r4, #3
 8015fee:	9304      	str	r3, [sp, #16]
 8015ff0:	ab92      	add	r3, sp, #584	@ 0x248
 8015ff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015ff6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8015ffa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8015ffc:	ab06      	add	r3, sp, #24
 8015ffe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8016002:	461e      	mov	r6, r3
 8016004:	4620      	mov	r0, r4
 8016006:	2800      	cmp	r0, #0
 8016008:	f1a2 0208 	sub.w	r2, r2, #8
 801600c:	dc4a      	bgt.n	80160a4 <__kernel_rem_pio2+0x184>
 801600e:	4628      	mov	r0, r5
 8016010:	9305      	str	r3, [sp, #20]
 8016012:	f000 fa01 	bl	8016418 <scalbn>
 8016016:	eeb0 8b40 	vmov.f64	d8, d0
 801601a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801601e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016022:	f000 fa79 	bl	8016518 <floor>
 8016026:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801602a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801602e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016032:	2d00      	cmp	r5, #0
 8016034:	ee17 8a90 	vmov	r8, s15
 8016038:	9b05      	ldr	r3, [sp, #20]
 801603a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801603e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016042:	dd41      	ble.n	80160c8 <__kernel_rem_pio2+0x1a8>
 8016044:	1e60      	subs	r0, r4, #1
 8016046:	aa06      	add	r2, sp, #24
 8016048:	f1c5 0c18 	rsb	ip, r5, #24
 801604c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8016050:	fa46 f20c 	asr.w	r2, r6, ip
 8016054:	4490      	add	r8, r2
 8016056:	fa02 f20c 	lsl.w	r2, r2, ip
 801605a:	1ab6      	subs	r6, r6, r2
 801605c:	aa06      	add	r2, sp, #24
 801605e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8016062:	f1c5 0217 	rsb	r2, r5, #23
 8016066:	4116      	asrs	r6, r2
 8016068:	2e00      	cmp	r6, #0
 801606a:	dd3c      	ble.n	80160e6 <__kernel_rem_pio2+0x1c6>
 801606c:	f04f 0c00 	mov.w	ip, #0
 8016070:	f108 0801 	add.w	r8, r8, #1
 8016074:	4660      	mov	r0, ip
 8016076:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801607a:	4564      	cmp	r4, ip
 801607c:	dc66      	bgt.n	801614c <__kernel_rem_pio2+0x22c>
 801607e:	2d00      	cmp	r5, #0
 8016080:	dd03      	ble.n	801608a <__kernel_rem_pio2+0x16a>
 8016082:	2d01      	cmp	r5, #1
 8016084:	d072      	beq.n	801616c <__kernel_rem_pio2+0x24c>
 8016086:	2d02      	cmp	r5, #2
 8016088:	d07a      	beq.n	8016180 <__kernel_rem_pio2+0x260>
 801608a:	2e02      	cmp	r6, #2
 801608c:	d12b      	bne.n	80160e6 <__kernel_rem_pio2+0x1c6>
 801608e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016092:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016096:	b330      	cbz	r0, 80160e6 <__kernel_rem_pio2+0x1c6>
 8016098:	4628      	mov	r0, r5
 801609a:	f000 f9bd 	bl	8016418 <scalbn>
 801609e:	ee38 8b40 	vsub.f64	d8, d8, d0
 80160a2:	e020      	b.n	80160e6 <__kernel_rem_pio2+0x1c6>
 80160a4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80160a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80160ac:	3801      	subs	r0, #1
 80160ae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80160b2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80160b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80160ba:	eca6 0a01 	vstmia	r6!, {s0}
 80160be:	ed92 0b00 	vldr	d0, [r2]
 80160c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80160c6:	e79e      	b.n	8016006 <__kernel_rem_pio2+0xe6>
 80160c8:	d105      	bne.n	80160d6 <__kernel_rem_pio2+0x1b6>
 80160ca:	1e62      	subs	r2, r4, #1
 80160cc:	a906      	add	r1, sp, #24
 80160ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80160d2:	15f6      	asrs	r6, r6, #23
 80160d4:	e7c8      	b.n	8016068 <__kernel_rem_pio2+0x148>
 80160d6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80160da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80160de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e2:	da31      	bge.n	8016148 <__kernel_rem_pio2+0x228>
 80160e4:	2600      	movs	r6, #0
 80160e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80160ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ee:	f040 809b 	bne.w	8016228 <__kernel_rem_pio2+0x308>
 80160f2:	1e62      	subs	r2, r4, #1
 80160f4:	2000      	movs	r0, #0
 80160f6:	454a      	cmp	r2, r9
 80160f8:	da49      	bge.n	801618e <__kernel_rem_pio2+0x26e>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	d062      	beq.n	80161c4 <__kernel_rem_pio2+0x2a4>
 80160fe:	3c01      	subs	r4, #1
 8016100:	ab06      	add	r3, sp, #24
 8016102:	3d18      	subs	r5, #24
 8016104:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d0f8      	beq.n	80160fe <__kernel_rem_pio2+0x1de>
 801610c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016110:	4628      	mov	r0, r5
 8016112:	f000 f981 	bl	8016418 <scalbn>
 8016116:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8016210 <__kernel_rem_pio2+0x2f0>
 801611a:	1c62      	adds	r2, r4, #1
 801611c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801611e:	00d3      	lsls	r3, r2, #3
 8016120:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016124:	4622      	mov	r2, r4
 8016126:	2a00      	cmp	r2, #0
 8016128:	f280 80a8 	bge.w	801627c <__kernel_rem_pio2+0x35c>
 801612c:	4622      	mov	r2, r4
 801612e:	2a00      	cmp	r2, #0
 8016130:	f2c0 80c6 	blt.w	80162c0 <__kernel_rem_pio2+0x3a0>
 8016134:	a96a      	add	r1, sp, #424	@ 0x1a8
 8016136:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801613a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8016208 <__kernel_rem_pio2+0x2e8>
 801613e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8016224 <__kernel_rem_pio2+0x304>
 8016142:	2000      	movs	r0, #0
 8016144:	1aa1      	subs	r1, r4, r2
 8016146:	e0b0      	b.n	80162aa <__kernel_rem_pio2+0x38a>
 8016148:	2602      	movs	r6, #2
 801614a:	e78f      	b.n	801606c <__kernel_rem_pio2+0x14c>
 801614c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016150:	b948      	cbnz	r0, 8016166 <__kernel_rem_pio2+0x246>
 8016152:	b122      	cbz	r2, 801615e <__kernel_rem_pio2+0x23e>
 8016154:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8016158:	f843 2c04 	str.w	r2, [r3, #-4]
 801615c:	2201      	movs	r2, #1
 801615e:	f10c 0c01 	add.w	ip, ip, #1
 8016162:	4610      	mov	r0, r2
 8016164:	e789      	b.n	801607a <__kernel_rem_pio2+0x15a>
 8016166:	ebae 0202 	sub.w	r2, lr, r2
 801616a:	e7f5      	b.n	8016158 <__kernel_rem_pio2+0x238>
 801616c:	1e62      	subs	r2, r4, #1
 801616e:	ab06      	add	r3, sp, #24
 8016170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016174:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016178:	a906      	add	r1, sp, #24
 801617a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801617e:	e784      	b.n	801608a <__kernel_rem_pio2+0x16a>
 8016180:	1e62      	subs	r2, r4, #1
 8016182:	ab06      	add	r3, sp, #24
 8016184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801618c:	e7f4      	b.n	8016178 <__kernel_rem_pio2+0x258>
 801618e:	ab06      	add	r3, sp, #24
 8016190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016194:	3a01      	subs	r2, #1
 8016196:	4318      	orrs	r0, r3
 8016198:	e7ad      	b.n	80160f6 <__kernel_rem_pio2+0x1d6>
 801619a:	3301      	adds	r3, #1
 801619c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d0fa      	beq.n	801619a <__kernel_rem_pio2+0x27a>
 80161a4:	9a04      	ldr	r2, [sp, #16]
 80161a6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80161aa:	446a      	add	r2, sp
 80161ac:	eb04 000b 	add.w	r0, r4, fp
 80161b0:	a91a      	add	r1, sp, #104	@ 0x68
 80161b2:	1c66      	adds	r6, r4, #1
 80161b4:	3a98      	subs	r2, #152	@ 0x98
 80161b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80161ba:	4423      	add	r3, r4
 80161bc:	42b3      	cmp	r3, r6
 80161be:	da04      	bge.n	80161ca <__kernel_rem_pio2+0x2aa>
 80161c0:	461c      	mov	r4, r3
 80161c2:	e713      	b.n	8015fec <__kernel_rem_pio2+0xcc>
 80161c4:	9a03      	ldr	r2, [sp, #12]
 80161c6:	2301      	movs	r3, #1
 80161c8:	e7e8      	b.n	801619c <__kernel_rem_pio2+0x27c>
 80161ca:	9902      	ldr	r1, [sp, #8]
 80161cc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80161d0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80161d4:	9104      	str	r1, [sp, #16]
 80161d6:	ee07 1a90 	vmov	s15, r1
 80161da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80161de:	2400      	movs	r4, #0
 80161e0:	eca0 7b02 	vstmia	r0!, {d7}
 80161e4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016208 <__kernel_rem_pio2+0x2e8>
 80161e8:	4686      	mov	lr, r0
 80161ea:	4554      	cmp	r4, sl
 80161ec:	dd03      	ble.n	80161f6 <__kernel_rem_pio2+0x2d6>
 80161ee:	eca2 7b02 	vstmia	r2!, {d7}
 80161f2:	3601      	adds	r6, #1
 80161f4:	e7e2      	b.n	80161bc <__kernel_rem_pio2+0x29c>
 80161f6:	ecbc 5b02 	vldmia	ip!, {d5}
 80161fa:	ed3e 6b02 	vldmdb	lr!, {d6}
 80161fe:	3401      	adds	r4, #1
 8016200:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016204:	e7f1      	b.n	80161ea <__kernel_rem_pio2+0x2ca>
 8016206:	bf00      	nop
	...
 8016214:	3e700000 	.word	0x3e700000
 8016218:	00000000 	.word	0x00000000
 801621c:	41700000 	.word	0x41700000
 8016220:	08017548 	.word	0x08017548
 8016224:	08017508 	.word	0x08017508
 8016228:	4268      	negs	r0, r5
 801622a:	eeb0 0b48 	vmov.f64	d0, d8
 801622e:	f000 f8f3 	bl	8016418 <scalbn>
 8016232:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8016400 <__kernel_rem_pio2+0x4e0>
 8016236:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623e:	db17      	blt.n	8016270 <__kernel_rem_pio2+0x350>
 8016240:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8016408 <__kernel_rem_pio2+0x4e8>
 8016244:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016248:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801624c:	aa06      	add	r2, sp, #24
 801624e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016252:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016256:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801625a:	3518      	adds	r5, #24
 801625c:	ee10 3a10 	vmov	r3, s0
 8016260:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016264:	ee17 3a10 	vmov	r3, s14
 8016268:	3401      	adds	r4, #1
 801626a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801626e:	e74d      	b.n	801610c <__kernel_rem_pio2+0x1ec>
 8016270:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016274:	aa06      	add	r2, sp, #24
 8016276:	ee10 3a10 	vmov	r3, s0
 801627a:	e7f6      	b.n	801626a <__kernel_rem_pio2+0x34a>
 801627c:	a806      	add	r0, sp, #24
 801627e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016282:	9001      	str	r0, [sp, #4]
 8016284:	ee07 0a90 	vmov	s15, r0
 8016288:	3a01      	subs	r2, #1
 801628a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801628e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016292:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016296:	ed21 7b02 	vstmdb	r1!, {d7}
 801629a:	e744      	b.n	8016126 <__kernel_rem_pio2+0x206>
 801629c:	ecbc 5b02 	vldmia	ip!, {d5}
 80162a0:	ecb5 6b02 	vldmia	r5!, {d6}
 80162a4:	3001      	adds	r0, #1
 80162a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80162aa:	4548      	cmp	r0, r9
 80162ac:	dc01      	bgt.n	80162b2 <__kernel_rem_pio2+0x392>
 80162ae:	4281      	cmp	r1, r0
 80162b0:	daf4      	bge.n	801629c <__kernel_rem_pio2+0x37c>
 80162b2:	a842      	add	r0, sp, #264	@ 0x108
 80162b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80162b8:	ed81 7b00 	vstr	d7, [r1]
 80162bc:	3a01      	subs	r2, #1
 80162be:	e736      	b.n	801612e <__kernel_rem_pio2+0x20e>
 80162c0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80162c2:	2a02      	cmp	r2, #2
 80162c4:	dc0a      	bgt.n	80162dc <__kernel_rem_pio2+0x3bc>
 80162c6:	2a00      	cmp	r2, #0
 80162c8:	dc2d      	bgt.n	8016326 <__kernel_rem_pio2+0x406>
 80162ca:	d046      	beq.n	801635a <__kernel_rem_pio2+0x43a>
 80162cc:	f008 0007 	and.w	r0, r8, #7
 80162d0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80162d4:	ecbd 8b06 	vpop	{d8-d10}
 80162d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162dc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80162de:	2a03      	cmp	r2, #3
 80162e0:	d1f4      	bne.n	80162cc <__kernel_rem_pio2+0x3ac>
 80162e2:	a942      	add	r1, sp, #264	@ 0x108
 80162e4:	f1a3 0208 	sub.w	r2, r3, #8
 80162e8:	440a      	add	r2, r1
 80162ea:	4611      	mov	r1, r2
 80162ec:	4620      	mov	r0, r4
 80162ee:	2800      	cmp	r0, #0
 80162f0:	f1a1 0108 	sub.w	r1, r1, #8
 80162f4:	dc52      	bgt.n	801639c <__kernel_rem_pio2+0x47c>
 80162f6:	4621      	mov	r1, r4
 80162f8:	2901      	cmp	r1, #1
 80162fa:	f1a2 0208 	sub.w	r2, r2, #8
 80162fe:	dc5d      	bgt.n	80163bc <__kernel_rem_pio2+0x49c>
 8016300:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8016410 <__kernel_rem_pio2+0x4f0>
 8016304:	aa42      	add	r2, sp, #264	@ 0x108
 8016306:	4413      	add	r3, r2
 8016308:	2c01      	cmp	r4, #1
 801630a:	dc67      	bgt.n	80163dc <__kernel_rem_pio2+0x4bc>
 801630c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8016310:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8016314:	2e00      	cmp	r6, #0
 8016316:	d167      	bne.n	80163e8 <__kernel_rem_pio2+0x4c8>
 8016318:	ed87 5b00 	vstr	d5, [r7]
 801631c:	ed87 6b02 	vstr	d6, [r7, #8]
 8016320:	ed87 7b04 	vstr	d7, [r7, #16]
 8016324:	e7d2      	b.n	80162cc <__kernel_rem_pio2+0x3ac>
 8016326:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8016410 <__kernel_rem_pio2+0x4f0>
 801632a:	aa42      	add	r2, sp, #264	@ 0x108
 801632c:	4413      	add	r3, r2
 801632e:	4622      	mov	r2, r4
 8016330:	2a00      	cmp	r2, #0
 8016332:	da24      	bge.n	801637e <__kernel_rem_pio2+0x45e>
 8016334:	b34e      	cbz	r6, 801638a <__kernel_rem_pio2+0x46a>
 8016336:	eeb1 7b46 	vneg.f64	d7, d6
 801633a:	ed87 7b00 	vstr	d7, [r7]
 801633e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8016342:	aa44      	add	r2, sp, #272	@ 0x110
 8016344:	2301      	movs	r3, #1
 8016346:	ee37 7b46 	vsub.f64	d7, d7, d6
 801634a:	429c      	cmp	r4, r3
 801634c:	da20      	bge.n	8016390 <__kernel_rem_pio2+0x470>
 801634e:	b10e      	cbz	r6, 8016354 <__kernel_rem_pio2+0x434>
 8016350:	eeb1 7b47 	vneg.f64	d7, d7
 8016354:	ed87 7b02 	vstr	d7, [r7, #8]
 8016358:	e7b8      	b.n	80162cc <__kernel_rem_pio2+0x3ac>
 801635a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8016410 <__kernel_rem_pio2+0x4f0>
 801635e:	aa42      	add	r2, sp, #264	@ 0x108
 8016360:	4413      	add	r3, r2
 8016362:	2c00      	cmp	r4, #0
 8016364:	da05      	bge.n	8016372 <__kernel_rem_pio2+0x452>
 8016366:	b10e      	cbz	r6, 801636c <__kernel_rem_pio2+0x44c>
 8016368:	eeb1 7b47 	vneg.f64	d7, d7
 801636c:	ed87 7b00 	vstr	d7, [r7]
 8016370:	e7ac      	b.n	80162cc <__kernel_rem_pio2+0x3ac>
 8016372:	ed33 6b02 	vldmdb	r3!, {d6}
 8016376:	3c01      	subs	r4, #1
 8016378:	ee37 7b06 	vadd.f64	d7, d7, d6
 801637c:	e7f1      	b.n	8016362 <__kernel_rem_pio2+0x442>
 801637e:	ed33 7b02 	vldmdb	r3!, {d7}
 8016382:	3a01      	subs	r2, #1
 8016384:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016388:	e7d2      	b.n	8016330 <__kernel_rem_pio2+0x410>
 801638a:	eeb0 7b46 	vmov.f64	d7, d6
 801638e:	e7d4      	b.n	801633a <__kernel_rem_pio2+0x41a>
 8016390:	ecb2 6b02 	vldmia	r2!, {d6}
 8016394:	3301      	adds	r3, #1
 8016396:	ee37 7b06 	vadd.f64	d7, d7, d6
 801639a:	e7d6      	b.n	801634a <__kernel_rem_pio2+0x42a>
 801639c:	ed91 7b00 	vldr	d7, [r1]
 80163a0:	ed91 5b02 	vldr	d5, [r1, #8]
 80163a4:	3801      	subs	r0, #1
 80163a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80163aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163ae:	ed81 6b00 	vstr	d6, [r1]
 80163b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80163b6:	ed81 7b02 	vstr	d7, [r1, #8]
 80163ba:	e798      	b.n	80162ee <__kernel_rem_pio2+0x3ce>
 80163bc:	ed92 7b00 	vldr	d7, [r2]
 80163c0:	ed92 5b02 	vldr	d5, [r2, #8]
 80163c4:	3901      	subs	r1, #1
 80163c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80163ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163ce:	ed82 6b00 	vstr	d6, [r2]
 80163d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80163d6:	ed82 7b02 	vstr	d7, [r2, #8]
 80163da:	e78d      	b.n	80162f8 <__kernel_rem_pio2+0x3d8>
 80163dc:	ed33 6b02 	vldmdb	r3!, {d6}
 80163e0:	3c01      	subs	r4, #1
 80163e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80163e6:	e78f      	b.n	8016308 <__kernel_rem_pio2+0x3e8>
 80163e8:	eeb1 5b45 	vneg.f64	d5, d5
 80163ec:	eeb1 6b46 	vneg.f64	d6, d6
 80163f0:	ed87 5b00 	vstr	d5, [r7]
 80163f4:	eeb1 7b47 	vneg.f64	d7, d7
 80163f8:	ed87 6b02 	vstr	d6, [r7, #8]
 80163fc:	e790      	b.n	8016320 <__kernel_rem_pio2+0x400>
 80163fe:	bf00      	nop
 8016400:	00000000 	.word	0x00000000
 8016404:	41700000 	.word	0x41700000
 8016408:	00000000 	.word	0x00000000
 801640c:	3e700000 	.word	0x3e700000
	...

08016418 <scalbn>:
 8016418:	ee10 1a90 	vmov	r1, s1
 801641c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016420:	b98b      	cbnz	r3, 8016446 <scalbn+0x2e>
 8016422:	ee10 3a10 	vmov	r3, s0
 8016426:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801642a:	4319      	orrs	r1, r3
 801642c:	d00a      	beq.n	8016444 <scalbn+0x2c>
 801642e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80164e0 <scalbn+0xc8>
 8016432:	4b37      	ldr	r3, [pc, #220]	@ (8016510 <scalbn+0xf8>)
 8016434:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016438:	4298      	cmp	r0, r3
 801643a:	da0b      	bge.n	8016454 <scalbn+0x3c>
 801643c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80164e8 <scalbn+0xd0>
 8016440:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016444:	4770      	bx	lr
 8016446:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801644a:	4293      	cmp	r3, r2
 801644c:	d107      	bne.n	801645e <scalbn+0x46>
 801644e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016452:	4770      	bx	lr
 8016454:	ee10 1a90 	vmov	r1, s1
 8016458:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801645c:	3b36      	subs	r3, #54	@ 0x36
 801645e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016462:	4290      	cmp	r0, r2
 8016464:	dd0d      	ble.n	8016482 <scalbn+0x6a>
 8016466:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80164f0 <scalbn+0xd8>
 801646a:	ee10 3a90 	vmov	r3, s1
 801646e:	eeb0 6b47 	vmov.f64	d6, d7
 8016472:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80164f8 <scalbn+0xe0>
 8016476:	2b00      	cmp	r3, #0
 8016478:	fe27 7b05 	vselge.f64	d7, d7, d5
 801647c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016480:	4770      	bx	lr
 8016482:	4418      	add	r0, r3
 8016484:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8016488:	4298      	cmp	r0, r3
 801648a:	dcec      	bgt.n	8016466 <scalbn+0x4e>
 801648c:	2800      	cmp	r0, #0
 801648e:	dd0a      	ble.n	80164a6 <scalbn+0x8e>
 8016490:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016494:	ec53 2b10 	vmov	r2, r3, d0
 8016498:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801649c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80164a0:	ec43 2b10 	vmov	d0, r2, r3
 80164a4:	4770      	bx	lr
 80164a6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80164aa:	da09      	bge.n	80164c0 <scalbn+0xa8>
 80164ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80164e8 <scalbn+0xd0>
 80164b0:	ee10 3a90 	vmov	r3, s1
 80164b4:	eeb0 6b47 	vmov.f64	d6, d7
 80164b8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8016500 <scalbn+0xe8>
 80164bc:	2b00      	cmp	r3, #0
 80164be:	e7db      	b.n	8016478 <scalbn+0x60>
 80164c0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80164c4:	ec53 2b10 	vmov	r2, r3, d0
 80164c8:	3036      	adds	r0, #54	@ 0x36
 80164ca:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80164ce:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80164d2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016508 <scalbn+0xf0>
 80164d6:	ec43 2b10 	vmov	d0, r2, r3
 80164da:	e7b1      	b.n	8016440 <scalbn+0x28>
 80164dc:	f3af 8000 	nop.w
 80164e0:	00000000 	.word	0x00000000
 80164e4:	43500000 	.word	0x43500000
 80164e8:	c2f8f359 	.word	0xc2f8f359
 80164ec:	01a56e1f 	.word	0x01a56e1f
 80164f0:	8800759c 	.word	0x8800759c
 80164f4:	7e37e43c 	.word	0x7e37e43c
 80164f8:	8800759c 	.word	0x8800759c
 80164fc:	fe37e43c 	.word	0xfe37e43c
 8016500:	c2f8f359 	.word	0xc2f8f359
 8016504:	81a56e1f 	.word	0x81a56e1f
 8016508:	00000000 	.word	0x00000000
 801650c:	3c900000 	.word	0x3c900000
 8016510:	ffff3cb0 	.word	0xffff3cb0
 8016514:	00000000 	.word	0x00000000

08016518 <floor>:
 8016518:	ee10 3a90 	vmov	r3, s1
 801651c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8016520:	ee10 2a10 	vmov	r2, s0
 8016524:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016528:	2913      	cmp	r1, #19
 801652a:	b530      	push	{r4, r5, lr}
 801652c:	4615      	mov	r5, r2
 801652e:	dc33      	bgt.n	8016598 <floor+0x80>
 8016530:	2900      	cmp	r1, #0
 8016532:	da18      	bge.n	8016566 <floor+0x4e>
 8016534:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80165f8 <floor+0xe0>
 8016538:	ee30 0b07 	vadd.f64	d0, d0, d7
 801653c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016544:	dd0a      	ble.n	801655c <floor+0x44>
 8016546:	2b00      	cmp	r3, #0
 8016548:	da50      	bge.n	80165ec <floor+0xd4>
 801654a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801654e:	4313      	orrs	r3, r2
 8016550:	2200      	movs	r2, #0
 8016552:	4293      	cmp	r3, r2
 8016554:	4b2a      	ldr	r3, [pc, #168]	@ (8016600 <floor+0xe8>)
 8016556:	bf08      	it	eq
 8016558:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801655c:	4619      	mov	r1, r3
 801655e:	4610      	mov	r0, r2
 8016560:	ec41 0b10 	vmov	d0, r0, r1
 8016564:	e01f      	b.n	80165a6 <floor+0x8e>
 8016566:	4827      	ldr	r0, [pc, #156]	@ (8016604 <floor+0xec>)
 8016568:	4108      	asrs	r0, r1
 801656a:	ea03 0400 	and.w	r4, r3, r0
 801656e:	4314      	orrs	r4, r2
 8016570:	d019      	beq.n	80165a6 <floor+0x8e>
 8016572:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80165f8 <floor+0xe0>
 8016576:	ee30 0b07 	vadd.f64	d0, d0, d7
 801657a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016582:	ddeb      	ble.n	801655c <floor+0x44>
 8016584:	2b00      	cmp	r3, #0
 8016586:	bfbe      	ittt	lt
 8016588:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801658c:	410a      	asrlt	r2, r1
 801658e:	189b      	addlt	r3, r3, r2
 8016590:	ea23 0300 	bic.w	r3, r3, r0
 8016594:	2200      	movs	r2, #0
 8016596:	e7e1      	b.n	801655c <floor+0x44>
 8016598:	2933      	cmp	r1, #51	@ 0x33
 801659a:	dd05      	ble.n	80165a8 <floor+0x90>
 801659c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80165a0:	d101      	bne.n	80165a6 <floor+0x8e>
 80165a2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80165a6:	bd30      	pop	{r4, r5, pc}
 80165a8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80165ac:	f04f 30ff 	mov.w	r0, #4294967295
 80165b0:	40e0      	lsrs	r0, r4
 80165b2:	4210      	tst	r0, r2
 80165b4:	d0f7      	beq.n	80165a6 <floor+0x8e>
 80165b6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80165f8 <floor+0xe0>
 80165ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80165be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80165c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c6:	ddc9      	ble.n	801655c <floor+0x44>
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	da02      	bge.n	80165d2 <floor+0xba>
 80165cc:	2914      	cmp	r1, #20
 80165ce:	d103      	bne.n	80165d8 <floor+0xc0>
 80165d0:	3301      	adds	r3, #1
 80165d2:	ea22 0200 	bic.w	r2, r2, r0
 80165d6:	e7c1      	b.n	801655c <floor+0x44>
 80165d8:	2401      	movs	r4, #1
 80165da:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80165de:	fa04 f101 	lsl.w	r1, r4, r1
 80165e2:	440a      	add	r2, r1
 80165e4:	42aa      	cmp	r2, r5
 80165e6:	bf38      	it	cc
 80165e8:	191b      	addcc	r3, r3, r4
 80165ea:	e7f2      	b.n	80165d2 <floor+0xba>
 80165ec:	2200      	movs	r2, #0
 80165ee:	4613      	mov	r3, r2
 80165f0:	e7b4      	b.n	801655c <floor+0x44>
 80165f2:	bf00      	nop
 80165f4:	f3af 8000 	nop.w
 80165f8:	8800759c 	.word	0x8800759c
 80165fc:	7e37e43c 	.word	0x7e37e43c
 8016600:	bff00000 	.word	0xbff00000
 8016604:	000fffff 	.word	0x000fffff

08016608 <_init>:
 8016608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801660a:	bf00      	nop
 801660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801660e:	bc08      	pop	{r3}
 8016610:	469e      	mov	lr, r3
 8016612:	4770      	bx	lr

08016614 <_fini>:
 8016614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016616:	bf00      	nop
 8016618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801661a:	bc08      	pop	{r3}
 801661c:	469e      	mov	lr, r3
 801661e:	4770      	bx	lr
